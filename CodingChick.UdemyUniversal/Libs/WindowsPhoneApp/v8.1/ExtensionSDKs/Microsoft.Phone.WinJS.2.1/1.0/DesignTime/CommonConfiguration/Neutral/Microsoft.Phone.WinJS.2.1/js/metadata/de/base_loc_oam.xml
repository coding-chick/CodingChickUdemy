<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">Versucht, die Erfüllung eines zugesicherten Werts abzubrechen. Wenn die Zusicherung nicht bereits erfüllt wurde und der Abbruch unterstützt wird, wechselt die Zusicherung in den Fehlerzustand mit einem Fehlerwert ("Abgebrochen").</msg>
  <msg name="WinJS.PromiseStateMachine.done">Ermöglicht Ihnen die Angabe der Aufgaben, die für die Erfüllung des zugesicherten Werts ausgeführt werden müssen, die Angabe der Fehlerbehandlung, die ausgeführt werden muss, wenn die Zusicherung einen Wert nicht erfüllen kann, und die Angabe der Behandlung der Statusbenachrichtigungen während des Prozesses. Nachdem die Handler die Ausführung beendet haben, löst diese Funktion einen Fehler aus, der im Fehlerzustand von then() als Zusicherung zurückgegeben worden wäre.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung erfolgreich mit einem Wert erfüllt wird. Der erfüllte Wert wird als einzelnes Argument übergeben. Wenn der Wert NULL ist, wird der erfüllte Wert zurückgegeben. Der Wert, der von der Funktion zurückgegeben wird, nimmt den erfüllten Wert der Zusicherung an, der von then() zurückgegeben wird. Wenn eine Ausnahme bei Ausführung der Funktion ausgelöst wird, wechselt die von then() zurückgegebene Zusicherung in den Fehlerzustand.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung mit einem Fehler erfüllt wird. Der Fehler wird als einzelnes Argument übergeben. Wenn er NULL ist, wird der Fehler weitergeleitet. Der Wert, der von der Funktion zurückgegeben wird, entspricht dem erfüllten Wert der Zusicherung, der von then() zurückgegeben wird.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung einen Status meldet. Daten zum Status werden als einzelnes Argument übergeben. Zusicherungen sind zur Unterstützung des Status nicht erforderlich.</msg>
  <msg name="WinJS.PromiseStateMachine.then">Ermöglicht Ihnen die Angabe der Aufgaben, die für die Erfüllung des zugesicherten Werts ausgeführt werden müssen, die Angabe der Fehlerbehandlung, die ausgeführt werden muss, wenn die Zusicherung einen Wert nicht erfüllen kann, und die Angabe der Behandlung der Statusbenachrichtigungen während des Prozesses.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung erfolgreich mit einem Wert erfüllt wird. Der Wert wird als einzelnes Argument übergeben. Wenn der Wert NULL ist, wird der Wert zurückgegeben. Der Wert, der von der Funktion zurückgegeben wird, nimmt den erfüllten Wert der Zusicherung an, der von then() zurückgegeben wird. Wenn eine Ausnahme ausgelöst wird, während diese Funktion ausgeführt wird, wechselt die von then() zurückgegebene Zusicherung in den Fehlerzustand.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung mit einem Fehler erfüllt wird. Der Fehler wird als einzelnes Argument übergeben. Wenn er NULL ist, wird der Fehler weitergeleitet. Der Wert, der von der Funktion zurückgegeben wird, nimmt den erfüllten Wert der Zusicherung an, der von then() zurückgegeben wird.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung einen Status meldet. Daten zum Status werden als einzelnes Argument übergeben. Zusicherungen sind zur Unterstützung des Status nicht erforderlich.</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">Die Zusicherung, deren Wert das Ergebnis der Ausführung der vollständigen oder Fehlerfunktion ist.</msg>
  <msg name="WinJS.Promise">Eine Zusicherung stellt einen Mechanismus zur Planung der für einen Wert auszuführenden Aufgaben bereit, der noch nicht berechnet wurde. Dies ist eine praktische Abstraktion zum Verwalten von Interaktionen mit asynchronen APIs.</msg>
  <msg name="WinJS.Promise_p:init">Die Funktion, die während der Konstruktion der Zusicherung aufgerufen wird. Die Funktion wird mit drei Argumenten angegebenen (vollständig, Fehler, Status). Innerhalb dieser Funktion sollten Sie Ereignislistener für Benachrichtigungen hinzufügen, die durch diesen Wert unterstützt werden.</msg>
  <msg name="WinJS.Promise_p:oncancel">Die Funktion, die aufgerufen werden soll, wenn ein Consumer dieser Zusicherung die noch nicht ausgeführten Aufgaben abbrechen möchte. Zusicherungen sind zur Unterstützung des Abbruchs nicht erforderlich.</msg>
  <msg name="WinJS.Promise.addEventListener">Fügt dem Steuerelement einen Ereignislistener hinzu.</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">Der Typ (Name) des Ereignisses.</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">Der Listener, der aufgerufen werden soll, wenn das Ereignis ausgelöst wird.</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">Gibt an, ob die Erfassung initiiert werden soll.</msg>
  <msg name="WinJS.Promise.any">Gibt eine Zusicherung zurück, die erfüllt wird, wenn eine der Eingabezusicherungen erfüllt wurde.</msg>
  <msg name="WinJS.Promise.any_p:values">Ein Array, das Zusicherungsobjekte oder Objekte enthält, deren Eigenschaftswerte Zusicherungsobjekte enthalten.</msg>
  <msg name="WinJS.Promise.any_returnValue">Eine Zusicherung, die bei Erfüllung den Wert der Eingabe ergibt (vollständig oder Fehler).</msg>
  <msg name="WinJS.Promise.as">Gibt eine Zusicherung zurück. Wenn das Objekt bereits eine Zusicherung ist, wird es zurückgegeben; andernfalls wird das Objekt mit einer Zusicherung umschlossen.</msg>
  <msg name="WinJS.Promise.as_p:value">Der als Zusicherung zu behandelnde Wert.</msg>
  <msg name="WinJS.Promise.as_returnValue">Eine Zusicherung.</msg>
  <msg name="WinJS.Promise.cancel">Abgebrochener Zusicherungswert, kann von einem Zusicherungsabschlusshandler zurückgegeben werden, um den Abbruch der Zusicherungskette anzugeben.</msg>
  <msg name="WinJS.Promise.dispatchEvent">Löst ein Ereignis des angegebenen Typs mit den angegebenen Eigenschaften aus.</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">Der Satz von zusätzlichen Eigenschaften, die an das Ereignisobjekt angefügt werden sollen.</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">Gibt an, ob preventDefault für das Ereignis aufgerufen wurde.</msg>
  <msg name="WinJS.Promise.is">Bestimmt, ob ein Wert den Zusicherungsvertrag erfüllt.</msg>
  <msg name="WinJS.Promise.is_p:value">Ein Wert, der möglicherweise eine Zusicherung ist.</msg>
  <msg name="WinJS.Promise.is_returnValue">"True", wenn der angegebene Wert eine Zusicherung ist, andernfalls "false".</msg>
  <msg name="WinJS.Promise.join">Erstellt eine Zusicherung, die erfüllt wird, wenn alle Werte erfüllt werden.</msg>
  <msg name="WinJS.Promise.join_p:values">Ein Objekt, dessen Felder Werte enthalten, von denen einige Zusicherungen sein können.</msg>
  <msg name="WinJS.Promise.join_returnValue">Eine Zusicherung, deren Wert ein Objekt mit den gleichen Feldnamen wie die des Objekts im Werteparameter ist, wobei jeder Feldwert der erfüllte Wert einer Zusicherung ist.</msg>
  <msg name="WinJS.Promise.removeEventListener">Entfernt einen Ereignislistener aus dem Steuerelement.</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">Der zu entfernende Listener.</msg>
  <msg name="WinJS.Promise.then">Eine statische Version der Zusicherungsinstanzmethode then().</msg>
  <msg name="WinJS.Promise.then_p:value">Der als Zusicherung zu behandelnde Wert.</msg>
  <msg name="WinJS.Promise.then_p:complete">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung mit einem Wert erfüllt wird. Wenn der Wert NULL ist, gibt die Zusicherung einfach den Wert zurück. Der Wert wird als einzelnes Argument übergeben.</msg>
  <msg name="WinJS.Promise.then_p:error">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung mit einem Fehler erfüllt wird. Der Fehler wird als einzelnes Argument übergeben.</msg>
  <msg name="WinJS.Promise.then_returnValue">Eine Zusicherung, deren Wert das Ergebnis der Ausführung der bereitgestellten vollständigen Funktion ist.</msg>
  <msg name="WinJS.Promise.thenEach">Führt einen Vorgang für alle Eingabezusicherungen aus und gibt eine Zusicherung zurück, die die Form der Eingabe hat und das Ergebnis des Vorgangs enthält, der für jede Eingabe ausgeführt wurde.</msg>
  <msg name="WinJS.Promise.thenEach_p:values">Ein Satz von Werten (entweder ein Array oder ein Objekt), von denen einige oder alle Zusicherungen sind.</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">Die Funktion, die aufgerufen werden soll, wenn die Zusicherung mit einem Wert erfüllt wird. Wenn der Wert NULL ist, gibt die Zusicherung den Wert zurück. Der Wert wird als einzelnes Argument übergeben.</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">Eine Zusicherung, die das Ergebnis des Aufrufs von Promise.join für den Werteparameter ist.</msg>
  <msg name="WinJS.Promise.timeout">Erstellt eine Zusicherung, die nach einem Timeout erfüllt wird.</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">Zeitdauer für das Timeout (in Millisekunden). Wenn dieser Wert NULL oder nicht angegeben ist, wird SetImmediate aufgerufen; andernfalls wird setTimeout aufgerufen.</msg>
  <msg name="WinJS.Promise.timeout_p:promise">Eine Zusicherung, die abgebrochen wird, wenn sie nicht abgeschlossen wird, bevor das Timeout abgelaufen ist.</msg>
  <msg name="WinJS.Promise.timeout_returnValue">Eine Zusicherung, die nach dem angegebenen Timeout asynchron abgeschlossen wird.</msg>
  <msg name="WinJS.Promise.wrap">Bindet einen Nichtzusicherungswert in eine Zusicherung ein. Sie können diese Funktion verwenden, wenn Sie einen Wert an eine Funktion übergeben müssen, die eine Zusicherung erfordert.</msg>
  <msg name="WinJS.Promise.wrap_p:value">Ein Nichtzusicherungswert, der in eine Zusicherung eingebunden werden soll.</msg>
  <msg name="WinJS.Promise.wrap_returnValue">Eine Zusicherung, die mit dem angegebenen Wert erfolgreich erfüllt wird</msg>
  <msg name="WinJS.Promise.wrapError">Bindet einen Nichtzusicherungs-Fehlerwert in eine Zusicherung ein. Sie können diese Funktion verwenden, wenn Sie einen Fehler an eine Funktion übergeben müssen, die eine Zusicherung erfordert.</msg>
  <msg name="WinJS.Promise.wrapError_p:error">Ein Nichtzusicherungs-Fehlerwert, der in eine Zusicherung eingebunden werden soll.</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">Eine Zusicherung, die sich in einem Fehlerzustand mit dem angegebenen Wert befindet.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">Ruft einen Wert ab, der angibt, ob der asynchrone Auftrag abgeschlossen wurde. Dieser Wert ist wahr, wenn der Auftrag bis zu Ende ausgeführt ist falsch, wenn er noch nicht ausgeführt oder abgebrochen wurde.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">Ruft den eindeutigen Bezeichner für diesen Auftrag ab.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">Ruft eine Zeichenfolge ab, die den Diagnosenamen für diesen Auftrag angibt.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">Ruft ein Besitzertoken für den Auftrag ab. Sie können die cancelAll-Methode des Tokens dieses Besitzers verwenden, um verbundene Aufträge abzubrechen.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">Ruft die Priorität ab, zu der der Auftrag vom Planer ausgeführt wird oder legt sie fest.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">Bricht den Auftrag ab.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">Hält den Auftrag an.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">Setzt den Auftrag fort, wenn er unterbrochen wurde.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">Die Auftragsinstanz, für die die Aufgabe gerade ausgeführt wird.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">Ein boolescher Wert, der wahr wird, wenn die Arbeitsaufgabe angefordert wird, um gemeinsam vom Planer abgegeben zu werden.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">Wird aufgerufen, wenn die Arbeitsaufgabe auf asynchronen Aufgaben blockiert wird. Der Planer wartet darauf, dass die angegebene Zusage abgeschlossen ist, bevor er den Auftrag neu plant.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">Ein Zusagewert, der, wenn er abgeschlossen wurde, eine neue Arbeitsaufgabenfunktion bereitstellt, die geplant wird.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">Wird aufgerufen, wenn die Arbeitsaufgabe zusammen zum Planer abgegeben wird und in Zukunft mehr Arbeit abzuschließen ist. Verwenden Sie diese Methode, um zusätzliche Arbeit zu planen, wenn die Arbeitsaufgabe im Begriff ist abgegeben zu werden.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">Die Arbeitsfunktion, die neu geplant wird.</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">Bricht alle Aufträge ab, die diesem Besitzertoken zugeordnet werden.</msg>
  <msg name="WinJS.ErrorFromName">Erstellt ein Fehlerobjekt mit den angegebenen Namens- und Nachrichteneigenschaften.</msg>
  <msg name="WinJS.ErrorFromName_p:name">Der Name dieses Fehlers. Der Name wird programmgesteuert verwendet und sollte nicht lokalisiert werden.</msg>
  <msg name="WinJS.ErrorFromName_p:message">Die Meldung für diesen Fehler. Die Meldung wird von Personen verwendet und sollte lokalisiert werden.</msg>
  <msg name="WinJS.ErrorFromName_returnValue">Fehlerinstanz mit aufgefüllten .name- und .message-Eigenschaften</msg>
  <msg name="WinJS.Utilities.QueryCollection">Stellt das Ergebnis einer Abfragenauswahl dar und stellt verschiedene Vorgänge bereit, die Aktionen über die Elemente der Auflistung ausführen.</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">Die Elemente, die aus der Abfrage resultieren.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">Führt eine Aktion für jedes Element in QueryCollection aus</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">Aktion, die für jedes Element ausgeführt werden soll.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">Argument, das an callbackFn gebunden werden soll</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">Gibt die QueryCollection zurück</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">Ruft ein Element aus der QueryCollection ab.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">Der Index des zurückzugebenden Elements.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">Ein einzelnes Element aus der Auflistung.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">Legt einen Attributwert für alle Elemente in der Auflistung fest.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">Der Name des festzulegenden Attributs.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">Der Wert des festzulegenden Attributs.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">Dieses QueryCollection-Objekt.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">Ruft einen Attributwert aus dem ersten Element in der Auflistung ab.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">Der Name des Attributs.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">Der Wert des Attributs.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">Fügt die angegebene Klasse allen Elementen in der Auflistung hinzu.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">Der Name der hinzuzufügenden Klasse.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">Bestimmt, ob die angegebene Klasse im ersten Element der Auflistung vorhanden ist.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">Der Name der Klasse.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">"True", wenn das Element die angegebene Klasse aufweist; andernfalls "false".</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">Entfernt die angegebene Klasse aus allen Elementen in der Auflistung.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">Der Name der zu entfernenden Klasse.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">Schaltet die angegebene Klasse für alle Elemente in der Auflistung um (bzw. fügt sie hinzu oder entfernt sie). Wenn die Klasse vorhanden ist, wird sie entfernt; wenn sie nicht vorhanden ist, wird sie hinzugefügt.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">Der Name der umzuschaltenden Klasse.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">Registriert den Listener für das angegebene Ereignis für alle Elemente in der Auflistung.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">Der Name des Ereignisses.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">Die Ereignishandlerfunktion, die aufgerufen werden soll, wenn das Ereignis auftritt.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">"true", wenn "capture == true" an den addEventListener übergeben werden soll; andernfalls "false".</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">Hebt die Registrierung des Listeners für das angegebene Ereignis für alle Elemente in der Auflistung auf.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">Die Ereignishandlerfunktion.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">true wenn capture == true; andernfalls false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">Legt die angegebene Formateigenschaft für alle Elemente in der Auflistung fest.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">Der Name der Formateigenschaft.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">Der Wert für die Eigenschaft.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">Löscht die angegebene Formateigenschaft für alle Elemente in der Auflistung.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">Der Name der zu löschenden Formateigenschaft.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">Führt eine Abfragenauswahl für alle Elemente in der Auflistung aus und fasst das Ergebnis in einer QueryCollection zusammen.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">Die Abfrageauswahlzeichenfolge.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">Ein QueryCollection-Objekt, das die gesamten Ergebnisse der Ausführung der Abfrage für alle Elemente in der Auflistung enthält.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">Fügt dieser QueryCollection einen Satz von Elementen hinzu.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">Die Elemente, die der QueryCollection hinzugefügt werden sollen. Dies kann ein arrayähnliches Objekt, ein Dokumentfragment oder ein einzelnes Element sein.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">Erstellt Steuerelemente, die den Elementen in dieser QueryCollection angefügt werden.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">Eine Konstruktorfunktion, die verwendet wird, um Steuerelemente zu erstellen, die an Elemente angefügt werden sollen.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">Die Optionen, die an die neu erstellten Steuerelemente übergeben wurden.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">Konfiguriert die Steuerelemente, die den Elementen in dieser QueryCollection angefügt werden.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">Die Optionen, die an die Steuerelemente übergeben wurden.</msg>
  <msg name="WinJS.UI.HtmlControl">Ermöglicht es Ihnen, eine HTML-Seite dynamisch einzuschließen.</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">Initialisiert eine neue Instanz von HtmlControl, um ein neues Seitensteuerelement zu definieren.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">Das Element, das HtmlControl hostet.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">Die Optionen zum Konfigurieren der Seite. Die URI-Option ist erforderlich, um das Quelldokument für den Inhalt der Seite anzugeben.</msg>
  <msg name="WinJS.UI.TabContainer.constructor">Erstellt den TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">Das DOM-Element, das dem TabContainer zugeordnet werden soll.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">Der Satz von Optionen, der zuerst auf den TabContainer angewendet werden soll.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">Ein erstellter TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.dispose">Gibt den Registerkartencontainer frei.</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">Ruft das untergeordnete Element ab, das den Fokus besitzt, oder legt es fest.</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">Ruft die Aktivierreihenfolge des Steuerelements in dessen Container ab oder legt diese fest.</msg>
  <msg name="WinJS.Application.IOHelper.exists">Bestimmt, ob die angegebene Datei im Container vorhanden ist</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">Die Datei, die innerhalb dieses Ordners vorhanden ist</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">Zusicherung entweder mit "true" (Datei vorhanden) oder "false".</msg>
  <msg name="WinJS.Application.IOHelper.remove">Löscht eine Datei im Container</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">Die zu löschende Datei</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">Zusicherung, die erfüllt wird, wenn die Datei gelöscht wurde</msg>
  <msg name="WinJS.Application.IOHelper.writeText">Schreibt eine Datei mit dem angegebenen Text in den Container</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">Die Datei, in die geschrieben werden soll</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">Der in die Datei zu schreibende Inhalt</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">Zusicherung mit der Anzahl von geschriebenen Zeichen</msg>
  <msg name="WinJS.Application.IOHelper.readText">Liest den Inhalt einer Datei aus dem Container; wenn die Datei nicht vorhanden ist, wird "def" zurückgegeben.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">Die Datei, aus der Daten gelesen werden sollen</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">Der Standardwert, der zurückgegeben werden soll, wenn die Datei nicht geöffnet werden kann</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">Zusicherung mit dem Inhalt der Datei oder "def".</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">Der Dateiname, der innerhalb dieses Ordners vorhanden ist</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">Löscht eine Datei im Container</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">Der Name der Datei, in die geschrieben werden soll.</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">Der Name der Datei, aus der gelesen werden soll.</msg>
  <msg name="WinJS.Binding.observableMixin.bind">Verknüpft die angegebene Aktion mit der im Namensparameter angegebenen Eigenschaft. Diese Funktion wird aufgerufen, wenn der Wert der Eigenschaft möglicherweise geändert wurde. Es ist weder gewährleistet, dass die Aktion nur aufgerufen wird, wenn ein Wert tatsächlich geändert wurde, noch ist gewährleistet, dass die Aktion für jede Wertänderung aufgerufen wird. Die Implementierung dieser Funktion verbindet Änderungsbenachrichtigungen so, dass mehrere Updates für einen Eigenschaftswert möglicherweise nur zu einem einzigen Aufruf der angegebenen Aktion führen.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">Der Name der Eigenschaft, an die die Aktion gebunden wird.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">Die Funktion, die asynchron aufgerufen werden soll, wenn die Eigenschaft möglicherweise geändert wurde.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">Dieses Objekt wird zurückgegeben.</msg>
  <msg name="WinJS.Binding.Template.constructor">Erstellt eine Vorlage, die ein wiederverwendbares deklaratives Bindungselement bereitstellt.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">Das DOM-Element, das in eine Vorlage konvertiert werden soll.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">Wenn dieser Parameter angegeben wird, wird die Vorlage aus dem URI geladen und der Inhalt des Elementparameters wird ignoriert.</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">Wenn sie angegeben wird, wird diese Funktion als Standardinitialisierer für Datenbindungen verwendet, die nicht explizit einen angeben. Die bereitgestellte Funktion muss als zur Verarbeitung unterstützt markiert werden.</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">Gibt an, dass Vorlagen zur ersten Renderzeit in den Debugger einlaufen sollten</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">Legen Sie diese Eigenschaft auf wahr fest, um klassische Vorlagenverarbeitung und Datenbindung wiederherzustellen und Vorlagenkompilierung zu deaktivieren.</msg>
  <msg name="WinJS.Binding.Template.element">Ruft das DOM-Element ab, das als Vorlage verwendet wird.</msg>
  <msg name="WinJS.Binding.Template.extractChild">Geben Sie das erste untergeordnete Element des Elements der Vorlage anstelle eines Wrapperelements, das den ganzen Vorlageninhalt hostet, zurück.</msg>
  <msg name="WinJS.Binding.Template.processTimeout">Anzahl der Millisekunden, um die das Instanziieren von deklarativen Steuerelementen verzögert werden soll. Null (0) führt zu keiner Verzögerung, eine negative Zahl ergibt eine SetImmediate-Verzögerung, eine positive Zahl wird als Anzahl von Millisekunden behandelt.</msg>
  <msg name="WinJS.Binding.Template.render">Bindet Werte aus dem angegebenen Datenkontext an die Elemente, die Nachfolger des angegebenen Stammelements sind und die deklarative Bindungsattribute (data-win-bind) besitzen.</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">Das Objekt zur Verwendung für die Standarddatenbindung.</msg>
  <msg name="WinJS.Binding.Template.render_p:container">Das Element, dem diese gerenderte Vorlage hinzugefügt werden soll. Wenn dieser Parameter ausgelassen wird, wird ein neues DIV-Element erstellt.</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">Eine Zusicherung, die ausgeführt wird, nachdem die Bindung abgeschlossen ist. Der Wert ist entweder das Element, das im Containerparameter angegeben ist, oder das erstellte DIV-Element.</msg>
  <msg name="WinJS.Binding.Template.renderItem">Rendert eine Instanz dieser Vorlage, die an die im Element enthaltenen Daten gebunden ist. Wenn der wiederverwendete Parameter vorhanden ist und EnableRecycling "true" ist, versucht die Vorlage, die DOM-Elemente aus dem wiederverwendeten Parameter wiederzuverwenden.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">Das Objekt, das die Daten für die Bindung enthält. Nur item.data ist erforderlich.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">Eine zuvor generierte Vorlageninstanz.</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">Das DOM-Element.</msg>
  <msg name="WinJS.Binding.Template">Stellt ein wiederverwendbares deklaratives Bindungselement bereit.</msg>
  <msg name="WinJS.Binding.Template_name">Vorlage</msg>
  <msg name="WinJS.Binding.List.constructor">Erstellt ein WinJS.Binding.List-Objekt.</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">Das Array mit den Elementen zur Initialisierung der Liste.</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">Wenn options.binding "true" ist, enthält die Liste das Ergebnis des Aufrufs von WinJS.Binding.as() für die Elementwerte. Wenn options.proxy "true" ist, wird die Liste, die als erster Parameter angegeben ist, als Speicher für WinJS.Binding.List verwendet. Diese Option sollte mit Bedacht eingesetzt werden, da unkoordinierte Bearbeitungen des Datenspeichers zu Fehlern führen.</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">Die neu erstellte WinJS.Binding.List-Instanz.</msg>
  <msg name="WinJS.Binding.List.length">Ruft die Länge der Liste ab oder legt sie fest. Hierbei handelt es sich um einen ganzzahligen Wert, der um eins höher ist als das höchste in der Liste definierte Element.</msg>
  <msg name="WinJS.Binding.List.getItem">Ruft ein Schlüssel/Datenpaar für den angegebenen Listenindex ab.</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">Der Index des abzurufenden Werts.</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">Ein Objekt mit .key- und .data-Eigenschaften.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">Ruft ein Schlüssel/Datenpaar für den angegebenen Listenelementschlüssel ab.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">Der Schlüssel des abzurufenden Werts.</msg>
  <msg name="WinJS.Binding.List.indexOfKey">Ruft den Index des ersten Vorkommens eines Schlüssels in einer Liste ab.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">Der in der Liste zu suchende Schlüssel.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">Der Index des ersten Vorkommens eines Schlüssels in einer Liste oder -1, wenn kein Schlüssel gefunden wird.</msg>
  <msg name="WinJS.Binding.List.move">Verschiebt den Wert am Index an die angegebene Position.</msg>
  <msg name="WinJS.Binding.List.move_p:index">Der ursprüngliche Index des Werts.</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">Der Index des Werts nach der Verschiebung.</msg>
  <msg name="WinJS.Binding.List.notifyMutated">Erzwingt, dass die Liste eine itemmutated-Benachrichtigung an alle Listener für den Wert am angegebenen Index sendet.</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">Der Index des Werts, der verändert wurde.</msg>
  <msg name="WinJS.Binding.List.setAt">Ersetzt den Wert am angegebenen Index durch einen neuen Wert.</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">Der Index des Werts, der ersetzt wurde.</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">Der neue Wert.</msg>
  <msg name="WinJS.Binding.List.reverse">Gibt eine Liste mit den Elementen in umgekehrter Reihenfolge zurück. Diese Methode kehrt die Reihenfolge der Elemente eines vorhandenen Listenobjekts um. Bei der Ausführung der Methode wird kein neues Listenobjekt erstellt.</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">Die umgekehrte Liste.</msg>
  <msg name="WinJS.Binding.List.sort">Gibt eine Liste mit den Elementen in sortierter Reihenfolge zurück. Diese Methode sortiert die Elemente eines vorhandenen Listenobjekts. Bei der Ausführung der Methode wird kein neues Listenobjekt erstellt.</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">Die Funktion für die Bestimmung der Reihenfolge der Elemente. Wenn die Angabe ausgelassen wird, werden die Elemente aufsteigend in ASCII-Zeichenreihenfolge sortiert.</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">Die sortierte Liste.</msg>
  <msg name="WinJS.Binding.List.pop">Entfernt das letzte Element aus einer Liste und gibt es zurück.</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">Letztes Element aus der Liste.</msg>
  <msg name="WinJS.Binding.List.push">Fügt neue Elemente an eine Liste an und gibt die neue Länge der Liste zurück.</msg>
  <msg name="WinJS.Binding.List.push_p:value">Das am Ende der Liste einzufügende Element.</msg>
  <msg name="WinJS.Binding.List.push_returnValue">Die neue Länge der Liste.</msg>
  <msg name="WinJS.Binding.List.shift">Entfernt das erste Element aus einer Liste und gibt es zurück.</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">Erstes Element aus der Liste.</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">Das am Anfang der Liste einzufügende Element.</msg>
  <msg name="WinJS.Binding.List.splice">Entfernt Elemente aus einer Liste und fügt ggf. an ihrer Stelle neue Elemente ein, wobei die gelöschten Elemente zurückgegeben werden.</msg>
  <msg name="WinJS.Binding.List.splice_p:start">Die nullbasierte Position in der Liste, an der das Entfernen von Elementen beginnen soll.</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">Die Anzahl der zu entfernenden Elemente.</msg>
  <msg name="WinJS.Binding.List.splice_p:item">Die Elemente, die anstelle der gelöschten Elemente in die Liste eingefügt werden sollen.</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">Die gelöschten Elemente.</msg>
  <msg name="WinJS.Namespace.defineWithParent">Definiert einen neuen Namespace mit dem angegebenen Namen unter dem angegebenen übergeordneten Namespace.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">Der übergeordnete Namespace.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">Der Name des neuen Namespaces.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">Der Member des neuen Namespaces.</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">Der neu definierte Namespace.</msg>
  <msg name="WinJS.Namespace.define">Definiert einen neuen Namespace mit dem angegebenen Namen.</msg>
  <msg name="WinJS.Namespace.define_p:name">Der Name des Namespaces. Dieser könnte ein durch Punkte getrennter Name für geschachtelte Namespaces sein.</msg>
  <msg name="WinJS.Class.define">Definiert eine Klasse mit dem angegebenen Konstruktor und den angegebenen Instanzmembern.</msg>
  <msg name="WinJS.Class.define_p:constructor">Eine Konstruktorfunktion, die verwendet wird, um die Klasse zu instanziieren.</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">Der Satz von Instanzfeldern, Eigenschaften und Methoden, der für die Klasse verfügbar gemacht wurde.</msg>
  <msg name="WinJS.Class.define_p:staticMembers">Der Satz von statischen Feldern, Eigenschaften und Methoden, der für die Klasse verfügbar gemacht wurde.</msg>
  <msg name="WinJS.Class.define_returnValue">Die neu definierte Klasse.</msg>
  <msg name="WinJS.Class.derive">Erstellt mit der prototypischen Vererbung eine Unterklasse auf Grundlage des angegebenen baseClass Parameters.</msg>
  <msg name="WinJS.Class.derive_p:baseClass">Die Klasse für die Vererbung.</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">Der Satz von Instanzfeldern, Eigenschaften und Methoden, der für die Klasse verfügbar gemacht werden soll.</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">Der Satz von statischen Feldern, Eigenschaften und Methoden, der für die Klasse verfügbar gemacht werden soll.</msg>
  <msg name="WinJS.Class.mix">Definiert eine Klasse mit dem angegebenen Konstruktor und der Gesamtmenge des Satzes von Instanzmembern, die durch alle mixin-Objekte angegeben werden. Die mixin-Parameterliste hat eine variable Länge.</msg>
  <msg name="WinJS.Utilities.hasWinRT">Bestimmen Sie, ob WinRT in diesem Skriptkontext zugänglich ist.</msg>
  <msg name="WinJS.Utilities.getMember">Ruft den Typ oder Namespace auf Blattebene ab, der vom Namensparameter angegeben wird.</msg>
  <msg name="WinJS.Utilities.getMember_p:name">Der Name des Members.</msg>
  <msg name="WinJS.Utilities.getMember_p:root">Der Stamm für den Start. Wird standardmäßig auf das globale Objekt festgelegt.</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">Der Typ oder Namespace auf Blattebene im angegebenen übergeordneten Namespace.</msg>
  <msg name="WinJS.Utilities.ready">Stellt sicher, dass die angegebene Funktion erst ausgeführt wird, nachdem das DOMContentLoaded-Ereignis für die aktuelle Seite ausgelöst wurde.</msg>
  <msg name="WinJS.Utilities.ready_returnValue">Eine Zusicherung, die abgeschlossen wird, nachdem DOMContentLoaded aufgetreten ist.</msg>
  <msg name="WinJS.Utilities.ready_p:callback">Eine Funktion, die ausgeführt wird, nachdem DOMContentLoaded aufgetreten ist.</msg>
  <msg name="WinJS.Utilities.ready_p:async">Wenn "true", wird der Rückruf asynchron ausgeführt.</msg>
  <msg name="WinJS.Utilities.strictProcessing">Bestimmt, ob die strikte deklarative Verarbeitung in diesem Skriptkontext aktiviert ist.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">Markiert eine Funktion als kompatibel mit der deklarativen Verarbeitung, wie WinJS.UI.processAll oder WinJS.Binding.processAll.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">Die Funktion, die als kompatibel mit der deklarativen Verarbeitung markiert werden soll.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">Die Eingabefunktion.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">Überprüft, dass der Wert mit der deklarativen Verarbeitung, wie WinJS.UI.processAll oder WinJS.Binding.processAll, kompatibel ist. Wenn er nicht kompatibel ist, wird eine Ausnahme ausgelöst.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">Der für die Kompatibilität mit der deklarativen Verarbeitung zu testende Wert. Wenn der Wert eine Funktion ist, muss er mit einer supportedForProcessing-Eigenschaft mit dem Wert "true" markiert werden.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">Der Eingabewert.</msg>
  <msg name="WinJS.strictProcessing">Strict-Verarbeitung wird immer erzwungen, diese Methode hat keine Auswirkungen.</msg>
  <msg name="WinJS.Utilities.isPhone">Bestimmen, ob eine aktuelle Ausführung über das Telefon erfolgt.</msg>
  <msg name="WinJS.Utilities.formatLog">Fügt Tags und den Typ einer Protokollierungsmeldung hinzu.</msg>
  <msg name="WinJS.Utilities.startLog_p:message">Die zu formatierende Meldung.</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">Die auf die Meldung anzuwendenden Tags. Trennen Sie mehrere Tags durch Leerzeichen.</msg>
  <msg name="WinJS.Utilities.startLog_p:type">Der Typ der Meldung.</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">Die formatierte Meldung.</msg>
  <msg name="WinJS.Utilities.startLog">Konfiguriert eine Protokollierung, die Meldungen mit den angegebenen Tags aus WinJS.log in console.log schreibt.</msg>
  <msg name="WinJS.Utilities.startLog_p:options">Die Tags zur Protokollierung von Meldungen. Trennen Sie mehrere Tags durch Leerzeichen.</msg>
  <msg name="WinJS.Utilities.startLog2">Konfigurieren Sie eine Protokollierung, um die WinJS.log-Ausgabe zu schreiben.</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">Kann .type-, .tags-, .excludeTags- und .action-Eigenschaften enthalten. - .type ist ein erforderliches Tag. - .excludeTags ist eine durch Leerzeichen getrennte Liste von Tags, von denen jedes dazu führt, dass eine Meldung nicht protokolliert wird. - .tags ist eine durch Leerzeichen getrennte Liste von Tags, von denen jedes dazu führt, dass eine Meldung protokolliert wird. - .action ist eine Funktion, die, wenn vorhanden, mit der Protokollmeldung, den Tags und dem Typ aufgerufen wird. Der Standardwert ist die Protokollierung in der Konsole.</msg>
  <msg name="WinJS.Utilities.stopLog">Entfernt die zuvor eingerichtete Protokollierung.</msg>
  <msg name="WinJS.Utilities.createEventProperties">Erstellt ein Objekt, das eine Eigenschaft für jeden Namen an die Funktion übergeben hat.</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">Eine variable Liste von Eigenschaftennamen.</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">Das Objekt mit den angegebenen Eigenschaften. Den Namen der Eigenschaften ist "on" vorangestellt.</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">Wenn "true", wird die Erfassung initiiert, andernfalls "false".</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">Löst ein Ereignis des angegebenen Typs mit den angegebenen zusätzlichen Eigenschaften aus.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">Der Satz von zusätzlichen Eigenschaften, die an das Ereignisobjekt angefügt werden sollen, wenn das Ereignis ausgelöst wird.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">"True", wenn preventDefault für das Ereignis aufgerufen wurde.</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">Gibt an, ob die Erfassung initiiert werden soll.</msg>
  <msg name="WinJS.Resources.addEventListener">Registriert einen Ereignishandler für das angegebene Ereignis.</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">Der Name des zu behandelnden Ereignisses.</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">Der Listener, der aufgerufen werden soll, wenn das Ereignis ausgelöst wird.</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">Auf "true" festgelegt, um den Ereignishandler für die Erfassungsphase zu registrieren; auf "false" festgelegt zur Registrierung für die Bubbling-Phase.</msg>
  <msg name="WinJS.Resources.getString">Ruft die Ressourcenzeichenfolge ab, die über die angegebene Ressourcen-ID verfügt.</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">Die Ressourcen-ID der abzurufenden Zeichenfolge.</msg>
  <msg name="WinJS.Resources.getString_returnValue">Ein Objekt, das folgende Eigenschaften enthalten kann: "value": Der Wert der angeforderten Zeichenfolge. Diese Eigenschaft ist immer vorhanden. "empty": Ein Wert, der angibt, ob die angeforderte Zeichenfolge nicht gefunden wurde. Wenn der Wert "true" ist, wurde die Zeichenfolge nicht gefunden. Wenn er "false" oder nicht definiert ist, wurde die angeforderte Zeichenfolge gefunden. "lang": Die Sprache der Zeichenfolge, falls angegeben. Diese Eigenschaft ist nur für mehrsprachige Ressourcen vorhanden.</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">Gibt eine Zeichenfolgendarstellung des Zustands des Planers zu Diagnosezwecken zurück. Die Aufträge und die Abflussanforderungen werden in der Reihenfolge angezeigt, in der aktuell erwartet wird, dass sie verarbeitet werden. Der aktuelle Auftrag und die Abflussanforderung werden durch ein Sternchen markiert.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">Führt Aufträge im Planer ohne Timeslicing aus, bis alle Aufträge der angegebenen Priorität und höher ausgeführt wurden.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">Die Priorität, zu der der Planer leeren soll. Der Standardwert ist Priority.min, was alle Aufträge in der Warteschlange leert.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">Eine optionale Beschreibung der Abflussanfrage für Diagnose.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">Eine Zusage, die abgeschlossen wird, wenn der Abfluss beendet wurde. Das Abbrechen der Zusage bricht die Abflussanforderung ab. Diese Zusage wird nie einem Fehlerzustand einnehmen.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">Führt den angegebenen Rückruf in einem Kontext mit hoher Priorität aus.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">Der Rückruf, der in einem Kontext mit hoher Priorität ausgeführt wird.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">Der Rückgabewert des Rückrufs.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">Erstellt ein Token des neuen Besitzers bzw. gibt eins zurück, das auf die Besitzereigenschaft mindestens eines Auftrags festgelegt werden kann. Es kann dann verwendet werden, um alle Aufträge abzubrechen, die es "besitzt".</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">Das neue Besitzertoken. Sie können dieses Token verwenden, um die Aufträge, die es besitzt, zu steuern.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">Plant die angegebene Funktion zum asynchronen Ausführen.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">Eine Funktion, die die zu planende Arbeitsaufgabe darstellt. Wenn sie aufgerufen wird, empfängt die Arbeitsaufgabe als erstes Argument ein JobInfo-Objekt, das der Arbeitsaufgabe ermöglicht, den Planer zu fragen, ob sie kooperativ zurückgehalten werden soll und, wenn ja, der Arbeitsaufgabe entweder ermöglicht, eine Funktion bereitstellen, die als Fortsetzung ausgeführt wird, oder ein WinJS.Promise-Element, das, wenn es abgeschlossen ist, eine Funktion bereitstellt, die als Fortsetzung ausgeführt wird.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">Die Priorität, mit der die Arbeitsaufgabe geplant werden soll. Der Standardwert ist Priority.normal.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">Eine "diese"-Instanz, die in die Arbeitsaufgabe gebunden werden soll. Der Standardwert ist NULL.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">Eine Beschreibung der Arbeitsaufgabe für Diagnosen. Der Standardwert ist eine leere Zeichenfolge ("").</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">Die Auftragsinstanz, die diese Arbeitsaufgabe darstellt.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">Plant, dass ein Auftrag eine zurückgegebene Zusage abschließt. Es gibt vier Versionen dieser Methode für verschiedene häufig verwendete Prioritäten: schedulePromiseHigh, schedulePromiseAboveNormal, schedulePromiseNormal, schedulePromiseBelowNormal und schedulePromiseIdle. Die Beispielverwendung zeigt, wie sichergestellt wird, dass der letzte Link in einer Zusagekette auf den Planer mit hoher Priorität ausgeführt wird: asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">Der Wert, mit dem die zurückgegebene Zusage abgeschlossen wurde.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">Eine Zeichenfolge, die den Auftrag zu Diagnosezwecken beschreibt.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">Eine Zusage, die innerhalb eines Auftrags mit gewünschter Priorität abschließt.</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">Ruft die aktuelle Priorität ab, mit der der Aufrufer ausführt.</msg>
  <msg name="WinJS.xhr">Umschließt Aufrufe von XMLHttpRequest in einer Zusicherung.</msg>
  <msg name="WinJS.xhr_p:options">Die Optionen, die auf das XMLHttpRequest-Objekt angewendet werden. Dies sind: "type", "url", "user", "password", "headers", "responseType", "data" und "customRequestInitializer".</msg>
  <msg name="WinJS.xhr_returnValue">Eine Zusicherung, die das XMLHttpRequest-Objekt zurückgibt, wenn sie abgeschlossen wird.</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">Legt die innerHTML-Eigenschaft des angegebenen Elements auf den angegebenen Text fest.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">Das Element, für das die innerHTML-Eigenschaft festgelegt werden soll.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">Der Wert, der auf die innerHTML-Eigenschaft festgelegt werden soll.</msg>
  <msg name="WinJS.Utilities.setOuterHTML">Legt die outerHTML-Eigenschaft des angegebenen Elements auf den angegebenen Text fest.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">Das Element, für das die outerHTML-Eigenschaft festgelegt werden soll.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">Der Wert, der auf die outerHTML-Eigenschaft festgelegt werden soll.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">Ruft insertAdjacentHTML für das angegebene Element auf.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">Das Element, für das insertAdjacentHTML aufgerufen werden soll.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">Die Position relativ zu dem Element, an dem HTML eingefügt werden soll.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">Der Wert, der für insertAdjacentHTML bereitgestellt werden soll.</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">Legt die outerHTML-Eigenschaft des angegebenen Elements auf den angegebenen Text im Kontext von msWWA.execUnsafeLocalFunction fest.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">Ruft insertAdjacentHTML für das angegebene Element im Kontext von msWWA.execUnsafeLocalFunction auf.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">Wert, der für insertAdjacentHTML bereitgestellt werden soll.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">Legt die innerHTML-Eigenschaft eines Elements auf den angegebenen Text fest, wenn er eine msIsStaticHTML-Prüfung besteht.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">Legt die outerHTML-Eigenschaft eines Elements auf den angegebenen Text fest, wenn er eine msIsStaticHTML-Prüfung besteht.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">Ruft insertAdjacentHTML für das Element auf, wenn es eine msIsStaticHTML-Prüfung besteht.</msg>
  <msg name="WinJS.Utilities.markDisposable">Fügt die angegebene Löschimplementierung dem angegebenen Element an und markiert es als löschbar.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">Das als löschbar zu markierende Element.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">Die Funktion, die die elementspezifische Löschlogik enthält, die von der Löschfunktion aufgerufen wird.</msg>
  <msg name="WinJS.Utilities.disposeSubTree">Löscht alle löschbaren Elemente der ersten Generation, die vom angegebenen Elements abstammen. Das angegebene Element selbst wird nicht gelöscht.</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">Das Stammelement, dessen Teilstruktur gelöscht werden soll.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">Fügt den Satz von deklarativ angegebenen Optionen (Eigenschaften und Ereignisse) dem angegebenen Steuerelement hinzu. Wenn der Name der Optioneneigenschaft mit "on" beginnt, ist der Eigenschaftswert eine Funktion und das Steuerelement unterstützt addEventListener. Die setOptions-Methode ruft die addEventListener-Methode für das Steuerelement auf.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">Das Steuerelement, auf das die Eigenschaften und Ereignisse angewendet werden sollen.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">Der Satz von Optionen, die deklarativ angegeben werden.</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">"True", um die Aufzeichnung zu initiieren; andernfalls "false".</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">Löst ein Ereignis des angegebenen Typs aus und fügt die angegebenen zusätzlichen Eigenschaften hinzu.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">"True", wenn preventDefault für das Ereignis aufgerufen wurde; andernfalls "false".</msg>
  <msg name="WinJS.UI.select.createSelect">Führt die DOM-Struktur aus dem angegebenen Element durch das Stammverzeichnis des Dokuments. Sobald ein Auswahlbereich erkannt wird, führt die Auswahl innerhalb dieses Bereichs eine Suche nach der angegebenen Auswahlzeichenfolge aus. Das erste übereinstimmende Element wird zurückgegeben.</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">Die Auswahlzeichenfolge.</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">Das Zielelement, falls es gefunden wird.</msg>
  <msg name="WinJS.UI.processAll">Wendet die deklarative Steuerelementbindung auf alle Elemente an und beginnt dabei am angegebenen Stammelement.</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">Das Element, bei dem die Anwendung der Bindung beginnen soll. Wenn dieser Parameter nicht angegeben wird, wird die Bindung auf das gesamte Dokument angewendet.</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">Wenn "true", überspringen die Elemente, die gebunden werden sollen, das angegebene Stammelement und schließen nur die untergeordneten Elemente ein.</msg>
  <msg name="WinJS.UI.processAll_returnValue">Eine Zusicherung, die erfüllt wird, wenn die Bindung auf alle Steuerelemente angewendet wurde.</msg>
  <msg name="WinJS.UI.process">Wendet die deklarative Steuerelementbindung auf das angegebene Element an.</msg>
  <msg name="WinJS.UI.process_p:element">Das zu bindende Element.</msg>
  <msg name="WinJS.UI.process_returnValue">Eine Zusicherung, die erfüllt wird, nachdem das Steuerelement aktiviert ist. Der Wert der Zusicherung ist das Steuerelement, das an das Element angefügt wird.</msg>
  <msg name="WinJS.Utilities.query">Führt eine Abfragenauswahl für das angegebene Element oder das gesamte Dokument aus.</msg>
  <msg name="WinJS.Utilities.query_p:query">Die auszuführende Abfragenauswahl.</msg>
  <msg name="WinJS.Utilities.query_p:element">Das Element, für das die Abfrage ausgeführt werden soll. Wenn dieser Parameter nicht angegeben wird, wird die Abfrage für das gesamte Dokument ausgeführt.</msg>
  <msg name="WinJS.Utilities.query_returnValue">Die QueryCollection, die die Ergebnisse der Abfrage enthält.</msg>
  <msg name="WinJS.Utilities.id">Sucht ein Element nach ID und bindet das Ergebnis in eine QueryCollection ein.</msg>
  <msg name="WinJS.Utilities.id_p:id">Die ID des Elements.</msg>
  <msg name="WinJS.Utilities.id_returnValue">Eine QueryCollection, die das Element enthält, falls es gefunden wird.</msg>
  <msg name="WinJS.Utilities.children">Erstellt eine QueryCollection, die die untergeordneten Elemente des angegebenen übergeordneten Elements enthält.</msg>
  <msg name="WinJS.Utilities.children_p:element">Das übergeordnete Element.</msg>
  <msg name="WinJS.Utilities.children_returnValue">Die QueryCollection, die die untergeordneten Elemente des Elements enthält.</msg>
  <msg name="WinJS.Utilities.Key">Definiert einen Satz Tastaturwerte.</msg>
  <msg name="WinJS.Utilities.Key.backspace">RÜCKTASTE.</msg>
  <msg name="WinJS.Utilities.Key.tab">TAB-TASTE</msg>
  <msg name="WinJS.Utilities.Key.enter">EINGABETASTE.</msg>
  <msg name="WinJS.Utilities.Key.shift">UMSCHALTTASTE.</msg>
  <msg name="WinJS.Utilities.Key.ctrl">STRG-TASTE</msg>
  <msg name="WinJS.Utilities.Key.alt">ALT-TASTE</msg>
  <msg name="WinJS.Utilities.Key.pause">PAUSE-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.capsLock">FESTSTELLTASTE.</msg>
  <msg name="WinJS.Utilities.Key.escape">ESC-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.space">LEERTASTE.</msg>
  <msg name="WinJS.Utilities.Key.pageUp">BILD-AUF-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.pageDown">BILD-AB-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.end">ENDE-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.home">POS1-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">NACH-LINKS-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.upArrow">NACH-OBEN-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">NACH-RECHTS-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.downArrow">NACH-UNTEN-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.insert">EINFG-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">ENTF-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num0">ZAHL 0-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num1">ZAHL 1-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num2">ZAHL 2-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num3">ZAHL 3-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num4">ZAHL 4-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num5">ZAHL 5-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num6">ZAHL 6-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num7">ZAHL 7-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num8">ZAHL 8-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.num9">ZAHL 9-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.a">A-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.b">B-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.c">C-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.d">D-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.e">E-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.f">F-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.g">G-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.h">H-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.i">I-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.j">JTASTE.</msg>
  <msg name="WinJS.Utilities.Key.k">KTASTE.</msg>
  <msg name="WinJS.Utilities.Key.l">L-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.m">M-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.n">N-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.o">O-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.p">P-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.q">Q-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.r">R-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.s">S-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.t">T-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.u">U-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.v">V-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.w">W-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.x">X-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.y">Y-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.z">Z-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">LINKE WINDOWS-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">RECHTE WINDOWS-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.menu">MENÜTASTE.</msg>
  <msg name="WinJS.Utilities.Key.numPad0">0-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad1">1-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad2">2-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad3">3-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad4">4-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad5">5-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad6">6-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad7">7-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad8">8-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.numPad9">9-TASTE AUF DEM ZIFFERNBLOCK.</msg>
  <msg name="WinJS.Utilities.Key.multiply">MULTIPLIKATIONSTASTE.</msg>
  <msg name="WinJS.Utilities.Key.add">ADDITIONSTASTE.</msg>
  <msg name="WinJS.Utilities.Key.subtract">SUBTRAKTIONSTASTE.</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">DEZIMALTRENNZEICHENTASTE</msg>
  <msg name="WinJS.Utilities.Key.divide">DIVISIONSTASTE.</msg>
  <msg name="WinJS.Utilities.Key.F1">F1-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F2">F2-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F3">F3-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F4">F4-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F5">F5-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F6">F6-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F7">F7-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F8">F8-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F9">F9-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F10">F10-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F11">F11-TASTE</msg>
  <msg name="WinJS.Utilities.Key.F12">F12-TASTE</msg>
  <msg name="WinJS.Utilities.Key.numLock">NUM-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">ROLLEN-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.browserBack">BROWSER-ZURÜCK-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.browserForward">BROWSER-VORWÄRTS-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.semicolon">SEMIKOLONTASTE.</msg>
  <msg name="WinJS.Utilities.Key.equal">IST-GLEICH-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.comma">KOMMATASTE.</msg>
  <msg name="WinJS.Utilities.Key.dash">BINDESTRICHTASTE</msg>
  <msg name="WinJS.Utilities.Key.period">PUNKTTASTE.</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">SCHRÄGSTRICHTASTE.</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">GRAVISTASTE.</msg>
  <msg name="WinJS.Utilities.Key.openBracket">ÖFFNENDE KLAMMER-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.backSlash">UMGEKEHRTER SCHRÄGSTRICHTASTE.</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">SCHLIESSENDE KLAMMER-TASTE.</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">EINFACHES ANFÜHRUNGSZEICHENTASTE</msg>
  <msg name="WinJS.Utilities.data">Ruft den Datenwert ab, der dem angegebenen Element zugeordnet ist.</msg>
  <msg name="WinJS.Utilities.data_p:element">Das Element.</msg>
  <msg name="WinJS.Utilities.data_returnValue">Der dem Element zugeordnete Wert.</msg>
  <msg name="WinJS.Utilities.hasClass">Bestimmt, ob das angegebene Element über die angegebene Klasse verfügt.</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">"True", wenn das angegebene Element die angegebene Klasse enthält; andernfalls "false".</msg>
  <msg name="WinJS.Utilities.addClass">Fügt dem angegebenen Steuerelement die angegebenen Klassen hinzu. Mehrere Klassen können mit durch Leerzeichen getrennte Namen hinzugefügt werden.</msg>
  <msg name="WinJS.Utilities.addClass_p:e">Das Element, dem die Klasse hinzugefügt werden soll.</msg>
  <msg name="WinJS.Utilities.addClass_p:name">Der Name der hinzuzufügenden Klasse, mehrere Klassen können mit durch Leerzeichen getrennte Namen hinzugefügt werden</msg>
  <msg name="WinJS.Utilities.removeClass">Entfernt die angegebene Klasse aus dem angegebenen Element.</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">Das Element, aus dem die Klasse entfernt werden soll.</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">Der Name der zu entfernenden Klasse.</msg>
  <msg name="WinJS.Utilities.toggleClass">Schaltet die angegebene Klasse auf das angegebene Element um (bzw. fügt sie hinzu oder entfernt sie). Wenn die Klasse vorhanden ist, wird sie entfernt; wenn sie nicht vorhanden ist, wird sie hinzugefügt.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">Das Element, auf das die Klasse umgeschaltet werden soll.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">Der Name der umzuschaltenden Klasse.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">Ruft die linke Koordinate des angegebenen Elements relativ zum angegebenen übergeordneten Element ab.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">Die relative linke Koordinate.</msg>
  <msg name="WinJS.Utilities.getRelativeTop">Ruft die obere Koordinate des Elements relativ zum angegebenen übergeordneten Element ab.</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">Die relative obere Koordinate.</msg>
  <msg name="WinJS.Utilities.empty">Entfernt alle untergeordneten Knoten aus dem angegebenen Element.</msg>
  <msg name="WinJS.Utilities.getContentWidth">Ruft die Breite des Inhalts des angegebenen Elements ab. Die Breite des Inhalts enthält keine Rahmen oder Abstände.</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">Die Breite des Inhalts des Elements.</msg>
  <msg name="WinJS.Utilities.getTotalWidth">Ruft die Breite des Elements ab, einschließlich der Ränder.</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">Die Breite des Elements, einschließlich der Ränder.</msg>
  <msg name="WinJS.Utilities.getContentHeight">Ruft die Höhe des Inhalts des angegebenen Elements ab. Die Höhe des Inhalts enthält keine Rahmen oder Abstände.</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">Die Höhe des Inhalts des Elements.</msg>
  <msg name="WinJS.Utilities.getTotalHeight">Ruft die Höhe des Elements, einschließlich der Ränder, ab.</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">Die Höhe des Elements, einschließlich der Ränder.</msg>
  <msg name="WinJS.Utilities.getPosition">Ruft die Position des angegebenen Elements ab.</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">Ein Objekt, das die Eigenschaften für links, oben, Breite und Höhe des Elements enthält.</msg>
  <msg name="WinJS.Utilities.convertToPixels">Konvertiert eine CSS-Positionierungszeichenfolge für das angegebene Element in Pixel.</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">Die CSS-Positionierungszeichenfolge.</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">Die Anzahl der Pixel.</msg>
  <msg name="WinJS.Utilities.eventWithinElement">Bestimmt, ob das angegebene Ereignis innerhalb des angegebenen Elements aufgetreten ist.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">Das Ereignis.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">"True", wenn das Ereignis innerhalb des Elements aufgetreten ist; andernfalls "false".</msg>
  <msg name="WinJS.UI.Pages.dispose">Löscht diese Seite.</msg>
  <msg name="WinJS.UI.Pages._mixin.load">Erstellt eine Kopie der DOM-Elemente aus den angegebenen URIs. Damit diese Überschreibung verwendet werden kann, muss die Seite, die die Lastüberschreibung enthält, definiert werden, indem WinJS.UI.Pages.define() vor WinJS.UI.Pages.render() aufgerufen wird.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">Der URI, aus dem die DOM-Elemente kopiert werden sollen.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">Eine Zusicherung, deren erfüllter Wert dem Satz von DOM-Elementen ohne übergeordnete Elemente entspricht, wenn die asynchrone Verarbeitung erforderlich ist. Falls nicht, wird kein Wert zurückgegeben.</msg>
  <msg name="WinJS.UI.Pages._mixin.init">Initialisiert das Steuerelement, bevor der Inhalt des Steuerelements festgelegt wird. Verwenden Sie die verarbeitete Methode für jede Initialisierung, die ausgeführt werden soll, nachdem der Inhalt des Steuerelements festgelegt wurde.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">Das DOM-Element, das den gesamten Inhalt für die Seite enthält.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">Die Optionen werden an den Konstruktor der Seite übergeben.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">Eine Zusicherung, die bei Abschluss der Initialisierung erfüllt wird, wenn die asynchrone Verarbeitung erforderlich ist. Falls nicht, wird kein Wert zurückgegeben.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">Initialisiert das Steuerelement, nachdem der Inhalt des Steuerelements festgelegt wurde.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">Die Optionen, die an den Konstruktor der Seite übergeben werden sollen.</msg>
  <msg name="WinJS.UI.Pages._mixin.render">Rendert das Steuerelement, in der Regel durch Hinzufügen der im loadResult-Parameter angegebenen Elemente zum angegebenen Element.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">Die Optionen werden an den Konstruktor der Seite weitergeleitet.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">Die mit der Lademethode zurückgegebenen Elemente.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">Eine Zusicherung, die bei Abschluss des Renderings erfüllt wird, wenn die asynchrone Verarbeitung erforderlich ist. Falls nicht, wird kein Wert zurückgegeben.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">Wurde nach Abschluss der gesamten Initialisierung und des Renderings aufgerufen. Derzeit ist das Element zur Verwendung bereit.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">Das DOM-Element, das den gesamten Inhalt für die Seite enthält.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">Die Optionen werden an den Konstruktor der Seite weitergeleitet</msg>
  <msg name="WinJS.UI.Pages._mixin.error">Wurde aufgerufen, wenn ein Fehler während der Verarbeitung der Seite auftritt.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">Der aufgetretene Fehler.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">Nichts, wenn der Fehler behoben wurde, oder eine Fehlerzusicherung, wenn der Fehler nicht behoben wurde.</msg>
  <msg name="WinJS.UI.Pages.define">Erstellt ein neues Seitensteuerelement aus dem angegebenen URI, der die angegebenen Member enthält. Mehrere Aufrufe für diese Methode für den gleichen URI sind zulässig, und alle Member werden zusammengeführt.</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">Der URI für den Inhalt, der die Seite definiert.</msg>
  <msg name="WinJS.UI.Pages.define_p:members">Zusätzliche Member, die das Steuerelement enthält.</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">Eine Konstruktorfunktion, die die Seite erstellt.</msg>
  <msg name="WinJS.UI.Pages.get">Ruft ein bereits definiertes Seitensteuerelement für den angegebenen URI ab oder erstellt ein neues.</msg>
  <msg name="WinJS.UI.Pages.render">Erstellt ein Seitensteuerelement aus den angegebenen URIs innerhalb des angegebenen Elements mit den spezifischen Optionen.</msg>
  <msg name="WinJS.UI.Pages.render_p:element">Das mit der Seite aufzufüllende Element.</msg>
  <msg name="WinJS.UI.Pages.render_p:options">Die Optionen zum Konfigurieren der Seite.</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">Eine Zusicherung, die erfüllt wird, wenn das angegebene Element dem endgültigen Dokument übergeordnet wird.</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">Ein Versprechen, das erfüllt ist, wenn die Seite das Rendern abgeschlossen hat.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">Kopiert den Inhalt des angegebenen URIs in das angegebene Element.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">Der URI, der das zu kopierende Fragment enthält.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">Das Element, an das das Fragment gebunden ist.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">Eine Zusicherung, die erfüllt wird, wenn das Fragment geladen wurde. Wenn kein Zielelement angegeben wird, entspricht das kopierte Fragment dem abgeschlossenen Wert.</msg>
  <msg name="WinJS.UI.Fragments.cache">Beginnt, das Fragment an der angegebenen Position zu laden. Die zurückgegebene Zusicherung wird abgeschlossen, wenn das Fragment zum Kopieren bereit ist.</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">Der URI, der das zu kopierende Fragment enthält.</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">Eine Zusicherung, die erfüllt wird, wenn das Fragment für das Kopieren vorbereitet wurde.</msg>
  <msg name="WinJS.UI.Fragments.clearCache">Entfernt alle zwischengespeicherten Informationen über das angegebene Fragment. Diese Methode entlädt keine Skripts oder Stile, auf die das Fragment verweist.</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">Der URI, der das zu löschende Fragment enthält. Wenn kein URI bereitgestellt wird, wird der gesamte Inhalt des Caches gelöscht.</msg>
  <msg name="WinJS.UI.isAnimationEnabled">Bestimmt, ob die WinJS-Animationsbibliothek Animationen ausführt.</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">"True", wenn WinJS-Animationen ausgeführt werden. "False", wenn WinJS-Animationen unterdrückt werden.</msg>
  <msg name="WinJS.UI.disableAnimations">Deaktiviert Animationen in der WinJS-Animationsbibliothek, indem die Animationsaktivierungszahl herabgesetzt wird.</msg>
  <msg name="WinJS.UI.enableAnimations">Aktiviert Animationen in der WinJS-Animationsbibliothek, indem die Animationsaktivierungszahl heraufgesetzt wird.</msg>
  <msg name="WinJS.UI.executeAnimation">Führen Sie eine CSS-Animation aus, die mit anderen Animationsbibliotheksanimationen vorhanden sein kann. Die Anwendungen sollten diese Funktion nicht direkt aufrufen; sie sollten vielmehr die Animationen auf hoher Ebene in der Animationsbibliothek verwenden.</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">Ein einzelnes Element oder eine Auflistung von Elementen, für das bzw. die eine CSS-Animation ausgeführt werden soll.</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">Einzelne Animationsbeschreibung oder Array von Animationsbeschreibungen.</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">Zusicherungsobjekt, das bei Abschluss der CSS-Animation abgeschlossen wird.</msg>
  <msg name="WinJS.UI.executeTransition">Führen Sie einen CSS-Übergang aus, der mit anderen Animationsbibliotheksanimationen vorhanden sein kann. Die Anwendungen sollten diese Funktion nicht direkt aufrufen; sie sollten vielmehr die Animationen auf hoher Ebene in der Animationsbibliothek verwenden.</msg>
  <msg name="WinJS.UI.executeTransition_p:element">Ein einzelnes Element oder eine Auflistung von Elementen, für das bzw. die ein CSS-Übergang ausgeführt werden soll.</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">Eine einzelne Übergangsbeschreibung oder ein Array von Übergangsbeschreibungen.</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">Zusicherungsobjekt, das bei Abschluss des CSS-Übergangs abgeschlossen wird.</msg>
  <msg name="WinJS.UI.eventHandler">Markiert eine Ereignishandlerfunktion als kompatibel mit der deklarativen Verarbeitung.</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">Der Handler, der als kompatibel mit der deklarativen Verarbeitung markiert werden soll.</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">Der Eingabehandler.</msg>
  <msg name="WinJS.UI.Orientation">Ausrichtungsoptionen für die Eigenschaft eines Steuerelements</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">Vertikal</msg>
  <msg name="WinJS.Application.event.setPromise">Wird verwendet, um das Anwendungsobjekt zu informieren, dass asynchrone Arbeit ausgeführt wird und dass dieser Ereignishandler erst als vollständig gilt, wenn die Zusicherung abgeschlossen ist.</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">Die Zusicherung, auf die gewartet werden soll.</msg>
  <msg name="WinJS.Application.queueEvent">Stellt ein Ereignis, das durch die WinJS.Application-Ereigniswarteschlange verarbeitet werden soll, in die Warteschlange.</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">Das Ereignisobjekt muss über eine Typeigenschaft verfügen, die bei der Weiterleitung über die WinJS.Applications-Ereigniswarteschlange als Ereignisname verwendet wird. Das gesamte Objekt wird den Ereignislistenern in der Detaileigenschaft des Ereignisses bereitgestellt.</msg>
  <msg name="WinJS.Application.stop">Hält die Verarbeitung des Anwendungsereignisses an und setzt WinJS.Application auf den Ausgangszustand zurück.</msg>
  <msg name="WinJS.Application.checkpoint">Stellt ein Prüfpunktereignis in die Warteschlange.</msg>
  <msg name="WinJS.Application.start">Beginnt, die Ereignisse in der WinJS.Applications-Ereigniswarteschlange zu verarbeiten.</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">Wird verwendet, um die ListView zu informieren, dass asynchrone Arbeit ausgeführt wird und dass dieser Ereignishandler erst als vollständig gilt, wenn die Zusicherung abgeschlossen ist.</msg>
  <msg name="WinJS.Navigation.canGoForward">Bestimmt, ob es möglich ist, vorwärts zu navigieren.</msg>
  <msg name="WinJS.Navigation.canGoBack">Bestimmt, ob es möglich ist, rückwärts zu navigieren.</msg>
  <msg name="WinJS.Navigation.location">Ruft den aktuellen Speicherort auf.</msg>
  <msg name="WinJS.Navigation.state">Ruft den Navigationszustand auf oder legt diesen fest.</msg>
  <msg name="WinJS.Navigation.history">Ruft den Navigationsverlauf auf oder legt diesen fest.</msg>
  <msg name="WinJS.Navigation.forward">Navigiert vorwärts.</msg>
  <msg name="WinJS.Navigation.forward_p:distance">Die Anzahl von Einträgen, die folgen.</msg>
  <msg name="WinJS.Navigation.forward_returnValue">Eine Zusicherung, die mit einem Wert abgeschlossen wird, der angibt, ob die Navigation erfolgreich war.</msg>
  <msg name="WinJS.Navigation.back">Navigiert rückwärts.</msg>
  <msg name="WinJS.Navigation.back_p:distance">Die Anzahl von Einträgen, die im Verlauf zurückverfolgt werden sollen.</msg>
  <msg name="WinJS.Navigation.navigate">Navigiert zu einem Speicherort.</msg>
  <msg name="WinJS.Navigation.navigate_p:location">Der Speicherort, zu dem navigiert werden soll. Im Allgemeinen ist der Speicherort eine Zeichenfolge, kann jedoch ein anderes beliebiges Element sein.</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">Der Navigationszustand, auf den über WinJS.Navigation.state zugegriffen werden kann.</msg>
  <msg name="WinJS.Application.local">Ermöglicht den Zugriff, um Dateien im lokalen Anwendungsspeicher zu erstellen, der über die Ausführungen einer Anwendung hinweg beibehalten wird und für den kein Roaming erfolgt.</msg>
  <msg name="WinJS.Application.temp">Ermöglicht den Zugriff, um Dateien im temporären Anwendungsspeicher zu erstellen, der möglicherweise vom System zwischen Anwendungsausführungen freigegeben wird.</msg>
  <msg name="WinJS.Application.roaming">Ermöglicht den Zugriff, um Dateien im Anwendungsroamingspeicher zu erstellen, der über die Ausführungen einer Anwendung hinweg beibehalten wird und für den ein Roaming mit dem Benutzer auf mehreren Computern erfolgt.</msg>
  <msg name="WinJS.Binding.observableMixin.notify">Benachrichtigt Listener, dass ein Eigenschaftswert aktualisiert wurde.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">Der Name der Eigenschaft, die aktualisiert wird.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">Der neue Wert für die Eigenschaft.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">Der alte Wert für die Eigenschaft.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">Eine Zusicherung, die nach Abschluss der Benachrichtigungen abgeschlossen wird.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">Entfernt eine oder mehrere Listener aus der Benachrichtigungsliste für eine bestimmte Eigenschaft.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">Der Name der Eigenschaft, deren Bindung aufgehoben werden soll. Wenn dieser Parameter ausgelassen wird, werden sämtliche Listener für alle Ereignisse entfernt.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">Die Funktion, die aus der Listenerliste für die angegebene Eigenschaft entfernt werden soll. Wenn dieser Parameter ausgelassen wird, werden alle Listener für die bestimmte Eigenschaft entfernt.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">Ruft einen Eigenschaftswert nach Name ab.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">Der Name der abzurufenden Eigenschaft.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">Der Wert der Eigenschaft als wahrnehmbares Objekt.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">Aktualisiert einen Eigenschaftswert und benachrichtigt alle Listener.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">Der Name der zu aktualisierenden Eigenschaft.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">Der neue Wert der Eigenschaft.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">Fügt diesem Objekt eine Eigenschaft mit Änderungsbenachrichtigung, einschließlich ECMAScript5-Eigenschaftendefinition, hinzu.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">Der Name der hinzuzufügenden Eigenschaft.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">Der Wert der Eigenschaft.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">Eine Zusicherung, die abgeschlossen wird, wenn die Benachrichtigungen für diese Eigenschaftenänderung verarbeitet wurden. Wenn mehrere Benachrichtigungen zusammengefasst werden, kann die Zusicherung abgebrochen oder der Wert der Zusicherung aktualisiert werden. Der erfüllte Wert der Zusicherung ist der neue Wert der Eigenschaft, für die die Benachrichtigungen abgeschlossen wurden.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">Entfernt einen Eigenschaftswert.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">Der Name der zu entfernenden Eigenschaft.</msg>
  <msg name="WinJS.Binding.bind">Bindungen an eine oder mehrere Eigenschaften für das wahrnehmbare Objekt oder für die untergeordneten Werte dieses Objekts.</msg>
  <msg name="WinJS.Binding.bind_p:observable">Das Objekt, an das die Bindung erfolgen soll.</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">Ein Objektliteral, das die Bindungsdeklarationen enthält. Bindungsdeklarationen haben das Format: {propertyName: (function | bindingDeclaration),... } Die Bindung an einen geschachtelten Member eines Objekts wird z. B. folgendermaßen deklariert: bind(someObject, { address: { street: function(v) { ... } } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">Ein Objekt, das mindestens ein Feld "Abbrechen" enthält, das eine Funktion ist, mit der alle Bindungen entfernt werden, die dieser Bindungsanforderung zugeordnet sind.</msg>
  <msg name="WinJS.Binding.expandProperties">Umschließt das angegebene Objekt, damit alle zugehörigen Eigenschaften für das Binden instrumentiert werden. Dies soll zusammen mit dem Bindungs-mixin verwendet werden.</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">Die Spezifikation für das bindbare Objekt.</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">Ein Objekt mit einem Satz von Eigenschaften, die alle für die Bindung verknüpft sind.</msg>
  <msg name="WinJS.Binding.define">Erstellt eine neue Konstruktorfunktion, die die Wahrnehmbarkeit mit dem angegebenen Satz von Eigenschaften unterstützt.</msg>
  <msg name="WinJS.Binding.define_p:data">Das Objekt zur Verwendung als Muster zum Definieren des Satzes von Eigenschaften, zum Beispiel: var MyPointClass = define({x:0,y:0});</msg>
  <msg name="WinJS.Binding.define_returnValue">Eine Konstruktorfunktion mit 1 optionalen Argument, das dem Ausgangszustand der Eigenschaften entspricht.</msg>
  <msg name="WinJS.Binding.define.return">Erstellt ein neues wahrnehmbares Element.</msg>
  <msg name="WinJS.Binding.define.return_p:init">Die Anfangswerte für die Eigenschaften.</msg>
  <msg name="WinJS.Binding.as">Gibt ein wahrnehmbares Objekt zurück. Dies ist ein wahrnehmbarer Proxy für das angegebene Objekt, ein vorhandener Proxy oder das angegebene Objekt selbst, wenn es die Wahrnehmbarkeit direkt unterstützt.</msg>
  <msg name="WinJS.Binding.as_p:data">Das Objekt, für das die Wahrnehmbarkeit bereitgestellt werden soll.</msg>
  <msg name="WinJS.Binding.as_returnValue">Das beobachtbare Objekt</msg>
  <msg name="WinJS.Binding.unwrap">Gibt das ursprüngliche (nicht wahrnehmbare) Objekt zurück, wenn das angegebene Objekt ein wahrnehmbarer Proxy ist.</msg>
  <msg name="WinJS.Binding.unwrap_p:data">Das Objekt, für das der ursprüngliche Wert abgerufen werden soll.</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">Wenn das angegebene Objekt ein wahrnehmbarer Proxy ist, wird das ursprüngliche Objekt zurückgegeben; andernfalls wird das gleiche Objekt zurückgegeben.</msg>
  <msg name="WinJS.Binding.Template.render.value">Rendert eine Vorlage auf Grundlage eines URI.</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">Der URI, aus dem die Vorlage geladen werden soll.</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">Eine Zusicherung, die ausgeführt wird, nachdem die Bindung abgeschlossen ist. Der Wert ist entweder das Objekt im Containerparameter oder das erstellte DIV-Element.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">Rendert eine Vorlage, die an die angegebenen Daten gebunden ist und den in der QueryCollection enthaltenen Daten übergeordnet ist. Wenn die QueryCollection mehrere Elemente enthält, wird die Vorlage mehrfach gerendert, und zwar einmal an jedem Element in der QueryCollection bei jedem übergebenen Datenelement.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">Das DOM-Element, an das das Vorlagensteuerelement angefügt wird.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">Die zu rendernden Daten. Wenn die Daten ein Array sind (oder ein anderes Objekt, das über eine forEach-Methode verfügt), dann wird die Vorlage mehrfach gerendert, und zwar einmal für jedes Element in der Auflistung.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">Wenn diese Funktion angegeben ist, wird sie jedes Mal aufgerufen, wenn die Vorlage gerendert wird, und wird einer Zusicherung übergeben, die erfüllt wird, wenn das Vorlagenrendering abgeschlossen ist.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">Die QueryCollection.</msg>
  <msg name="WinJS.Binding.declarativeBind">Bindet Werte aus dem angegebenen Datenkontext an die Elemente, die Nachfolger des angegebenen Stammelements sind und die deklarative Bindungsattribute (data-win-bind) besitzen.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">Das Element, an dem das Durchlaufen starten soll, um Elemente für die Anbindung zu suchen. Wenn dieser Parameter ausgelassen wird, wird das gesamte Dokument durchsucht.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">Die zwischengespeicherten Bindungsdaten.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">Der Bindungsinitialisierer, der in dem Fall verwendet werden soll, dass keiner in einem Bindungsausdruck angegeben wird. Wenn es nicht bereitgestellt wird, ist das Verhalten mit WinJS.Binding.defaultBind identisch.</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">Eine Zusicherung, die abgeschlossen wird, wenn jedes Element, das Bindungsdeklarationen enthält, verarbeitet wurde und das Update gestartet wurde.</msg>
  <msg name="WinJS.Binding.converter">Erstellt einen Standardbindungsinitialisierer für die Bindung zwischen einer Quelleigenschaft und einer Zieleigenschaft mit einer bereitgestellten Konverterfunktion, die für den Wert der Quelleigenschaft ausgeführt wird.</msg>
  <msg name="WinJS.Binding.converter_p:convert">Die Konvertierung, die für das Ergebnis der Quelleigenschaft ausgeführt wird, um einen Wert zu erzeugen, der auf die Zieleigenschaft festgelegt wird.</msg>
  <msg name="WinJS.Binding.converter_returnValue">Der Bindungsinitialisierer.</msg>
  <msg name="WinJS.Binding.setAttribute">Erstellt eine unidirektionale Bindung zwischen dem Quellobjekt und einem Attribut auf dem Zielelement.</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">Das Quellobjekt.</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">Der Pfad vom Quellobjekt zur Quelleigenschaft.</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">Das Zielobjekt (muss ein DOM-Element sein).</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">Der Pfad auf das Zielobjekt in die Zieleigenschaft (muss ein einzelner Name sein).</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">Der bekannte Anfangswert des Ziels, wenn der Quellwert mit diesem Anfangswert identisch ist (mithilfe von ===), wird das Ziel beim ersten Mal nicht festgelegt.</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">Ein Objekt mit einer Abbruchmethode, die verwendet wird, um Bindungen zusammenzufassen.</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">Legt ein Attribut auf das Zielelement auf den Wert der Source-Eigenschaft fest.</msg>
  <msg name="WinJS.Binding.addClassOneTime">Fügt dem Wert der Source-Eigenschaft eine Klasse auf dem Zielelement hinzu.</msg>
  <msg name="WinJS.Binding.defaultBind">Erstellt eine unidirektionale Bindung zwischen dem Quellobjekt und dem Zielobjekt.</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">Das Zielobjekt.</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">Der Pfad vom Zielobjekt zur Zieleigenschaft.</msg>
  <msg name="WinJS.Binding.oneTime">Legt die Zieleigenschaft auf den Wert der Quelleigenschaft fest.</msg>
  <msg name="WinJS.Binding.initializer">Markiert eine benutzerdefinierte Initialisiererfunktion als kompatibel mit der deklarativen Datenbindung.</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">Der benutzerdefinierte Initialisierer, der als kompatibel mit der deklarativen Datenbindung markiert werden soll.</msg>
  <msg name="WinJS.Binding.initializer_returnValue">Der customInitializer für die Eingabe.</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">Der Wert, der durch den angegebenen Schlüssel identifiziert wird, wurde durch einen anderen Wert ersetzt.</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">Ein neuer Wert wurde in die Liste eingefügt.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">Der Wert, der durch den angegebenen Schlüssel identifiziert wird, wurde von einem Index in der Liste an einen anderen Index verschoben.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">Der Wert, der durch den angegebenen Schlüssel identifiziert wird, wurde geändert.</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">Der Wert, der durch den angegebenen Schlüssel identifiziert wird, wurde aus der Liste entfernt.</msg>
  <msg name="WinJS.Binding.ListBase.onreload">Die Liste wurde aktualisiert. Alle Verweise auf Elemente in der Liste sind möglicherweise falsch.</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">Erzwingt, dass die Liste eine Benachrichtigung zum erneuten Laden an alle Listener sendet.</msg>
  <msg name="WinJS.Binding.ListBase.getAt">Ruft den Wert beim angegebenen Index ab.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">Der Index des abzurufenden Werts.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">Der Eigenschaftswert am angegebenen Index.</msg>
  <msg name="WinJS.Binding.ListBase.concat">Gibt eine neue Liste zurück, die aus einer Kombination von zwei Arrays besteht.</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">Ein Array, das die Verkettung der Liste und andere bereitgestellte Elemente enthält.</msg>
  <msg name="WinJS.Binding.ListBase.join">Gibt eine Zeichenfolge zurück, die aus allen Elementen einer Liste besteht, die durch die angegebene aus Trennzeichen bestehende Zeichenfolge getrennt wird.</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">Eine Zeichenfolge, mit der die Elemente einer Liste getrennt werden. Wenn dieser Parameter ausgelassen wird, werden die Listenelemente durch ein Komma getrennt.</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">Die Elemente einer Liste werden durch die angegebene aus Trennzeichen bestehende Zeichenfolge getrennt.</msg>
  <msg name="WinJS.Binding.ListBase.slice">Extrahiert einen Abschnitt einer Liste und gibt eine neue Liste zurück.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">Der Index, der den Anfang des Abschnitts angibt.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">Der Index, der das Ende des Abschnitts angibt.</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">Gibt einen Abschnitt eines Arrays zurück.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">Ruft den Index für das erste Vorkommen des angegebenen Werts in einer Liste ab.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">Der Wert, der in der Liste gesucht werden soll.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">Der Index, bei dem mit der Suche begonnen werden soll. Wenn fromIndex weggelassen wird, beginnt die Suche am Index 0.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">Der Index des ersten Vorkommens eines Werts in einer Liste oder -1, wenn kein Wert gefunden wird.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">Ruft den Index für das letzte Vorkommen des angegebenen Werts in einer Liste ab.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">Der Index, bei dem mit der Suche begonnen werden soll. Wenn fromIndex weggelassen wird, beginnt die Suche am letzten Index in der Liste.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">Der Index des letzten Vorkommens eines Werts in einer Liste oder -1, wenn kein Wert gefunden wird.</msg>
  <msg name="WinJS.Binding.ListBase.every">Überprüft, ob die angegebene Rückruffunktion für alle Elemente in einer Liste "true" zurückgibt.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">Eine Funktion, die bis zu drei Argumente akzeptiert. Diese Funktion wird für jedes Element in der Liste aufgerufen, bis sie "false" zurückgibt oder das Ende der Liste erreicht wird.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">Ein Objekt, auf das dieses Schlüsselwort in der Rückruffunktion verweisen kann. Wenn thisArg weggelassen wird, wird "nicht definiert" verwendet.</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">"True", wenn der Rückruf für alle Elemente in der Liste "true" zurückgibt.</msg>
  <msg name="WinJS.Binding.ListBase.filter">Gibt die Elemente einer Liste zurück, die die in einer Rückruffunktion angegebene Bedingung erfüllen.</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">Eine Funktion, die bis zu drei Argumente akzeptiert. Die Funktion wird für jedes Element in der Liste aufgerufen.</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">Ein Array, das die Elemente enthält, die die in der Rückruffunktion angegebene Bedingung erfüllen.</msg>
  <msg name="WinJS.Binding.ListBase.forEach">Ruft die angegebene Rückruffunktion für jedes Element in einer Liste auf.</msg>
  <msg name="WinJS.Binding.ListBase.map">Ruft die angegebene Rückruffunktion für jedes Element einer Liste auf und gibt ein Array zurück, das die Ergebnisse enthält.</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">Ein Array, das das Ergebnis des Aufrufs der Rückruffunktion für jedes Element in der Liste enthält.</msg>
  <msg name="WinJS.Binding.ListBase.some">Überprüft, ob die angegebene Rückruffunktion für ein Element in einer Liste "true" zurückgibt.</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">Eine Funktion, die bis zu drei Argumente akzeptiert. Die Funktion wird für jedes Element in der Liste aufgerufen, bis sie "true" zurückgibt oder bis das Ende der Liste erreicht ist.</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">"True", wenn der Rückruf für ein Element in der Liste "true" zurückgibt.</msg>
  <msg name="WinJS.Binding.ListBase.reduce">Akkumuliert ein einzelnes Ergebnis durch Aufrufen der angegebenen Rückruffunktion für alle Elemente in einer Liste. Der Rückgabewert der Rückruffunktion ist das akkumulierte Ergebnis und wird als Argument im folgenden Aufruf der Rückruffunktion bereitgestellt.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">Eine Funktion, die bis zu vier Argumente akzeptiert. Die Funktion wird für jedes Element in der Liste aufgerufen.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">Wenn "initialValue" angegeben wird, wird dies als Wert verwendet, mit dem die Ansammlung beginnt. Der erste Aufruf der Funktion stellt diesen Wert als Argument anstelle eines Listenwerts bereit.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">Der Rückgabewert vom letzten Aufruf der Rückruffunktion.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">Akkumuliert ein einzelnes Ergebnis durch Aufrufen der angegebenen Rückruffunktion für alle Elemente in einer Liste in absteigender Reihenfolge. Der Rückgabewert der Rückruffunktion ist das akkumulierte Ergebnis und wird als Argument im folgenden Aufruf der Rückruffunktion bereitgestellt.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">Wenn "initialValue" angegeben wird, wird dies als Wert verwendet, mit dem die Ansammlung beginnt. Der erste Aufruf der Rückruffunktion stellt diesen Wert als Argument anstelle eines Listenwerts bereit.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">Der Rückgabewert vom letzten Aufruf der Rückruffunktion.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">Erstellt eine live gefilterte Projektion zu dieser Liste. Wenn die Liste geändert wird, reagiert die gefilterte Projektion auf diese Änderungen und wird ggf. auch geändert.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">Eine Funktion, die ein einzelnes Argument akzeptiert. Die createFiltered-Funktion ruft den Rückruf mit jedem Element in der Liste auf. Wenn die Funktion "true" zurückgibt, wird dieses Element in die gefilterte Liste aufgenommen.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">Gefilterte Projektion der Liste.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">Erstellt eine live gruppierte Projektion zu dieser Liste. Wenn die Liste geändert wird, reagiert die gruppierte Projektion auf diese Änderungen und wird ggf. auch geändert. Die gruppierte Projektion sortiert alle Elemente der Liste in eine für die Gruppe zusammenhängende Reihenfolge. Die gruppierte Projektion enthält auch eine .groups-Eigenschaft, die ein WinJS.Binding.List-Objekt ist, das die in der Liste gefundenen Gruppen darstellt.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">Eine Funktion, die ein einzelnes Argument akzeptiert. Die Funktion wird mit jedem Element in der Liste aufgerufen. Die Funktion sollte eine Zeichenfolge zurückgeben, die die Gruppe darstellt, die das Element enthält.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">Eine Funktion, die ein einzelnes Argument akzeptiert. Die Funktion wird für jede Gruppe für ein Element in der Liste aufgerufen. Sie sollte den Wert zurückgeben, der als die Daten des .groups-Listenelements für diese Gruppe festgelegt werden soll.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">Eine Funktion, die zwei Argumente akzeptiert. Die Funktion wird mit dem Schlüssel der Gruppen aufgerufen, die in der Liste gefunden werden. Sie muss einen der folgenden numerischen Werte zurückgeben: negativ, wenn das erste Argument kleiner als das zweite ist, NULL, wenn die beiden Argumente äquivalent sind, positiv, wenn das erste Argument größer als das zweite ist. Wenn die Angabe ausgelassen wird, werden die Gruppen aufsteigend in ASCII-Zeichenreihenfolge sortiert.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">Eine gruppierte Projektion der Liste.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">Erstellt eine live sortierte Projektion zu dieser Liste. Wenn die Liste geändert wird, reagiert die sortierte Projektion auf diese Änderungen und wird ggf. auch geändert.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">Eine Funktion, die zwei Argumente akzeptiert. Die Funktion wird mit Elementen in der Liste aufgerufen. Sie muss einen der folgenden numerischen Werte zurückgeben: negativ, wenn das erste Argument kleiner als das zweite ist, NULL, wenn die beiden Argumente äquivalent sind, positiv, wenn das erste Argument größer als das zweite ist.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">Eine sortierte Projektion der Liste.</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">Trennt diese WinJS.Binding.List-Projektion von seinem zugrunde liegenden WinJS.Binding.List-Objekt. Dies ist nur wichtig, wenn sie eine unterschiedliche Lebensdauer haben.</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">Ruft ein Schlüssel/Datenpaar für den angegebenen Schlüssel ab.</msg>
  <msg name="WinJS.Binding.ListProjection.move">Verschiebt den Wert am Index, um newIndex zu positionieren.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">Gibt einen ganzzahligen Wert zurück, der um eins höher ist als das höchste der in einer Liste definierten Elemente.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">Gibt ein Schlüssel/Datenpaar für den angegebenen Index zurück.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">Der Index des abzurufenden Werts.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">Gibt den Index des ersten Vorkommens eines Schlüssels in einer Liste zurück.</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">Ruft die Länge der Liste ab oder legt diese fest. Gibt einen ganzzahligen Wert zurück, der um eins höher ist als das höchste der in einer Liste definierten Elemente.</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">Gibt den Index des ersten Vorkommens eines Schlüssels zurück.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">Ruft ein WinJS.Binding.List-Objekt ab, das eine Projektion der Gruppen ist, die in dieser Liste identifiziert wurden.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">Ruft ein Schlüssel/Datenpaar für den angegebenen Elementschlüssel ab.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">Ruft die Länge der Liste ab. Gibt einen ganzzahligen Wert zurück, der um eins höher ist als das höchste der in einer Liste definierten Elemente.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">Ruft ein Schlüssel/Datenpaar für den angegebenen Index ab.</msg>
  <msg name="WinJS.Resources.processAll">Verarbeitet das Ressourcentag und ersetzt die Zeichenfolgen durch lokalisierte Zeichenfolgen.</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">Das DOM-Element, bei dem die Verarbeitung starten soll. Mit processAll werden das Element und seine untergeordneten Elemente verarbeitet. Wenn Sie kein Stammelement angeben, verarbeitet processAll das gesamte Dokument.</msg>
</messagebundle>