<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">嘗試取消完成承諾的值。如果這項承諾中尚未實作並支援取消，則承諾所輸入的錯誤狀態值為錯誤(「取消」)。</msg>
  <msg name="WinJS.PromiseStateMachine.done">可讓您指定承諾的值完成要執行的工作，當承諾無法滿足值時且過程中處理進度通知，錯誤處理常式會執行。在處理常式中完成執行之後，函式擲回從 Then() 傳回的任何錯誤做為在錯誤狀態的一項承諾。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">當承諾已成功填入值時呼叫的函式。已完成的值會以單一引數通過。如果此值為 null，就會傳回完成的值。從函式傳回的值會成為 then() 所傳回承諾的已完成的值。如果執行函式擲回例外狀況時，then() 傳回的承諾將移動至錯誤狀態。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">當承諾已失敗填入值時呼叫的函式。已完成的錯誤會以單一引數通過。如果是空的，轉送這個錯誤。從函式傳回的值為 then() 所傳回承諾的已完成的值。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">當承諾報告進度時呼叫的函式。進度的資料會以單一引數通過。承諾不需要支援進度。</msg>
  <msg name="WinJS.PromiseStateMachine.then">可讓您指定承諾的值完成要執行的工作，當承諾無法滿足值時且過程中處理進度通知，錯誤處理常式會執行。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">當承諾已成功填入值時呼叫的函式。值會以單一引數通過。如果此值為 null，就會傳回值。從函式傳回的值會成為 then() 所傳回承諾的已完成的值。當這個函式執行時擲回例外狀況，then() 傳回的承諾將移動至錯誤狀態。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">當承諾已失敗填入值時呼叫的函式。已完成的錯誤會以單一引數通過。如果是空的，轉送這個錯誤。從函式傳回的值會成為 then() 所傳回承諾的已完成的值。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">當承諾報告進度時呼叫的函式。進度的資料會以單一引數通過。承諾不需要支援進度。</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">承諾的值是執行完成或錯誤函式的結果。</msg>
  <msg name="WinJS.Promise">承諾提供一個機制在未計算的值來排程工作。這是方便的抽象以非同步應用程式開發介面管理互動。</msg>
  <msg name="WinJS.Promise_p:init">在這項承諾的架構時呼叫的函式。給了這個函式三個引數(完成，錯誤，進度)。在函式內部您應該加入此值支援通知的事件接聽程式。</msg>
  <msg name="WinJS.Promise_p:oncancel">當承諾的消費者想要取消其已復原的工作時呼叫的函式。承諾不需要支援取消。</msg>
  <msg name="WinJS.Promise.addEventListener">將事件接聽項加入至控制項。</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">事件的型別 (名稱)。</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">事件被引發時叫用該接聽項。</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">指定是否要啟始擷取。</msg>
  <msg name="WinJS.Promise.any">傳回已實作的一項承諾，當其中一個輸入承諾要實作時。</msg>
  <msg name="WinJS.Promise.any_p:values">包含承諾物件或屬性值包含承諾物件之物件的陣列。</msg>
  <msg name="WinJS.Promise.any_returnValue">承諾在完成會產生輸入的值 (完成或錯誤)。</msg>
  <msg name="WinJS.Promise.as">傳回承諾 。如果物件已是承諾則會傳回；否則這個物件都包覆在承諾中。</msg>
  <msg name="WinJS.Promise.as_p:value">值將被視為承諾。</msg>
  <msg name="WinJS.Promise.as_returnValue">承諾。</msg>
  <msg name="WinJS.Promise.cancel">已取消的承諾值，可以從承諾完成處理常式傳回表示承諾鏈結的取消。</msg>
  <msg name="WinJS.Promise.dispatchEvent">引發指定的型別和屬性的事件。</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">附加一組額外的屬性至事件物件。</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">指定事件是否呼叫了preventDefault。</msg>
  <msg name="WinJS.Promise.is">判斷值是否實現承諾合約。</msg>
  <msg name="WinJS.Promise.is_p:value">可能是承諾的值。</msg>
  <msg name="WinJS.Promise.is_returnValue">如果指定的值是承諾，則為true，否則為false。</msg>
  <msg name="WinJS.Promise.join">建立實作的承諾，當所有值已完成時。</msg>
  <msg name="WinJS.Promise.join_p:values">物件的欄位包含值，有些可能是承諾。</msg>
  <msg name="WinJS.Promise.join_returnValue">承諾的值為物件並與值參數的物件具有相同的欄位名稱，每個欄位值是承諾的已完成的值。</msg>
  <msg name="WinJS.Promise.removeEventListener">從控制項移除事件接聽項。</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">要移除的接聽程式。</msg>
  <msg name="WinJS.Promise.then">承諾執行個體方法 then() 的靜態版本。</msg>
  <msg name="WinJS.Promise.then_p:value">值將被視為承諾。</msg>
  <msg name="WinJS.Promise.then_p:complete">當承諾已完成值時呼叫的函式。如果是空的，則承諾直接傳回值。值會以單一引數通過。</msg>
  <msg name="WinJS.Promise.then_p:error">當承諾已失敗填入值時呼叫的函式。已完成的錯誤會以單一引數通過。</msg>
  <msg name="WinJS.Promise.then_returnValue">承諾的值是執行提供的完成函式的結果。</msg>
  <msg name="WinJS.Promise.thenEach">執行所有輸入承諾的作業並傳回具有輸入的形狀並包含每個輸入執行作業結果的承諾。</msg>
  <msg name="WinJS.Promise.thenEach_p:values">一些或全部都是承諾的一組值，可以是陣列或物件。</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">當承諾已完成值時呼叫的函式。如果值是空的，則承諾傳回值。值會以單一引數通過。</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">承諾為在值參數上呼叫 Promise.join 的結果。</msg>
  <msg name="WinJS.Promise.timeout">建立在逾時後實作的承諾。</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">逾時等待的時間，以毫秒為單位。如果此值為零或未呼叫指定的 setImmediate，否則呼叫 setTimeout。</msg>
  <msg name="WinJS.Promise.timeout_p:promise">承諾會取消，如果則無法在發生逾時之前完成。</msg>
  <msg name="WinJS.Promise.timeout_returnValue">在指定的逾時後非同步完成的承諾。</msg>
  <msg name="WinJS.Promise.wrap">封裝在承諾的非承諾值。您可以使用函式，如果您需要傳遞值給需要一個承諾的函式。</msg>
  <msg name="WinJS.Promise.wrap_p:value">封裝在承諾的某些非承諾值。</msg>
  <msg name="WinJS.Promise.wrap_returnValue">具有指定值的承諾已成功實作</msg>
  <msg name="WinJS.Promise.wrapError">封裝在承諾的非承諾錯誤值。您可以使用函式，如果您需要傳遞錯誤給需要一個承諾的函式。</msg>
  <msg name="WinJS.Promise.wrapError_p:error">封裝在承諾的非承諾錯誤值。</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">具有指定值的承諾位於錯誤狀態。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">取得值，這個值表示工作是否已經完成。如果工作已執行到完成則此值為 true，如果還沒執行或已取消則為 false。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">取得此工作的唯一識別碼。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">取得或設定為此工作指定診斷名稱的字串。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">取得工作的擁有者語彙基元。您可以使用這個擁有者語彙基元的 cancelAll 方法來取消相關工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">取得或設定排程器執行此工作的優先權。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">取消工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">暫停工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">如果工作已暫停，繼續此工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">工作 (Work) 目前正在執行的工作 (Job) 執行個體。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">布林值，這個值會在排程器要求工作項目以合作方式遞交 (Yield) 時變成 true。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">當工作項目在非同步工作遭到封鎖時呼叫。排程器會先等候指定的承諾完成，再重新排定工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">承諾值，完成時會提供要重新排定的工作項目函式。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">當工作項目以合作方式遞交 (Yield) 給排程器，且未來還有更多要完成的工作時呼叫。當表示工作項目即將遞交 (Yield) 時，使用這個方法為其排程其他工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">將要重新排定的工作函式。</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">取消與這個擁有者語彙基元相關聯的所有工作。</msg>
  <msg name="WinJS.ErrorFromName">以指定名稱以及訊息屬性來建立錯誤物件。</msg>
  <msg name="WinJS.ErrorFromName_p:name">此錯誤的名稱。這個名稱會視為使用以程式設計方式並不應該當地語系化。</msg>
  <msg name="WinJS.ErrorFromName_p:message">此錯誤的訊息。這個訊息會視為由人類所使用並應該當地語系化。</msg>
  <msg name="WinJS.ErrorFromName_returnValue">填入 .name 和 .message 屬性的錯誤的實例</msg>
  <msg name="WinJS.Utilities.QueryCollection">表示查詢選取器的結果，並提供對集合中的項目之動作的各種作業。</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">執行查詢的結果項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">在QueryCollection執行的每個項目的動作</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">在每一個項目執行的動作。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">繫結至 callbackFn 的引數</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">傳回 QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">從 QueryCollection 中取得項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">所要傳回項目的索引。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">來自集合的單一項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">設定集合中所有項目的屬性(Attribute)值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">要設定屬性的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">要設定的屬性值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">這個 QueryCollection 物件。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">從集合中的第一個項目取得屬性值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">屬性的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">屬性的值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">將特定類別加入至集合的所有項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">要加入之類別的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">判斷指定的類別是否已經存在於集合中的第一個項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">類別的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">如果項目有指定的類別，則為 true，否則為 false。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">從集合內的所有項目中移除指定的類別。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">要移除的類別名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">從集合內的所有項目中切換 (加入或移除) 指定的類別。如果類別存在，將其移除；如果不存在，將其加入。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">要切換的類別名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">為集合中所有項目的指定事件登錄接聽項。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">事件的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">發生事件時要呼叫的事件處理常式。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">如果要傳遞至addEventListener的擷取為true，則為true，否則為false。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">為集合中所有項目的指定事件解除登錄接聽項。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">事件處理常式函式。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">如果擷取為true，則為 true，否則為false。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">為集合中所有項目設定指定的樣式屬性。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">樣式屬性的名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">屬性的值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">為集合中所有項目清除指定的樣式屬性。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">要清除的樣式屬性名稱。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">在集合中任何項目上執行查詢選取器並彙總這個結果放入QueryCollection。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">查詢選取器字串。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">QueryCollection 物件包含了在集合中所有項目上執行查詢的彙總結果。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">將一組項目加入這個 QueryCollection。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">要加入至 QueryCollection 中的項目。這可能是一個類似陣列物件、文件片段或單一項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">建立附加在 QueryCollection 項目的控制項。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">用來建立附加至項目之控制項的建構函式。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">通過新建立控制項的選項。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">設定附加在 QueryCollection 項目的控制項。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">通過控制項的選項。</msg>
  <msg name="WinJS.UI.HtmlControl">可讓您動態地包含HTML網頁。</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">初始化 HtmlControl 的新執行個體定義新的網頁控制項。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">裝載 HtmlControl 的項目。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">設定此頁面的選項。URI 為網頁的內容指定原始程式檔必要選項。</msg>
  <msg name="WinJS.UI.TabContainer.constructor">建構TabContainer。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">與 TabContainer 關聯的 DOM 項目。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">要套用來起始 TabContainer 的選項集。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">建構的 TabContainer。</msg>
  <msg name="WinJS.UI.TabContainer.dispose">處置索引標籤容器。</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">取得或設定擁有焦點的子項目。</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">取得或設定控制項容器中的控制項定位順序。</msg>
  <msg name="WinJS.Application.IOHelper.exists">判斷指定的檔名是否存在於容器。</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">檔案可能存在這個資料夾</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">使用為true (檔案存在)或錯誤的承諾。</msg>
  <msg name="WinJS.Application.IOHelper.remove">刪除在容器的檔案</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">要刪除的檔案</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">當檔案已被刪除時實作的承諾</msg>
  <msg name="WinJS.Application.IOHelper.writeText">將檔案以指定文字寫入容器</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">要寫入的檔案。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">要寫入檔案的內容</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">以字元數撰寫的承諾</msg>
  <msg name="WinJS.Application.IOHelper.readText">從容器讀取檔案的內容，如果檔案不存在，則傳回 def。</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">讀取的檔案</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">要傳回的預設值，如果檔案沒有開啟</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">包含檔案內容的承諾，或 def。</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">檔名可能存在這個資料夾</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">刪除在容器的檔案</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">要寫入的檔名</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">要讀取的檔名</msg>
  <msg name="WinJS.Binding.observableMixin.bind">在名稱參數指定的屬性連結至指定的動作。當屬性值可能已變更時便會叫用這個函式。不保證這個動作會呼叫，只有在值真的更新時，也不可確保每個值變更會呼叫這個動作。這個函式的實作合併變更告知，這類的屬性值的多個更新可能會導致只有一個呼叫指定的動作。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">繫結動作的屬性名稱。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">當屬性可能已變更時便會不同步叫用這個函式。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">物件已傳回。</msg>
  <msg name="WinJS.Binding.Template.constructor">建立可提供重複使用的宣告繫結項目的範本。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">要轉換為範本的 DOM 項目。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">如果提供這個參數，這個範本會由 URI 載入，而元素參數的內容會被忽略。</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">如果指定，這個函式會當做所有未明確指定初始設定式之資料繫結的預設初始設定式使用。提供的函式必須標記為支援處理。</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">表示樣板是否應於初次顯示時在偵錯工具內中斷</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">將這個屬性設定為 true，以還原傳統範本處理及資料繫結，並停用範本編譯。</msg>
  <msg name="WinJS.Binding.Template.element">取得使用為樣板的 DOM 項目。</msg>
  <msg name="WinJS.Binding.Template.extractChild">傳回的是範本的第一個項目子系，而不是裝載所有範本內容的包裝函式項目。</msg>
  <msg name="WinJS.Binding.Template.processTimeout">延遲具現化宣告控制項的毫秒數。零(0)代表沒有延遲，任何負數會造成 setImmediate 延遲，任何正數視為毫秒數。</msg>
  <msg name="WinJS.Binding.Template.render">將指定的資料內容的值與指定的根項目清單並且有宣告屬性的子系項目繫結 (data-win-bind)。</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">物件用於預設資料繫結。</msg>
  <msg name="WinJS.Binding.Template.render_p:container">加入此呈現的範本的項目。如果這個參數被省略時會建立新的 DIV。</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">在繫結後完成的承諾完成。值是在容器參數所指定的項目或建立的DIV。</msg>
  <msg name="WinJS.Binding.Template.renderItem">呈現此樣板的執行個體繫結至項目中包含的資料。如果所回收的參數存在，且 enableRecycling 為 true，則這個範本會嘗試重複使用來自回收參數的DOM項目。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">包含要繫結資料的物件。只需要item.data。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">先前產生的樣板執行個體。</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">DOM 項目。</msg>
  <msg name="WinJS.Binding.Template">提供可重複使用的宣告式繫結項目。</msg>
  <msg name="WinJS.Binding.Template_name">範本</msg>
  <msg name="WinJS.Binding.List.constructor">建立WinJS.Binding.List物件。</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">包含初始清單之項目的陣列。</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">如果 options.binding 為 true 時，清單會在項目值中包含呼叫WinJS.Binding.as () 的結果。如果 options.proxy 為 true，WinJS.Binding.List 的儲存區將使用指定為第一個參數的清單。因為對資料儲存未協調編輯會造成錯誤，所以小心使用這個選項。</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">新建構的WinJS.Binding.List執行個體。</msg>
  <msg name="WinJS.Binding.List.length">取得或設定清單的長度，比清單定義的最大的項目是一的整數值。</msg>
  <msg name="WinJS.Binding.List.getItem">取得指定清單索引的機碼/資料配對 。</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">要擷取之值的索引。</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">具有 .key 和 .data 屬性的物件。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">取得指定清單項目機碼的機碼/資料配對 。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">要擷取的索引鍵值。</msg>
  <msg name="WinJS.Binding.List.indexOfKey">取得清單中第一個出現之機碼的索引。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">要在清單中尋找的機碼。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">清單中第一個出現之機碼的索引，若找不到則是 -1。</msg>
  <msg name="WinJS.Binding.List.move">移動值在索引至指定位置。</msg>
  <msg name="WinJS.Binding.List.move_p:index">值的原始索引。</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">移動後值的索引。</msg>
  <msg name="WinJS.Binding.List.notifyMutated">強制清單傳送項目變更通知給值在指定的索引的任何接聽項。</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">值的索引已變更。</msg>
  <msg name="WinJS.Binding.List.setAt">以新值取代位於指定索引上的值。</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">值的索引已替換。</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">新值。</msg>
  <msg name="WinJS.Binding.List.reverse">傳回反轉項目的清單。方法會直接將清單物件中的項目反轉。在執行時並不會建立新的清單物件。</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">反向排列的清單。</msg>
  <msg name="WinJS.Binding.List.sort">傳回排序後項目的清單。方法會直接將清單物件中的項目排序。在執行時並不會建立新的清單物件。</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">用來決定元素順序的函式。如果省略，項目會依 ASCII 字元遞增順序排序。</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">已排序的清單。</msg>
  <msg name="WinJS.Binding.List.pop">移除清單的最後一個項目，然後將它傳回。</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">清單中的最後一個項目。</msg>
  <msg name="WinJS.Binding.List.push">附加新項目到陣列中，並傳回清單的新長度。</msg>
  <msg name="WinJS.Binding.List.push_p:value">插入清單最後的項目。</msg>
  <msg name="WinJS.Binding.List.push_returnValue">清單的新長度。</msg>
  <msg name="WinJS.Binding.List.shift">移除清單的第一個元素，然後將它傳回。</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">清單中的第一個項目。</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">插入清單開始的項目。</msg>
  <msg name="WinJS.Binding.List.splice">移除清單中的項目，並依需要在適當位置插入新項目，然後傳回被刪除的項目。</msg>
  <msg name="WinJS.Binding.List.splice_p:start">清單中要開始移除元素的位置，位置從零起始。</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">要移除的元素數目。</msg>
  <msg name="WinJS.Binding.List.splice_p:item">要插入清單以取代被刪除元素的元素。</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">刪除的項目。</msg>
  <msg name="WinJS.Namespace.defineWithParent">定義在指定的父命名空間中有指定名稱的新命名空間。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">父命名空間。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">新命名空間名稱。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">新命名空間的成員。</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">新定義的命名空間。</msg>
  <msg name="WinJS.Namespace.define">使用指定名稱定義新命名空間。</msg>
  <msg name="WinJS.Namespace.define_p:name">命名空間名稱。巢狀命名空間可以是以點分隔的名稱。</msg>
  <msg name="WinJS.Class.define">定義類別使用給與的建構函式和指定的執行個體成員。</msg>
  <msg name="WinJS.Class.define_p:constructor">用於執行個體化這個類別的建構函式。</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">執行個體欄位、屬性和方法的集合在類別中提供。</msg>
  <msg name="WinJS.Class.define_p:staticMembers">靜態欄位、屬性和方法的集合在類別中提供。</msg>
  <msg name="WinJS.Class.define_returnValue">新定義的類別。</msg>
  <msg name="WinJS.Class.derive">根據提供的baseClass參數建立子類別，使用原型的繼承。</msg>
  <msg name="WinJS.Class.derive_p:baseClass">繼承自類別。</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">執行個體欄位、屬性和方法的集合將在類別中提供。</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">靜態欄位、屬性和方法的集合將在類別中提供。</msg>
  <msg name="WinJS.Class.mix">使用指定的建構函式以及 mixin 物件指定的執行個體成員集合的聯集定義類別。mixin參數清單具有可變長度。</msg>
  <msg name="WinJS.Utilities.hasWinRT">判斷WinRT是否在此指令碼內容可存取。</msg>
  <msg name="WinJS.Utilities.getMember">取得指定名稱參數的分葉節點層級的型別或命名空間。</msg>
  <msg name="WinJS.Utilities.getMember_p:name">成員的名稱。</msg>
  <msg name="WinJS.Utilities.getMember_p:root">開始的根源。全域物件的預設值。</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">分葉節點層級的型別或命名空間在指定的父命名空間。</msg>
  <msg name="WinJS.Utilities.ready">確定指定的函式只在 DOMContentLoaded 事件在目前網頁引發後才執行。</msg>
  <msg name="WinJS.Utilities.ready_returnValue">在 DOMContentLoaded 發生之後完成的承諾。</msg>
  <msg name="WinJS.Utilities.ready_p:callback">在 DOMContentLoaded 發生之後執行的函式。</msg>
  <msg name="WinJS.Utilities.ready_p:async">如果為 true，則以非同步方式執行回呼。</msg>
  <msg name="WinJS.Utilities.strictProcessing">判斷嚴謹宣告方式是否在此指令碼內容啟用。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">標記函式因與宣告方式相容，例如WinJS.UI.processAll或WinJS.Binding.processAll。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">要標記的函式與宣告方式相容。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">輸入函式。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">判斷提示值與宣告方式相容，例如WinJS.UI.processAll或WinJS.Binding.processAll。如果不相容，則會擲回例外狀況。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">要測試宣告方式相容性的值。如果這個值是函式，必須將它標記含有 true 值的 ' supportedForProcessing' 屬性。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">輸入值。</msg>
  <msg name="WinJS.strictProcessing">一律強制嚴格處理，這個方法沒有作用。</msg>
  <msg name="WinJS.Utilities.isPhone">判斷我們目前是否正在電話中執行。</msg>
  <msg name="WinJS.Utilities.formatLog">將標記和型別加入至記錄訊息。</msg>
  <msg name="WinJS.Utilities.startLog_p:message">要格式化的訊息。</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">要套用至訊息的標記。以空格分隔多個標記。</msg>
  <msg name="WinJS.Utilities.startLog_p:type">訊息的類型。</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">格式化的訊息。</msg>
  <msg name="WinJS.Utilities.startLog">設定將包含 WinJS.log 指定標記的訊息寫至 console.log 的記錄器。</msg>
  <msg name="WinJS.Utilities.startLog_p:options">訊息的標記至記錄檔。以空格分隔多個標記。</msg>
  <msg name="WinJS.Utilities.startLog2">設定記錄器撰寫WinJS.log輸出。</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">包含.type、.tags、.excludeTags和.action屬性。- .type是必要的標記。- .excludeTags 是標記的空格分隔清單，清單中的任何其一都會導致訊息不被記錄。- .tags 是標記的空格分隔清單，清單中的任何其一都會導致訊息被記錄。- .action為函式，如果有的話，呼叫時就會記錄訊息、標記和型別。預設值為記錄至主控台。</msg>
  <msg name="WinJS.Utilities.stopLog">移除先前安裝記錄器。</msg>
  <msg name="WinJS.Utilities.createEventProperties">建立具有對應屬性給傳遞至函式的每個名稱的物件。</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">屬性名稱的變數清單。</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">具有指定屬性的物件。屬性的名稱前面加上「on」。</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">如果為true時會擷取，否則為false。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">引發所指定型別的事件以及使用指定的其他屬性。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">事件引發時會附加一組額外的屬性至事件物件。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">如果事件呼叫了preventDefault則為True。</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">指定是否要啟始擷取。</msg>
  <msg name="WinJS.Resources.addEventListener">為指定的事件註冊事件處理常式。</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">待處理的事件名稱。</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">事件被引發時叫用該接聽項。</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">設為true登錄事件處理常式的擷取階段；設定為false登錄反昇階段。</msg>
  <msg name="WinJS.Resources.getString">擷取含有指定資源 ID 的資源字串。</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">要擷取的字串資源 ID。</msg>
  <msg name="WinJS.Resources.getString_returnValue">可以包含這些屬性的物件:值:要求的字串值。這個屬性一直存在。empty: 值用來指定是否要求的字串找不到。如果找不到字串，則為true。如果找到要求的字串，則為錯誤或尚未定義。lang: 字串的語言，如果有指定。這個屬性僅提供給多語的資源。</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">傳回排程器狀態的字串表示，作診斷之用。工作及清空要求是依照目前預計要處理的順序來顯示。目前的工作及清空要求會以星號標示。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">不進行時間分割即執行排程器中的工作，直到以指定的或更高的優先權執行了所有工作為止。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">排程器應據以進行清空的優先權。預設值為 Priority.min，這會清空佇列中的所有工作。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">對診斷之清空要求的選擇性描述。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">當清空完畢時即完成的承諾。取消此項承諾將會取消清空要求。此承諾永遠不會進入錯誤狀態。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">在高優先權內容中執行指定的回呼。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">要在高優先權內容中執行的回呼。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">回呼的傳回值。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">建立並傳回新的擁有者語彙基元，這個語彙基元可以設定為一個或多個工作的擁有者屬性。然後就可以用來取消其所「擁有」的所有工作。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">新的擁有者語彙基元。您可以使用此語彙基元控制其所擁有的工作。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">排程指定的函式以非同步方式執行。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">表示要排定之工作項目的函式。當呼叫此函式時，工作項目會接收 JobInfo 物件做為它的第一個引數，這個物件可讓工作項目向排程器詢問是否應以合作方式遞交 (Yield)，而且若是如此，則可讓工作項目提供要當做接續來執行的函式，或提供會在完成時提供當做接續執行之函式的 WinJS.Promise。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">據以排程工作項目的優先權。預設值為 Priority.normal。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">要繫結至工作項目中的 'this' 執行個體。預設值為 null。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">診斷工作項目的描述。預設值為空字串。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">表示這個工作項目 (Work Item) 的工作 (Job) 執行個體。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">排程工作以完成傳回的承諾。這個方法有四個不同版本，分別適用於不同的常用優先權：schedulePromiseHigh、schedulePromiseAboveNormal、schedulePromiseNormal、schedulePromiseBelowNormal 和 schedulePromiseIdle。範例使用方式 (示範如何確保承諾鏈結的最後一個連結是以高優先權執行於排程器)：asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">所傳回之承諾將會完成的值。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">描述工作供診斷之用的字串。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">在具備所需優先權之工作內完成的承諾。</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">取得執行中呼叫端所用的目前優先權。</msg>
  <msg name="WinJS.xhr">將呼叫包裝在 Promise 中的 XMLHttpRequest。</msg>
  <msg name="WinJS.xhr_p:options">套用至XMLHttpRequest物件的選項。分別是：型別、URL、使用者、密碼、標頭、responseType、資料和 customRequestInitializer。</msg>
  <msg name="WinJS.xhr_returnValue">承諾完成時傳回 XMLHttpRequest 物件。</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">將指定項目的 innerHTML 屬性設定為指定文字。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">要在 innerHTML 屬性中設定的項目。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">要設定給 innerHTML 屬性的值。</msg>
  <msg name="WinJS.Utilities.setOuterHTML">將指定項目的 outerHTML 屬性設定為指定文字。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">要在 outerHTML 屬性中設定的項目。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">要設定給 outerHTML 屬性的值。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">呼叫指定之項目的 insertAdjacentHTML。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">insertAdjacentHTML 要呼叫的項目。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">相對於插入HTML項目的位置。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">提供給 insertAdjacentHTML 的值。</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">將指定項目的 outerHTML 屬性設定為 msWWA.execUnsafeLocalFunction 內容中的指定文字。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">呼叫指定之項目的 insertAdjacentHTML 在 msWWA.execUnsafeLocalFunction 內容中。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">提供給 insertAdjacentHTML 的值。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">當通過 msIsStaticHTML檢查時將項目的 innerHTML 屬性設定為指定文字。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">當通過 msIsStaticHTML檢查時將項目的 outerHTML 屬性設定為指定文字。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">當通過 msIsStaticHTML檢查時呼叫項目的 insertAdjacentHTML。</msg>
  <msg name="WinJS.Utilities.markDisposable">將指定的處置實作加入至指定的項目，並將其標記為可處置。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">要標記為可處置的項目。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">函式，包含處置函式將會呼叫的項目專用處置邏輯。</msg>
  <msg name="WinJS.Utilities.disposeSubTree">處置所有的第一代可處置項目，這些項目是指定之項目的子代。不會處置指定的項目本身。</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">樹狀子目錄要加以處置的根項目。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">將一組以宣告方式指定的選項(屬性和事件)加入至指定的控制項。如果選項屬性的名稱以「on」開頭，屬性值是函式且控制項支援addEventListener。setOptions方法會呼叫控制項的addEventListener方法。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">套用屬性和事件的控制項。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">以宣告方式指定的一組選項。</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">如果為true時起始擷取，否則為false。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">引發所指定型別的事件，加入指定的其他屬性。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">如果 preventDefault 在事件中呼叫了則為true，否則為false。</msg>
  <msg name="WinJS.UI.select.createSelect">從 DOM 的樹狀目錄中從指定之項目至文件的根，在選取器範圍遇到選取該範圍內執行逐步搜尋指定的選取器的字串。第一個符合的項目會傳回。</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">選取器字串。</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">找到的目標項目。</msg>
  <msg name="WinJS.UI.processAll">繫結套用宣告式控制項到所有項目，從指定根項目開始。</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">開始套用繫結的項目。如果這個參數沒有指定，繫結會套用至整個文件。</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">如果為true，則要繫結的項目必須略過指定的根項目、只包含子系。</msg>
  <msg name="WinJS.UI.processAll_returnValue">當繫結套用至所有控制項時承諾會實作。</msg>
  <msg name="WinJS.UI.process">將宣告式控制項繫結套用至指定的項目。</msg>
  <msg name="WinJS.UI.process_p:element">所要繫結的項目。</msg>
  <msg name="WinJS.UI.process_returnValue">在啟動控制項之後會實作的承諾。承諾的值為附加至項目的控制項。</msg>
  <msg name="WinJS.Utilities.query">在指定之項目或整份文件中執行查詢選取器。</msg>
  <msg name="WinJS.Utilities.query_p:query">要執行的查詢選取器。</msg>
  <msg name="WinJS.Utilities.query_p:element">要執行查詢的項目。如果這個參數沒有指定，會在整份文件上執行查詢。</msg>
  <msg name="WinJS.Utilities.query_returnValue">QueryCollection 包含查詢的結果。</msg>
  <msg name="WinJS.Utilities.id">依 ID 搜尋一個項目並且將結果包裝在 QueryCollection。</msg>
  <msg name="WinJS.Utilities.id_p:id">項目的 ID。</msg>
  <msg name="WinJS.Utilities.id_returnValue">包含項目的QueryCollection，如果找到。</msg>
  <msg name="WinJS.Utilities.children">建立包含指定的父項目的子系的QueryCollection。</msg>
  <msg name="WinJS.Utilities.children_p:element">父項目。</msg>
  <msg name="WinJS.Utilities.children_returnValue">QueryCollection 包含項目的子系。</msg>
  <msg name="WinJS.Utilities.Key">定義一組鍵盤值。</msg>
  <msg name="WinJS.Utilities.Key.backspace">退格鍵。</msg>
  <msg name="WinJS.Utilities.Key.tab">TAB 鍵。</msg>
  <msg name="WinJS.Utilities.Key.enter">ENTER 鍵。</msg>
  <msg name="WinJS.Utilities.Key.shift">SHIFT 鍵。</msg>
  <msg name="WinJS.Utilities.Key.ctrl">CTRL 鍵。</msg>
  <msg name="WinJS.Utilities.Key.alt">ALT 鍵。</msg>
  <msg name="WinJS.Utilities.Key.pause">Pause 鍵。</msg>
  <msg name="WinJS.Utilities.Key.capsLock">CAPS LOCK 鍵。</msg>
  <msg name="WinJS.Utilities.Key.escape">ESCAPE 鍵。</msg>
  <msg name="WinJS.Utilities.Key.space">空格鍵。</msg>
  <msg name="WinJS.Utilities.Key.pageUp">PAGE UP 鍵。</msg>
  <msg name="WinJS.Utilities.Key.pageDown">PAGE DOWN 鍵。</msg>
  <msg name="WinJS.Utilities.Key.end">END 鍵。</msg>
  <msg name="WinJS.Utilities.Key.home">HOME 鍵。</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">向左鍵。</msg>
  <msg name="WinJS.Utilities.Key.upArrow">向上鍵。</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">向右鍵。</msg>
  <msg name="WinJS.Utilities.Key.downArrow">向下鍵。</msg>
  <msg name="WinJS.Utilities.Key.insert">INSERT 鍵。</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">DELETE 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num0">數字 0 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num1">數字 1 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num2">數字 2 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num3">數字 3 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num4">數字 4 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num5">數字 5 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num6">數字 6 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num7">數字 7 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num8">數字 8 鍵。</msg>
  <msg name="WinJS.Utilities.Key.num9">數字 9 鍵。</msg>
  <msg name="WinJS.Utilities.Key.a">A 鍵。</msg>
  <msg name="WinJS.Utilities.Key.b">B 鍵。</msg>
  <msg name="WinJS.Utilities.Key.c">C 鍵。</msg>
  <msg name="WinJS.Utilities.Key.d">D 鍵。</msg>
  <msg name="WinJS.Utilities.Key.e">E 鍵。</msg>
  <msg name="WinJS.Utilities.Key.f">F 鍵。</msg>
  <msg name="WinJS.Utilities.Key.g">G 鍵。</msg>
  <msg name="WinJS.Utilities.Key.h">H 鍵。</msg>
  <msg name="WinJS.Utilities.Key.i">I 鍵。</msg>
  <msg name="WinJS.Utilities.Key.j">J 鍵。</msg>
  <msg name="WinJS.Utilities.Key.k">K 鍵。</msg>
  <msg name="WinJS.Utilities.Key.l">L 鍵。</msg>
  <msg name="WinJS.Utilities.Key.m">M 鍵。</msg>
  <msg name="WinJS.Utilities.Key.n">N 鍵。</msg>
  <msg name="WinJS.Utilities.Key.o">O 鍵。</msg>
  <msg name="WinJS.Utilities.Key.p">P 鍵。</msg>
  <msg name="WinJS.Utilities.Key.q">Q 鍵。</msg>
  <msg name="WinJS.Utilities.Key.r">R 鍵。</msg>
  <msg name="WinJS.Utilities.Key.s">S 鍵。</msg>
  <msg name="WinJS.Utilities.Key.t">T 鍵。</msg>
  <msg name="WinJS.Utilities.Key.u">U 鍵。</msg>
  <msg name="WinJS.Utilities.Key.v">V 鍵。</msg>
  <msg name="WinJS.Utilities.Key.w">W 鍵。</msg>
  <msg name="WinJS.Utilities.Key.x">X 鍵。</msg>
  <msg name="WinJS.Utilities.Key.y">Y 鍵。</msg>
  <msg name="WinJS.Utilities.Key.z">Z 鍵。</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">左Windows按鍵。</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">右Windows按鍵。</msg>
  <msg name="WinJS.Utilities.Key.menu">功能表鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad0">數字鍵盤 0 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad1">數字鍵盤 1 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad2">數字鍵盤 2 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad3">數字鍵盤 3 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad4">數字鍵盤 4 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad5">數字鍵盤 5 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad6">數字鍵盤 6 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad7">數字鍵盤 7 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad8">數字鍵盤 8 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numPad9">數字鍵盤 9 鍵。</msg>
  <msg name="WinJS.Utilities.Key.multiply">乘號鍵。</msg>
  <msg name="WinJS.Utilities.Key.add">加號鍵。</msg>
  <msg name="WinJS.Utilities.Key.subtract">減號鍵。</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">小數點鍵。</msg>
  <msg name="WinJS.Utilities.Key.divide">除號鍵。</msg>
  <msg name="WinJS.Utilities.Key.F1">F1 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F2">F2 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F3">F3 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F4">F4 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F5">F5 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F6">F6 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F7">F7 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F8">F8 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F9">F9 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F10">F10 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F11">F11 鍵。</msg>
  <msg name="WinJS.Utilities.Key.F12">F12 鍵。</msg>
  <msg name="WinJS.Utilities.Key.numLock">NUMBER LOCK 鍵。</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">SCROLL LOCK 鍵。</msg>
  <msg name="WinJS.Utilities.Key.browserBack">瀏覽器上一頁鍵。</msg>
  <msg name="WinJS.Utilities.Key.browserForward">瀏覽器下一頁鍵。</msg>
  <msg name="WinJS.Utilities.Key.semicolon">分號鍵。</msg>
  <msg name="WinJS.Utilities.Key.equal">等號鍵。</msg>
  <msg name="WinJS.Utilities.Key.comma">逗號鍵。</msg>
  <msg name="WinJS.Utilities.Key.dash">DASH 鍵。</msg>
  <msg name="WinJS.Utilities.Key.period">句號鍵。</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">正斜線 (/) 鍵。</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">抑音符號鍵。</msg>
  <msg name="WinJS.Utilities.Key.openBracket">左括弧鍵。</msg>
  <msg name="WinJS.Utilities.Key.backSlash">反斜線鍵。</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">右括弧鍵。</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">單引號鍵。</msg>
  <msg name="WinJS.Utilities.data">取得和指定項目關聯的值。</msg>
  <msg name="WinJS.Utilities.data_p:element">元素。</msg>
  <msg name="WinJS.Utilities.data_returnValue">與值相關聯的項目。</msg>
  <msg name="WinJS.Utilities.hasClass">判斷指定的項目是否有指定的類別。</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">如果指定項目包含指定類別則為 true，否則為 false。</msg>
  <msg name="WinJS.Utilities.addClass">將指定的類別加入至指定的項目。使用空格分隔的名稱，可加入多個類別。</msg>
  <msg name="WinJS.Utilities.addClass_p:e">要加入類別的項目。</msg>
  <msg name="WinJS.Utilities.addClass_p:name">加入的類別名稱，使用空格分隔的名稱可加入多個類別</msg>
  <msg name="WinJS.Utilities.removeClass">從指定項目移除指定的類別。</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">要移除類別的項目。</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">要移除之類別的名稱。</msg>
  <msg name="WinJS.Utilities.toggleClass">從指定項目切換 (加入或移除) 指定的類別。如果類別存在，將其移除；如果不存在，將其加入。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">要切換類別的項目。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">要切換之類別的名稱。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">取得相對於指定父代之指定項目的左方座標。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">相對左邊座標。</msg>
  <msg name="WinJS.Utilities.getRelativeTop">取得相對於指定父代之指定項目的上方座標。</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">相對上方座標。</msg>
  <msg name="WinJS.Utilities.empty">從指定的項目中移除子節點。</msg>
  <msg name="WinJS.Utilities.getContentWidth">取得指定項目內容的寬度。內容寬度不包含框線或邊框距離。</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">項目的內容寬度。</msg>
  <msg name="WinJS.Utilities.getTotalWidth">取得項目的寬度，包含邊界。</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">項目的寬度包含邊界。</msg>
  <msg name="WinJS.Utilities.getContentHeight">取得指定項目內容的高度。內容高度不包含框線或邊框距離。</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">項目的內容高度。</msg>
  <msg name="WinJS.Utilities.getTotalHeight">取得項目的高度，包含邊界。</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">項目的高度包含邊界。</msg>
  <msg name="WinJS.Utilities.getPosition">取得特定項目的位置。</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">包含項目的左方、上方、寬度和高度屬性的物件。</msg>
  <msg name="WinJS.Utilities.convertToPixels">轉換中所指定項目的CSS字串轉換為像素。</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">CSS 定位字串。</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">像素數。</msg>
  <msg name="WinJS.Utilities.eventWithinElement">判斷指定的事件是否發生在指定的項目。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">事件。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">如果事件發生在項目，則為 true，否則為 false。</msg>
  <msg name="WinJS.UI.Pages.dispose">處置這個頁面。</msg>
  <msg name="WinJS.UI.Pages._mixin.load">從指定的URI建立DOM項目的複本。為了能夠使用這個覆寫，頁面包含需要藉由在 WinJS.UI.Pages.render () 呼叫之前呼叫的 WinJS.UI.Pages.define() 定義的載入覆寫。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">要複製 DOM 項目的 URI。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">承諾的完成值是一組沒有父項的 DOM項目，當非同步處理是必要的。否則不會傳回任何值。</msg>
  <msg name="WinJS.UI.Pages._mixin.init">設定控制項的內容之前初始化控制項。設定控制項的內容之後，所有初始設定使用的處理方法應該完成。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">將包含網頁上的所有內容的DOM項目。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">通過頁面中建構函式 (Constructor) 的選項。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">初始設定完成時實作的承諾，如果非同步處理常式是必要的。否則不會傳回任何值。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">設定控制項的內容之後初始化控制項。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">要通過頁面中建構函式 (Constructor) 的選項。</msg>
  <msg name="WinJS.UI.Pages._mixin.render">呈現控制項，通常會在指定的項目加入loadResult參數指定的項目。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">傳入頁面中建構函式 (Constructor) 的選項。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">從載入方法傳回的項目。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">呈現完成時實作的承諾，如果非同步處理常式是必要的。否則不會傳回任何值。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">在全部初始化和呈現完成之後呼叫。此時這個項目可立即使用。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">包含網頁上的所有內容的DOM項目。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">傳入頁面中建構函式 (Constructor) 的選項。</msg>
  <msg name="WinJS.UI.Pages._mixin.error">如果有任何錯誤會在處理網頁中發生才呼叫。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">發生的錯誤。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">如果錯誤已處理則沒有任何動作，或如果這個錯誤未被處理則錯誤承諾。</msg>
  <msg name="WinJS.UI.Pages.define">建立來自包含指定成員的指定 URI 的新頁面控制項。允許相同 URI 的方法的多個呼叫，而且全部成員都會合併。</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">內容的 URI 定義頁面。</msg>
  <msg name="WinJS.UI.Pages.define_p:members">控制項會具有的其他成員。</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">建立網頁的建構函式。</msg>
  <msg name="WinJS.UI.Pages.get">為指定的URI取得的已定義的網頁控制項或建立新的。</msg>
  <msg name="WinJS.UI.Pages.render">建立網頁控制項從指定的項目內的指定URI使用指定的選項。</msg>
  <msg name="WinJS.UI.Pages.render_p:element">填入頁面的項目。</msg>
  <msg name="WinJS.UI.Pages.render_p:options">設定此頁面的選項。</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">當指定的項目為最終檔案的父項會實作的承諾。</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">頁面完成完成呈現時的承諾。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">將指定 URI 內容複製至指定項目。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">包含要複製片段的 URI。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">要附加片段的項目。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">當片段載入時實作的承諾。如果目標項目均未指定，這個複製的片段是完整的值。</msg>
  <msg name="WinJS.UI.Fragments.cache">在指定的位置開始載入片段。當片段已準備好要複製，則傳回承諾完成。</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">包含要複製片段的 URI。</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">當片段準備好被複製時實作的承諾。</msg>
  <msg name="WinJS.UI.Fragments.clearCache">移除有關指定片段的所有快取資訊。這個方法並未卸載片段所參考的任何指令碼或樣式。</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">包含要清除片段的 URI。如果沒有提供 URI，將清除快取的整個內容。</msg>
  <msg name="WinJS.UI.isAnimationEnabled">判斷 WinJS 動畫程式庫是否將執行動畫。</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">如果為 True 則執行 WinJS 動畫。如果 False 則 WinJS 動畫會隱藏起來。</msg>
  <msg name="WinJS.UI.disableAnimations">使用遞減動畫可用計數來停用WinJS動畫程式庫的動畫。</msg>
  <msg name="WinJS.UI.enableAnimations">使用遞增動畫可用計數來啟用WinJS動畫程式庫的動畫。</msg>
  <msg name="WinJS.UI.executeAnimation">執行可能同時存在與其他動畫程式庫動畫的CSS動畫。應用程式不應直接呼叫函式，它們應該想要在動畫程式庫使用高階動畫。</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">執行CSS動畫之單一項目或項目集合。</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">單一動畫描述或動畫描述陣列。</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">CSS 動畫完成時完成的承諾物件。</msg>
  <msg name="WinJS.UI.executeTransition">執行可能同時存在與其他動畫程式庫動畫的CSS轉換。應用程式不應直接呼叫函式，它們應該想要在動畫程式庫使用高階動畫。</msg>
  <msg name="WinJS.UI.executeTransition_p:element">執行CSS轉換之單一項目或項目集合。</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">單一轉換描述或轉換描述陣列。</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">CSS 轉換完成時完成的承諾物件。</msg>
  <msg name="WinJS.UI.eventHandler">標記事件處理常式函式因與宣告方式相容。</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">要標記的處理常式與宣告方式相容。</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">輸入處理常式。</msg>
  <msg name="WinJS.UI.Orientation">控制項屬性的方向選項。</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">垂直</msg>
  <msg name="WinJS.Application.event.setPromise">用來通知應用程式物件非同步工作已執行，這個事件處理常式不應該被視為完成直到承諾完成。</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">要等候的承諾。</msg>
  <msg name="WinJS.Application.queueEvent">WinJS.Application 事件佇列會處理的事件佇列。</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">事件物件會使用型別屬性做為事件名稱，而且會在WinJS.Application事件佇列分派。整個物件提供給事件的詳細屬性的事件接聽程式。</msg>
  <msg name="WinJS.Application.stop">停止處理應用程式事件並重設WinJS.Application至初始狀態。</msg>
  <msg name="WinJS.Application.checkpoint">佇列檢查點事件。</msg>
  <msg name="WinJS.Application.start">在WinJS.Application事件佇列開始處理事件。</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">用來通知 ListView 非同步工作已執行，這個事件處理常式不應該被視為完成直到承諾完成。</msg>
  <msg name="WinJS.Navigation.canGoForward">判斷向前巡覽是否可能的。</msg>
  <msg name="WinJS.Navigation.canGoBack">判斷向後巡覽是否可能的。</msg>
  <msg name="WinJS.Navigation.location">取得目前位置。</msg>
  <msg name="WinJS.Navigation.state">取得或設定巡覽狀態。</msg>
  <msg name="WinJS.Navigation.history">取得或設定巡覽記錄。</msg>
  <msg name="WinJS.Navigation.forward">向前巡覽。</msg>
  <msg name="WinJS.Navigation.forward_p:distance">向前移動的項目數目。</msg>
  <msg name="WinJS.Navigation.forward_returnValue">利用承諾完成的值表示巡覽是否成功。</msg>
  <msg name="WinJS.Navigation.back">向後巡覽。</msg>
  <msg name="WinJS.Navigation.back_p:distance">移至項目的數目會記錄。</msg>
  <msg name="WinJS.Navigation.navigate">巡覽至位置。</msg>
  <msg name="WinJS.Navigation.navigate_p:location">巡覽至位置。通常這個位置是字串，但也可能是任何東西。</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">可由WinJS.Navigation.state存取的巡覽狀態。</msg>
  <msg name="WinJS.Application.local">允許存取應用程式區域儲存區建立檔案，保留給應用程式不同回合而且不會漫遊。</msg>
  <msg name="WinJS.Application.temp">允許存取應用程式暫時儲存區建立檔案，在應用程式執行之間可能被系統回收。</msg>
  <msg name="WinJS.Application.roaming">允許存取應用程式漫遊儲存區建立檔案，保留給應用程式不同回合而且隨著使用者在多台電腦中漫遊。</msg>
  <msg name="WinJS.Binding.observableMixin.notify">告知接聽程式的屬性值已更新。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">屬性的名稱已經更新。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">屬性的新值。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">屬性的舊值。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">通知完成後完成承諾。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">從特定屬性的通知清單移除一個或多個接聽程式。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">要解除繫結之屬性的名稱。如果省略參數時，所有事件的所有接聽程式會移除。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">從指定之屬性的接聽項清單移除函式。如果省略參數時，指定屬性的所有接聽程式會移除。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">依名稱取得屬性值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">要取得的屬性名稱。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">屬性值做為可預見的物件。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">更新屬性值並告知任何接聽程式。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">要更新之屬性的名稱。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">屬性的新值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">若要將變更告知的屬性(Property)加入至物件，包括ECMAScript5屬性定義。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">要加入的屬性名稱。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">屬性的值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">當屬性變更通知已處理時完成的承諾。如果聯集多個通知，這項承諾可能會取消或承諾的值可能會更新。這項承諾的已完成值是通知完成之屬性的新值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">移除屬性值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">要移除之屬性的名稱。</msg>
  <msg name="WinJS.Binding.bind">將一或多個屬性繫結在可預見物件或該物件的子值。</msg>
  <msg name="WinJS.Binding.bind_p:observable">要繫結的物件。</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">包含繫結宣告的物件常值。繫結宣告的格式為：{propertyName:(fucntion|bindingDeclaration), …} 例如，繫結至物件的巢狀成員宣告如下所示：bind(someObject, { address: { street: function(v) { ...} } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">物件至少包含一個「取消」欄位，也就是移除所有繫結與繫結要求相關聯的函式。</msg>
  <msg name="WinJS.Binding.expandProperties">包裝指定的物件，讓所有的屬性檢測繫結。這就是要與繫結mixin搭配使用。</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">可繫結物件的規格。</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">一組屬性為有線繫結的物件。</msg>
  <msg name="WinJS.Binding.define">建立支援指定屬性集合的可檢視性的新建構函式。</msg>
  <msg name="WinJS.Binding.define_p:data">物件做為用來定義一組屬性的模式，如下所示：var MyPointClass = define({x:0,y:0});</msg>
  <msg name="WinJS.Binding.define_returnValue">具有一個選擇性引數那就是屬性的初始狀態的建構函式。</msg>
  <msg name="WinJS.Binding.define.return">建立新的可預見的物件。</msg>
  <msg name="WinJS.Binding.define.return_p:init">屬性的初始值。</msg>
  <msg name="WinJS.Binding.as">傳回可預見的物件。這可能是指定之物件的可預見的Proxy、現有的Proxy或所指定的物件本身如果直接支援可檢視。</msg>
  <msg name="WinJS.Binding.as_p:data">針對物件提供可檢視性。</msg>
  <msg name="WinJS.Binding.as_returnValue">可觀察的物件。</msg>
  <msg name="WinJS.Binding.unwrap">傳回原始(非可預見)，傳回物件如果指定的物件是可預見值的Proxy。</msg>
  <msg name="WinJS.Binding.unwrap_p:data">要為其擷取原始值的物件。</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">如果指定的物件是可預見值的Proxy，則傳回原始物件，否則傳回一樣的物件。</msg>
  <msg name="WinJS.Binding.Template.render.value">讓範本依據 URI 呈現。</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">要載入樣板的 URI。</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">在繫結後完成的承諾完成。值是在容器參數的物件或建立的DIV。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">呈現繫結至指定的資料以及QueryCollection包含之項目範本的父系。如果QueryCollection包含多個項目時，這個範本會呈現多次，每個項目一次在QueryCollection 每個傳遞資料的項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">附加至樣板控制項的 DOM 項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">要呈現的資料。如果資料是陣列 (或另一個含有 forEach 方法的物件)，則範本會呈現多次，集合中的每個項目各一次。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">如果提供的話，每次範本取得呈現時會呼叫函式，並傳遞完成的承諾當範本呈現完成時。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">QueryCollection</msg>
  <msg name="WinJS.Binding.declarativeBind">將指定資料內容的值與遞減的指定根項目並且有宣告屬性 (data-win-bind) 的項目繫結。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">項目開始周遊尋找項目繫結。如果這個參數被忽略，則會搜尋整份文件。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">快取繫結資料。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">要在繫結運算式未指定初始設定式之情況下使用的繫結初始設定式。如果未提供，則表現方式與 WinJS.Binding.defaultBind 的相同。</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">承諾完成，當含有繫結宣告的每個項目都已處理，而且更新已啟動。</msg>
  <msg name="WinJS.Binding.converter">使用在原始檔屬性值執行提供的轉換子函式為繫結來源屬性和目標屬性之間建立預設繫結初始設定。</msg>
  <msg name="WinJS.Binding.converter_p:convert">操作在來源屬性的結果會產生值設定為目的屬性的轉換。</msg>
  <msg name="WinJS.Binding.converter_returnValue">繫結初始設定式。</msg>
  <msg name="WinJS.Binding.setAttribute">這樣就會在來源物件與目標項目的屬性之間建立單向繫結。</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">來源物件。</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">來源物件的來源屬性的路徑。</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">目的地物件 (必須是 DOM 項目)。</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">目的地屬性之目的地物件的路徑，必須是單一名稱。</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">目標的已知初始值，如果來源值與初始值相同 (使用 ===)，表示第一次並未設定目標。</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">具有取消方法物件使用於整合繫結。</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">將目的地項目的屬性設為來源屬性的值</msg>
  <msg name="WinJS.Binding.addClassOneTime">將目的地項目的類別加入至來源屬性的值</msg>
  <msg name="WinJS.Binding.defaultBind">這樣就會在來源物件與目標物件之間建立單向繫結。</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">目的物件。</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">目標物件的目標屬性的路徑。</msg>
  <msg name="WinJS.Binding.oneTime">將目標屬性設定為來源屬性的值。</msg>
  <msg name="WinJS.Binding.initializer">標記自訂初始設定函式可以做為與宣告式資料繫結相容。</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">自訂初始設定標記為與宣告式資料繫結相容。</msg>
  <msg name="WinJS.Binding.initializer_returnValue">輸入自訂初始設定。</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">指定之索引鍵所識別的值被不同的值取代。</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">新的值插入至清單。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">指定之索引鍵所識別的值從清單中的某個索引已移至另一個索引。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">指定的索引鍵所識別的值已變更。</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">指定的索引鍵所識別的值已從清單中移除。</msg>
  <msg name="WinJS.Binding.ListBase.onreload">清單已重新整理。清單項目的任何參考可能不正確。</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">強制清單傳送重新載入通知給所有接聽程式。</msg>
  <msg name="WinJS.Binding.ListBase.getAt">取得指定索引處的值。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">取得設定的值的索引。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">在指定索引處的值。</msg>
  <msg name="WinJS.Binding.ListBase.concat">傳回由兩個清單所組合而成的新清單。</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">陣列包含關聯的清單和任何其他所提供的項目。</msg>
  <msg name="WinJS.Binding.ListBase.join">傳回的字串是由清單的所有項目所組成，並以指定的分隔符號字串來分隔。</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">用來分隔項目清單的字串。如果省略參數時，清單項目會以逗號分隔。</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">以指定的分隔符號字串分隔項目清單。</msg>
  <msg name="WinJS.Binding.ListBase.slice">擷取清單的一部分並且傳回新的清單。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">指定該區段的開頭的索引。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">指定該區段的結尾的索引。</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">傳回陣列的一個區段。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">取得清單中指定值之第一個符合項目的索引。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">要在清單中尋找的值。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">要開始搜尋的索引。如果fromIndex省略，會從索引0開始搜尋。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">清單中第一個出現之值的索引，若找不到則是 -1。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">取得清單中指定值之最後一個符合項目的索引。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">要開始搜尋的索引。如果fromIndex省略，會從清單中最後的索引開始搜尋。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">清單中最後一個出現之值的索引，若找不到則是 -1。</msg>
  <msg name="WinJS.Binding.ListBase.every">確認指定的回呼函式是否傳回True為清單中的所有項目。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">最多可以接受三個引數的函式。清單中的每個項目會呼叫這個函式，直到傳回錯誤或到達清單結尾為止。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">這個關鍵字在回呼函式可參考的物件。如果thisArg省略，會使用未定義。</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">回呼為清單中的所有項目傳回True，則為True。</msg>
  <msg name="WinJS.Binding.ListBase.filter">傳回符合在回呼函式指定的條件清單中的項目。</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">最多可以接受三個引數的函式。為清單的每一個項目所呼叫的函式。</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">陣列包含符合在回呼函式指定條件的項目。</msg>
  <msg name="WinJS.Binding.ListBase.forEach">為清單中每個項目呼叫指定的回呼函式。</msg>
  <msg name="WinJS.Binding.ListBase.map">針對清單的每個項目呼叫指定的回呼函式，並傳回包含結果的陣列。</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">陣列包含為清單中每個項目呼叫的回呼函式的結果。</msg>
  <msg name="WinJS.Binding.ListBase.some">確認指定的回呼函式是否傳回True為清單中的任何項目。</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">最多可以接受三個引數的函式。清單中的每個項目會呼叫函式，直到傳回 True 或到達清單結尾為止。</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">回呼為清單中的任何項目傳回True，則為True。</msg>
  <msg name="WinJS.Binding.ListBase.reduce">藉由為清單中任何項目呼叫指定的回呼函式累積單一結果。回呼函式的傳回值即為累加結果並提供做為下一個呼叫的引數給回呼函式。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">最多可以接受四個引數的函式。為清單的每一個項目所呼叫的函式。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">如果指定initialValue，則會使用它為值開始累積。對這個函式的首次呼叫提供的值做為引數而不是清單值。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">從最後一次呼叫回呼函式的傳回值。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">藉由為清單中任何項目依遞減順序呼叫指定的回呼函式累積單一結果。回呼函式的傳回值即為累加結果並提供做為下一個呼叫的引數給回呼函式。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">如果指定initialValue，則會使用它為值開始累積。對 callbakfn 函式的首次呼叫提供的值做為引數而不是清單值。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">從最後一次呼叫回呼函式的傳回值。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">建立在清單中即時篩選的投影。當清單變更，篩選的投影回應這些變更，而且可能也會變更。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">接受單一引數的函式。createFiltered函式呼叫清單中每個項目的回呼。如果函式傳回true，該項目在資料篩選的清單中。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">在清單中已篩選的投影。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">建立在清單中即時群組的投影。當清單變更，群組的投影回應這些變更，而且可能也會變更。群組的投影依群組觸控順序排序清單中所有項目。分組的投影也包含代表群組的WinJS.Binding.List在清單中找到的.groups屬性。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">接受單一引數的函式。為清單中的每個項目呼叫這個函式，則函式應該傳回表示群組包含項目的字串。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">接受單一引數的函式。為每個群組所呼叫的函式在清單的一個項目上。它應該傳回群組中應該設定為.groups清單項目資料的值。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">接受兩個引數的函式。這個函式呼叫清單中找到的群組索引鍵。必須傳回數值下列其中一項：負數，如果第一個引數小於第二個，為零，如果兩個引數是相等，而正，如果第一個引數大於第二個。如果省略，群組會依 ASCII 字元遞增順序排序。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">在清單中已群組的投影。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">建立在清單中即時排序的投影。當清單變更，排序的投影回應這些變更，而且可能也會變更。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">接受兩個引數的函式。與清單的每一個項目呼叫的函式。必須傳回數值下列其中一項：負數，如果第一個引數小於第二個，為零，如果兩個引數是相等，而正，如果第一個引數大於第二個。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">在清單中已排序的投影。</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">從WinJS.Binding.List基礎WinJS.Binding.List中斷其投影。這點非常重要，只有當他們有不同的存留期時。</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">取得指定機碼的機碼/資料配對 。</msg>
  <msg name="WinJS.Binding.ListProjection.move">移動值在索引至newIndex位置。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">傳回比清單所定義的最高元素還多一的整數值。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">傳回指定索引鍵的機碼/資料配對 。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">要擷取的值索引。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">傳回清單中第一個出現之機碼的索引。</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">取得或設定清單的長度。傳回比清單所定義的最高元素還多一的整數值。</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">傳回第一個出現之機碼的索引。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">取得WinJS.Binding.List，在此清單中識別為群組投影。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">取得指定項目機碼的機碼/資料配對 。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">取得清單的長度。傳回比清單所定義的最高元素還多一的整數值。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">取得指定索引的機碼/資料配對 。</msg>
  <msg name="WinJS.Resources.processAll">處理序資源標記並以當地語系化的字串取代字串。</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">DOM項目開始處理。processAll處理項目及其子項目。如果您沒有指定根項目， processAll處理整個文件。</msg>
</messagebundle>