<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">Tente d'annuler la réalisation d'une valeur promise. Si la promesse n'a pas déjà été réalisée et que l'annulation est prise en charge, la promesse entre dans l'état d'erreur avec une valeur Error("Canceled").</msg>
  <msg name="WinJS.PromiseStateMachine.done">Vous permet de spécifier le travail à effectuer sur la réalisation de la valeur promise, la gestion des erreurs à exécuter si la promesse ne remplit pas de valeur, et la gestion des notifications de progression. Une fois que les gestionnaires ont terminé l'exécution, cette fonction lève une erreur qui aurait été retournée de then() comme une promesse dans l'état d'erreur.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">Fonction à appeler si la promesse est réalisée avec succès avec une valeur. La valeur remplie est passée comme argument unique. Si la valeur est Null, la valeur remplie est retournée. La valeur retournée par la fonction devient la valeur remplie de la promesse retournée par then(). Si une exception est levée lors de l'exécution de la fonction, la promesse retournée par then() passe à l'état d'erreur.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">Fonction à appeler si la promesse est réalisée avec une erreur. L'erreur est passée comme argument unique. Si elle est Null, l'erreur est transférée. La valeur retournée par la fonction est la valeur remplie de la promesse retournée par then().</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">Fonction à appeler si les rapports de promesse progressent. Les données sur la progression sont passées en tant qu'argument unique. Les promesses ne sont pas obligées de prendre en charge la progression.</msg>
  <msg name="WinJS.PromiseStateMachine.then">Vous permet de spécifier le travail à effectuer sur la réalisation de la valeur promise, la gestion des erreurs à exécuter si la promesse ne remplit pas de valeur, et la gestion des notifications de progression.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">Fonction à appeler si la promesse est réalisée avec succès avec une valeur. La valeur est passée comme argument unique. Si la valeur est Null, la valeur est retournée. La valeur retournée par la fonction devient la valeur remplie de la promesse retournée par then(). Si une exception est levée lorsque cette fonction est exécutée, la promesse retournée par then() passe à l'état d'erreur.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">Fonction à appeler si la promesse est réalisée avec une erreur. L'erreur est passée comme argument unique. Si elle est Null, l'erreur est transférée. La valeur retournée par la fonction devient la valeur remplie de la promesse retournée par then().</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">Fonction à appeler si les rapports de promesse progressent. Les données sur la progression sont passées en tant qu'argument unique. Les promesses ne sont pas obligées de prendre en charge la progression.</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">La promesse dont la valeur est le résultat de l'exécution de la fonction Terminé ou Erreur.</msg>
  <msg name="WinJS.Promise">Une promesse fournit un mécanisme de planification du travail à effectuer sur une valeur qui n'a pas encore été calculée. C'est une abstraction pratique pour gérer des interactions avec les API asynchrones.</msg>
  <msg name="WinJS.Promise_p:init">Fonction appelée pendant la construction de la promesse. Trois arguments sont fournis à la fonction (Terminé, Erreur, Progression). Dans cette fonction, vous devez ajouter des écouteurs d'événements pour les notifications prises en charge par cette valeur.</msg>
  <msg name="WinJS.Promise_p:oncancel">Fonction à appeler si un consommateur de cette promesse souhaite annuler son travail non effectué. Les promesses ne sont pas obligées de prendre en charge l'annulation.</msg>
  <msg name="WinJS.Promise.addEventListener">Ajoute un écouteur d'événements au contrôle.</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">Type (nom) de l'événement.</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">Écouteur à appeler lorsque l'événement est déclenché.</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">Spécifie s'il faut initier la capture.</msg>
  <msg name="WinJS.Promise.any">Retourne une promesse qui est remplie lorsque l'une des promesses d'entrée a été réalisée.</msg>
  <msg name="WinJS.Promise.any_p:values">Tableau qui contient les objets de promesse ou les objets dont les valeurs de propriété incluent des objets de promesse.</msg>
  <msg name="WinJS.Promise.any_returnValue">Promesse qui en cours de réalisation donne la valeur de l'entrée (Terminé ou Erreur).</msg>
  <msg name="WinJS.Promise.as">Retourne une promesse. Si l'objet est déjà une promesse il est retourné ; sinon l'objet est encapsulé dans une promesse.</msg>
  <msg name="WinJS.Promise.as_p:value">Valeur à traiter comme une promesse.</msg>
  <msg name="WinJS.Promise.as_returnValue">Promesse.</msg>
  <msg name="WinJS.Promise.cancel">Valeur de promesse annulée, peut être retournée à partir d'un gestionnaire d'achèvement de promesse pour indiquer l'annulation de la chaîne de promesse.</msg>
  <msg name="WinJS.Promise.dispatchEvent">Déclenche un événement du type et des propriétés spécifiés.</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">Ensemble des propriétés supplémentaires à attacher à l'objet événement.</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">Spécifie si preventDefault a été appelé sur l'événement.</msg>
  <msg name="WinJS.Promise.is">Détermine si une valeur atteint le contrat de promesse.</msg>
  <msg name="WinJS.Promise.is_p:value">Valeur qui peut être une promesse.</msg>
  <msg name="WinJS.Promise.is_returnValue">True si la valeur spécifiée est une promesse, sinon False.</msg>
  <msg name="WinJS.Promise.join">Crée une promesse qui est remplie lorsque toutes les valeurs sont accomplies.</msg>
  <msg name="WinJS.Promise.join_p:values">Objet dont les champs contiennent des valeurs, dont certaines peuvent être les promesses.</msg>
  <msg name="WinJS.Promise.join_returnValue">Promesse dont la valeur est un objet avec les mêmes noms de champ que l'objet dans le paramètre de valeurs, où chaque valeur de champ est la valeur remplie d'une promesse.</msg>
  <msg name="WinJS.Promise.removeEventListener">Supprime un écouteur d'événements du contrôle.</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">Écouteur à supprimer.</msg>
  <msg name="WinJS.Promise.then">Version statique de la méthode d'instance then() de promesse.</msg>
  <msg name="WinJS.Promise.then_p:value">Valeur à traiter comme une promesse.</msg>
  <msg name="WinJS.Promise.then_p:complete">Fonction à appeler si la promesse est remplie avec une valeur. Si elle est Null, la promesse retourne simplement la valeur. La valeur est passée comme argument unique.</msg>
  <msg name="WinJS.Promise.then_p:error">Fonction à appeler si la promesse est réalisée avec une erreur. L'erreur est passée comme argument unique.</msg>
  <msg name="WinJS.Promise.then_returnValue">Promesse dont la valeur est le résultat de l'exécution de la fonction Terminé fournie.</msg>
  <msg name="WinJS.Promise.thenEach">Effectue une opération sur toutes les promesses d'entrée et retourne une promesse qui a la forme d'une entrée et contient le résultat de l'opération qui a été exécutée sur chaque entrée.</msg>
  <msg name="WinJS.Promise.thenEach_p:values">Ensemble de valeurs (qui peut être un tableau ou un objet) dont certaines ou toutes sont des promesses.</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">Fonction à appeler si la promesse est remplie avec une valeur. Si la valeur est null, la promesse retourne la valeur. La valeur est passée comme argument unique.</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">Promesse qui est le résultat de l'appel Promise.join sur le paramètre de valeurs.</msg>
  <msg name="WinJS.Promise.timeout">Crée une promesse qui est accomplie après un délai d'attente.</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">Délai d'attente, en millisecondes. Si cette valeur est zéro ou non spécifiée, setImmediate est appelé, sinon setTimeout est appelé.</msg>
  <msg name="WinJS.Promise.timeout_p:promise">Promesse qui sera annulée si elle ne se termine pas avant que le délai d'attente a expiré.</msg>
  <msg name="WinJS.Promise.timeout_returnValue">Promesse qui est effectuée de façon asynchrone après le délai d'attente spécifié.</msg>
  <msg name="WinJS.Promise.wrap">Encapsule une valeur de non promesse dans une promesse. Vous pouvez utiliser cette fonction si vous devez passer une valeur à une fonction qui requiert une promesse.</msg>
  <msg name="WinJS.Promise.wrap_p:value">Valeur de non promesse à encapsuler dans une promesse.</msg>
  <msg name="WinJS.Promise.wrap_returnValue">Promesse qui est correctement réalisée avec la valeur spécifiée</msg>
  <msg name="WinJS.Promise.wrapError">Encapsule une valeur d'erreur de non promesse dans une promesse. Vous pouvez utiliser cette fonction si vous devez passer une erreur à une fonction qui requiert une promesse.</msg>
  <msg name="WinJS.Promise.wrapError_p:error">Valeur d'erreur de non promesse à encapsuler dans une promesse.</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">Promesse qui est en état d'erreur avec la valeur spécifiée.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">Obtient une valeur indiquant si le travail est terminé. Cette valeur est True si le travail est terminé et False s'il n'a pas encore été exécuté ou a été annulé.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">Obtient l'identificateur unique pour ce travail.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">Obtient ou définit une chaîne qui spécifie le nom du diagnostic pour ce travail.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">Obtient un jeton de propriétaire pour le travail. Vous pouvez utiliser la méthode cancelAll du jeton de propriétaire pour annuler les travaux associés.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">Obtient ou définit la priorité à laquelle le travail est exécuté par le planificateur.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">Annule le travail.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">Suspend le travail.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">Reprend le travail s'il a été suspendu.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">L'instance de travail pour laquelle le travail est exécuté actuellement.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">Valeur booléenne qui devient True lorsque le planificateur demande à l'élément de travail de céder de manière coopérative.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">Appelé(e) lorsque l'élément de travail est bloqué sur un travail asynchrone. Le planificateur attend que la promesse spécifiée soit terminée avant de replanifier le travail.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">Valeur de promesse qui, une fois terminée, fournit une fonction d'élément de travail à replanifier.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">Appelé(e) lorsque l'élément de travail cède de manière coopérative au planificateur et a plus de travail à exécuter à l'avenir. Utilisez cette méthode pour planifier le travail supplémentaire lorsque l'élément de travail est sur le point de céder.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">Fonction de travail qui sera replanifiée.</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">Annule tous les travaux associés à ce jeton de propriétaire.</msg>
  <msg name="WinJS.ErrorFromName">Crée un objet d'erreur avec les propriétés spécifiées de nom et de message.</msg>
  <msg name="WinJS.ErrorFromName_p:name">Nom de cette erreur. Le nom est destiné à être utilisé par un programme et ne doit pas être localisé.</msg>
  <msg name="WinJS.ErrorFromName_p:message">Message pour cette erreur. Le message est destiné à être utilisé par les humains et doit être localisé.</msg>
  <msg name="WinJS.ErrorFromName_returnValue">Instance d'erreur avec les propriétés .name et .message remplies</msg>
  <msg name="WinJS.Utilities.QueryCollection">Représente le résultat d'un sélecteur de requête, et fournit diverses opérations qui exécutent des actions sur les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">Éléments provenant de la requête.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">Exécute une action sur chaque élément dans la QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">Action à exécuter sur chaque élément.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">Argument à lier à callbackFn</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">Retourne la QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">Obtient un élément de la QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">L'index de l'élément à retourner.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">Élément unique de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">Définit une valeur d'attribut sur tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">Nom de l'attribut à définir.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">Valeur de l'attribut à définir.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">Cet objet QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">Obtient une valeur d'attribut du premier élément de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">Nom de l'attribut.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">Valeur de l'attribut.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">Ajoute la classe spécifiée à tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">Nom de la classe à ajouter.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">Détermine si la classe spécifiée existe sur le premier élément de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">Nom de la classe.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">True si l'élément possède la classe spécifiée ; sinon, False.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">Supprime la classe spécifiée de tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">Nom de la classe à supprimer.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">Bascule (ajoute ou supprime) la classe spécifiée sur tous les éléments de la collection. Si la classe est présente, elle est supprimée ; si elle est absente, elle est ajoutée.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">Nom de la classe à basculer.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">Inscrit l'écouteur pour l'événement spécifié sur tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">Nom de l’événement.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">Fonction du gestionnaire d'événements à appeler lorsque l'événement se produit.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">True si capture == true doit être passée à addEventListener ; sinon, False.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">Annule l'inscription de l'écouteur pour l'événement spécifié sur tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">Fonction du gestionnaire d'événements.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">True si capture== true ; sinon, False.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">Définit la propriété de style spécifiée pour tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">Nom de la propriété de style.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">Valeur de la propriété.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">Efface la propriété de style spécifiée pour tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">Nom de la propriété de style à effacer.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">Exécute un sélecteur de requête sur tous les éléments de la collection et regroupe le résultat dans une QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">Chaîne du sélecteur de requête.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">Objet de QueryCollection qui contient les résultats d'agrégation de l'exécution de la requête sur tous les éléments de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">Ajoute un ensemble d'éléments à cette QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">Éléments à ajouter à cette QueryCollection. Il peut s'agir d'un objet de type tableau, d'un fragment de document, ou d'un seul élément.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">Crée des contrôles qui sont liés aux éléments dans cette QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">Fonction constructeur qui est utilisée pour créer des contrôles à attacher aux éléments.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">Options passées aux contrôles récemment créés.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">Configure les contrôles qui sont liés aux éléments dans cette QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">Options passées aux contrôles.</msg>
  <msg name="WinJS.UI.HtmlControl">Vous permet d'inclure une page HTML dynamiquement.</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">Initialise une nouvelle instance de HtmlControl pour définir un nouveau contrôle de page.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">Élément qui héberge le HtmlControl.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">Options pour configurer la page. L'option d'URI est requise pour spécifier le document source pour le contenu de la page.</msg>
  <msg name="WinJS.UI.TabContainer.constructor">Construit le TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">Élément DOM à associer au TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">Ensemble d'options à appliquer au départ au TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">TabContainer construit.</msg>
  <msg name="WinJS.UI.TabContainer.dispose">Supprime le conteneur de l'onglet.</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">Obtient ou définit l'élément enfant qui a le focus.</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">Obtient ou définit l'ordre de tabulation du contrôle dans son conteneur.</msg>
  <msg name="WinJS.Application.IOHelper.exists">Détermine si le fichier spécifié existe dans le conteneur</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">Fichier qui peut exister dans ce dossier</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">Promesse avec la valeur True (le fichier existe) ou False.</msg>
  <msg name="WinJS.Application.IOHelper.remove">Supprime un fichier dans le conteneur</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">Fichier à supprimer</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">Promesse qui est remplie lorsque le fichier a été supprimé</msg>
  <msg name="WinJS.Application.IOHelper.writeText">Écrit un fichier dans le conteneur avec le texte spécifié</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">Fichier dans lequel écrire</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">Contenu à écrire dans le fichier</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">Promesse avec le nombre de caractères écrits</msg>
  <msg name="WinJS.Application.IOHelper.readText">Lit le contenu d'un fichier du conteneur, si le fichier n'existe pas, def est retourné.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">Fichier à partir duquel lire</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">Valeur par défaut à retourner si le fichier n'a pas pu s'ouvrir</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">Promesse contenant le contenu du fichier, ou def.</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">Nom de fichier qui peut exister dans ce dossier</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">Supprime un fichier dans le conteneur</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">Nom du fichier dans lequel écrire.</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">Fichier à partir duquel lire</msg>
  <msg name="WinJS.Binding.observableMixin.bind">Lie l'action spécifiée dans la propriété spécifiée dans le paramètre name. Cette fonction est appelée quand la valeur de la propriété peut avoir été modifiée. Il n'est pas garanti que l'action sera appelée uniquement lorsqu'une valeur a réellement changé, ni que l'action sera appelée pour chaque modification de valeur. L'implémentation de cette fonction fusionne des notifications de modifications, de manière que plusieurs mises à jour à une valeur de propriété peuvent entraîner un seul appel à l'action spécifiée.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">Nom de la propriété à laquelle lier l'action.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">Fonction à appeler de façon asynchrone lorsque la propriété a peut-être changé.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">L'objet est retourné.</msg>
  <msg name="WinJS.Binding.Template.constructor">Crée un modèle qui fournit un élément de liaison réutilisable déclaratif.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">Élément DOM à convertir en modèle.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">Si ce paramètre est fourni, le modèle est chargé de l'URI et le contenu du paramètre d'élément est ignoré.</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">Si elle est spécifiée, cette fonction est utilisée comme initialiseur par défaut pour toutes les liaisons de données qui n'en spécifient pas une explicitement. La fonction fournie doit être marquée comme prise en charge pour le traitement.</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">Indique si un modèle doit produire un arrêt du débogueur au premier affichage</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">Définissez cette propriété sur True pour rétablir le traitement du modèle et la liaison de données classiques, et désactiver la compilation de modèle.</msg>
  <msg name="WinJS.Binding.Template.element">Obtient l'élément DOM qui est utilisé comme modèle.</msg>
  <msg name="WinJS.Binding.Template.extractChild">Retournez le premier enfant de l'élément du modèle au lieu d'un élément wrapper hébergeant tout le contenu du modèle.</msg>
  <msg name="WinJS.Binding.Template.processTimeout">Nombre de millisecondes pour différer les contrôles déclaratifs en cours d'instanciation. Zéro (0) n'entraîne aucun délai, tout nombre négatif entraîne un délai de setImmediate, tout nombre positif est traité comme un nombre de millisecondes.</msg>
  <msg name="WinJS.Binding.Template.render">Lie les valeurs du contexte de données spécifié aux éléments qui sont des descendants de l'élément racine spécifié et ont des attributs de liaison déclaratifs (donnée-win-liaison).</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">Objet à utiliser pour la liaison de données par défaut.</msg>
  <msg name="WinJS.Binding.Template.render_p:container">Élément auquel ajouter ce modèle rendu. Si ce paramètre est omis, une nouvelle balise DIV est créée.</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">Promesse qui est terminée après que la liaison soit terminée. La valeur est l'élément spécifié dans le paramètre de conteneur ou la balise DIV créée.</msg>
  <msg name="WinJS.Binding.Template.renderItem">Restitue une instance de cette liaison de modèle aux données contenues dans l'élément. Si le paramètre recyclé est présent, et que enableRecycling est True, le modèle tente de réutiliser les éléments DOM du paramètre recyclé.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">Objet qui contient les données avec lesquelles effectuer la liaison. Uniquement item.data est requis.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">Instance de modèle générée précédemment.</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">Élément DOM.</msg>
  <msg name="WinJS.Binding.Template">Fournit un élément de liaison réutilisable déclaratif.</msg>
  <msg name="WinJS.Binding.Template_name">Modèle</msg>
  <msg name="WinJS.Binding.List.constructor">Crée un objet WinJS.Binding.List.</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">Tableau contenant les éléments pour initialiser la liste.</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">Si options.binding a la valeur True, la liste contient le résultat de l'appel de WinJS.Binding. as() sur les valeurs de l'élément. Si options.proxy a la valeur True, la liste spécifiée comme premier paramètre est utilisée comme stockage pour WinJS.Binding.List. Cette option doit être utilisée avec précaution car les modifications non coordonnées au stockage des données produiront des erreurs.</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">Instance récemment développée de WinJS.Binding.List.</msg>
  <msg name="WinJS.Binding.List.length">Obtient ou définit la longueur de la liste, qui est une valeur entière une fois plus élevée que l'élément le plus élevé défini dans la liste.</msg>
  <msg name="WinJS.Binding.List.getItem">Obtient une paire clé/données pour l'index de liste spécifié.</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">Index de la valeur à récupérer.</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">Objet avec les propriétés .key et .data.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">Obtient une paire clé/données pour la clé d'élément de liste spécifiée.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">Clé de la valeur à extraire.</msg>
  <msg name="WinJS.Binding.List.indexOfKey">Obtient l'index de la première occurrence d'une clé dans une liste.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">Clé à rechercher dans la liste.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">Index de la première occurrence d'une clé dans une liste ou -1 si non trouvé.</msg>
  <msg name="WinJS.Binding.List.move">Déplace la valeur à l'index à la position spécifiée.</msg>
  <msg name="WinJS.Binding.List.move_p:index">Index d'origine de la valeur.</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">Index de la valeur après le déplacement.</msg>
  <msg name="WinJS.Binding.List.notifyMutated">Force la liste à envoyer une notification itemmutated à tous les écouteurs pour la valeur à l'index spécifié.</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">Index de la valeur qui a été mutée.</msg>
  <msg name="WinJS.Binding.List.setAt">Remplace la valeur à l'index spécifié par une nouvelle valeur.</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">Index de la valeur qui a été remplacée.</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">Nouvelle valeur.</msg>
  <msg name="WinJS.Binding.List.reverse">Retourne une liste dans laquelle les éléments sont inversés. Cette méthode inverse les éléments d'un objet de liste existant. Aucun nouvel objet de liste n'est créé pendant l'exécution.</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">Liste inversée.</msg>
  <msg name="WinJS.Binding.List.sort">Retourne une liste dans laquelle les éléments sont triés. Cette méthode trie les éléments d'un objet de liste existant. Aucun nouvel objet de liste n'est créé pendant l'exécution.</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">Fonction employée pour déterminer l'ordre des éléments. Si omise, les éléments sont triés en ordre croissant de caractères ASCII.</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">Liste triée.</msg>
  <msg name="WinJS.Binding.List.pop">Supprime le dernier élément d'une liste et le retourne.</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">Dernier élément de la liste.</msg>
  <msg name="WinJS.Binding.List.push">Ajoute un ou plusieurs nouveaux éléments à une liste et retourne la nouvelle longueur de la liste.</msg>
  <msg name="WinJS.Binding.List.push_p:value">Élément à insérer à la fin de la liste.</msg>
  <msg name="WinJS.Binding.List.push_returnValue">Nouvelle longueur de la liste.</msg>
  <msg name="WinJS.Binding.List.shift">Supprime le premier élément d'une liste et le retourne.</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">Premier élément de la liste.</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">Élément à insérer au début de la liste.</msg>
  <msg name="WinJS.Binding.List.splice">Supprime les éléments d'une liste et, si nécessaire, insère de nouveaux éléments à leur place, tout en retournant les éléments supprimés.</msg>
  <msg name="WinJS.Binding.List.splice_p:start">Dans la liste, emplacement de base zéro à partir duquel la suppression des éléments commence.</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">Nombre d'éléments à supprimer.</msg>
  <msg name="WinJS.Binding.List.splice_p:item">Éléments à insérer dans la liste à la place des éléments supprimés.</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">Éléments supprimés.</msg>
  <msg name="WinJS.Namespace.defineWithParent">Définit un nouvel espace de noms portant le nom spécifié dans l'espace de noms parent spécifié.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">Espace de noms parent.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">Nom du nouvel espace de noms.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">Membres du nouvel espace de noms.</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">Espace de noms récemment défini.</msg>
  <msg name="WinJS.Namespace.define">Définit un nouvel espace de noms portant le nom spécifié.</msg>
  <msg name="WinJS.Namespace.define_p:name">Nom de l'espace de noms. Il peut s'agir d'un nom séparé par des points pour les espaces de noms imbriqués.</msg>
  <msg name="WinJS.Class.define">Définit une classe à l'aide du constructeur donné et des membres d'instance spécifiés.</msg>
  <msg name="WinJS.Class.define_p:constructor">Fonction constructeur qui est utilisée pour instancier cette classe.</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">Ensemble de champs, propriétés et méthodes d'instance rendus disponibles sur la classe.</msg>
  <msg name="WinJS.Class.define_p:staticMembers">Ensemble de champs, propriétés et méthodes statiques rendus disponibles sur la classe.</msg>
  <msg name="WinJS.Class.define_returnValue">Classe définie récemment.</msg>
  <msg name="WinJS.Class.derive">Crée une sous-classe selon le paramètre baseClass fourni, à l'aide de l'héritage de prototype.</msg>
  <msg name="WinJS.Class.derive_p:baseClass">Classe de laquelle hériter.</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">Ensemble de champs, propriétés et méthodes d'instance devant être rendus disponibles sur la classe.</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">Ensemble de champs, propriétés et méthodes statiques devant être rendus disponibles sur la classe.</msg>
  <msg name="WinJS.Class.mix">Définit une classe à l'aide du constructeur donné et de l'union de l'ensemble des membres d'instance spécifiés par tous les objets Mixin. La liste de paramètres Mixin est de longueur variable.</msg>
  <msg name="WinJS.Utilities.hasWinRT">Détermine si WinRT est accessible dans ce contexte de script.</msg>
  <msg name="WinJS.Utilities.getMember">Obtient le type ou l'espace de noms de niveau feuille spécifié par le paramètre Name.</msg>
  <msg name="WinJS.Utilities.getMember_p:name">Nom du membre.</msg>
  <msg name="WinJS.Utilities.getMember_p:root">Racine de laquelle démarrer. Valeurs par défaut à l'objet global.</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">Type ou espace de noms de niveau feuille dans l'espace de noms parent spécifié.</msg>
  <msg name="WinJS.Utilities.ready">Garantit que la fonction spécifiée s'exécute uniquement après que l'événement DOMContentLoaded l'a déclenché pour la page active.</msg>
  <msg name="WinJS.Utilities.ready_returnValue">Promesse qui se termine après que DOMContentLoaded se soit produit.</msg>
  <msg name="WinJS.Utilities.ready_p:callback">Fonction qui s'exécute après que DOMContentLoaded se soit produit.</msg>
  <msg name="WinJS.Utilities.ready_p:async">Si la valeur est True, le rappel doit être exécuté de façon asynchrone.</msg>
  <msg name="WinJS.Utilities.strictProcessing">Détermine si un traitement déclaratif strict est activé dans ce contexte de script.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">Marque une fonction comme étant compatible avec le traitement déclaratif, comme WinJS.UI.processAll ou WinJS.Binding.processAll.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">Fonction à marquer comme compatible avec le traitement déclaratif.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">Fonction d'entrée.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">Déclare que la valeur est compatible avec le traitement déclaratif, comme WinJS.UI.processAll ou WinJS.Binding.processAll. Si elle n'est pas compatible, une exception est levée.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">Valeur à tester pour la compatibilité avec le traitement déclaratif. Si la valeur est une fonction, elle doit être marquée avec une propriété « supportedForProcessing » avec une valeur True.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">Valeur d'entrée.</msg>
  <msg name="WinJS.strictProcessing">Le traitement Strict est toujours appliqué, cette méthode est sans effet.</msg>
  <msg name="WinJS.Utilities.formatLog">Ajoute des balises et un type à un message d'enregistrement.</msg>
  <msg name="WinJS.Utilities.startLog_p:message">Message à mettre en forme.</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">Balise(s) à appliquer au message. Utilisez des espaces pour séparer plusieurs balises.</msg>
  <msg name="WinJS.Utilities.startLog_p:type">Type du message.</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">Message mis en forme.</msg>
  <msg name="WinJS.Utilities.startLog">Configure un journal qui écrit des messages contenant les balises spécifiées de WinJS.log dans le console.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options">Balises pour les messages à consigner. Utilisez des espaces pour séparer plusieurs balises.</msg>
  <msg name="WinJS.Utilities.startLog2">Configure un journal pour écrire la sortie de WinJS.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">Peut contenir des propriétés .type, .tags, .excludeTags et .action. - .type est une balise requise. - .excludeTags est une liste de balises séparées pas des espaces, qui entraînent un message qui n'est pas consigné. - .tags est une liste de balises séparées pas des espaces, qui entraînent un message qui est consigné. - .action est une fonction qui, si elle est présente, sera appelée avec les balises et le type et le message de journal. La valeur par défaut consiste à consigner dans la console.</msg>
  <msg name="WinJS.Utilities.stopLog">Supprime le journal précédemment configuré.</msg>
  <msg name="WinJS.Utilities.createEventProperties">Crée un objet qui contient une propriété pour chaque nom passé à la fonction.</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">Liste variable de noms de propriété.</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">Objet avec les propriétés spécifiées. Les noms des propriétés sont précédés de « on ».</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">Si True, la capture est initiée, sinon False.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">Déclenche un événement du type spécifié et avec les autres propriétés spécifiées.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">Ensemble des propriétés supplémentaires à attacher à l'objet événement lorsque l'événement est déclenché.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">True si preventDefault est appelé sur l'événement.</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">Spécifie s'il faut initier la capture.</msg>
  <msg name="WinJS.Resources.addEventListener">Enregistre un gestionnaire d'événements pour l'événement spécifié.</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">Nom de l'événement à gérer.</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">Écouteur à appeler lorsque l'événement est déclenché.</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">Définie sur True pour inscrire le gestionnaire d'événements pour la phase de capture ; définie sur False pour l'inscrire pour la phase de propagation.</msg>
  <msg name="WinJS.Resources.getString">Extrait la chaîne de ressource possédant l'ID de ressource spécifiée.</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">ID de ressource de la chaîne à récupérer.</msg>
  <msg name="WinJS.Resources.getString_returnValue">Objet qui peut contenir les propriétés suivantes : valeur : Valeur de la chaîne demandée. Cette propriété est toujours présente. Vide : Valeur qui spécifie si la chaîne demandée est introuvable. Si la valeur est True, la chaîne est introuvable. Si la valeur est False ou non définie, la chaîne demandée a été trouvé. Lang : Langage de la chaîne, si spécifié. Cette propriété est uniquement présente pour des ressources multilingues.</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">Retourne la représentation sous forme de chaîne de l'état du planificateur à des fins de diagnostic. Les travaux et les demandes de vidage sont affichés dans l'ordre où ils sont actuellement supposés être traités. Les demandes actuelles de travail et de vidage sont marquées par un astérisque.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">Exécute les travaux du planificateur sans découpage du temps jusqu'à ce que tous les travaux à la priorité spécifiée et supérieure soient exécutés.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">Priorité à laquelle le planificateur doit purger. La valeur par défaut est Priority.min, qui vide tous les travaux de la file d'attente.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">Description facultative de la demande de purge à des fins de diagnostic.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">Promesse qui se termine lorsque la purge est finie. L'annulation de cette promesse annule la demande de purge. Cette promesse n'entre jamais dans un état d'erreur.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">Exécute le rappel spécifié dans un contexte de haute priorité.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">Rappel à exécuter dans un contexte de haute priorité.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">Valeur de retour du rappel.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">Crée et retourne un nouveau jeton de propriétaire qui peut être défini avec la propriété de propriétaire d'un ou de plusieurs travaux. Peut ensuite être utilisé pour annuler tout les travaux qu'il « possède ».</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">Nouveau jeton de propriétaire. Vous pouvez utiliser ce jeton pour contrôler les travaux qu'il possède.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">Planifie la fonction spécifiée pour qu'elle s'exécute de façon asynchrone.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">Fonction qui représente l'élément de travail à planifier. Lors de l'appel, l'élément de travail reçoit comme premier argument un objet JobInfo qui permet à l'élément de travail de demander au planificateur s'il cède de manière coopérative et si, tel est le cas, permet à l'élément de travail de fournir une fonction à exécuter comme continuation ou un objet WinJS.Promise qui, à la fin, fournit une fonction à exécuter comme continuation.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">Priorité à laquelle élément de travail doit être planifié. La valeur par défaut est Priority.normal.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">Instance « this » à lier dans l'élément de travail. La valeur par défaut est null.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">Description de l'élément de travail à des fins de diagnostic. La valeur par défaut est une chaîne vide.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">L'instance de travail représentant cet élément de travail.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">Planifie un travail pour qu'il termine une promesse retournée. Il existe quatre versions de cette méthode pour les différentes priorités utilisées communément : schedulePromiseHigh, schedulePromiseAboveNormal, schedulePromiseNormal, schedulePromiseBelowNormal et schedulePromiseIdle. Exemple d'utilisation qui montre comment vérifier que le dernier lien d'une chaîne de promesse s'exécute sur le planificateur avec une priorité élevée : asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">Valeur à laquelle la promesse retournée s'achèvera.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">Chaîne qui décrit le travail à des fins de diagnostic.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">Promesse qui se termine au sein d'un travail de la priorité désirée.</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">Obtient la priorité actuelle à laquelle l'appelant s'exécute.</msg>
  <msg name="WinJS.xhr">Encapsule des appels à XMLHttpRequest dans une promesse.</msg>
  <msg name="WinJS.xhr_p:options">Options appliquées à l'objet XMLHttpRequest. Elles sont : type, URL, utilisateur, mot de passe, en-têtes, responseType, données et customRequestInitializer.</msg>
  <msg name="WinJS.xhr_returnValue">Promesse qui retourne l'objet XMLHttpRequest lorsqu'elle se termine.</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">Définit la propriété innerHTML de l'élément spécifié dans le texte spécifié.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">Élément sur lequel la propriété innerHTML doit être définie.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">Valeur à attribuer à la propriété innerHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTML">Définit la propriété outerHTML de l'élément spécifié dans le texte spécifié.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">Élément sur lequel la propriété outerHTML doit être définie.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">Valeur à attribuer à la propriété outerHTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">Appelle insertAdjacentHTML sur l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">Élément sur lequel insertAdjacentHTML doit être appelé.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">Position par rapport à l'élément sur lequel insérer le code HTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">Valeur à fournir à insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">Définit la propriété outerHTML de l'élément spécifié dans le texte spécifié dans le contexte de msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">Appelle insertAdjacentHTML sur l'élément spécifié dans le contexte de msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">Valeur à fournir à insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">Définit la propriété innerHTML d'un élément au texte spécifié s'il passe un contrôle msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">Définit la propriété outerHTML d'un élément au texte spécifié s'il passe un contrôle msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">Appelle insertAdjacentHTML sur l'élément s'il passe un contrôle msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.markDisposable">Ajoute l'implémentation dispose spécifiée à l'élément défini et le marque comme supprimable.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">Élément à marquer comme supprimable.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">Fonction contenant la logique de suppression spécifique à l'élément qui sera appelée par la fonction dispose.</msg>
  <msg name="WinJS.Utilities.disposeSubTree">Supprime tous les éléments supprimables de première génération qui sont des descendants de l'élément spécifié. L'élément spécifié lui-même n'est pas supprimé.</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">L'élément racine dont le sous-arbre doit être supprimé.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">Ajoute l'ensemble d'options spécifiées de façon déclarative (les propriétés et les événements) au contrôle spécifié. Si le nom de la propriété d'options commence par « on », la valeur de propriété est une fonction et le contrôle prend en charge addEventListener. La méthode setOptions appelle la méthode addEventListener sur le contrôle.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">Contrôle sur lequel les propriétés et les événements doivent être appliqués.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">Ensemble d'options spécifiées de façon déclarative.</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">True pour initier la capture ; sinon, False.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">Déclenche un événement du type spécifié, en ajoutant les autres propriétés spécifiées.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">True si preventDefault a été appelé dans l'événement, sinon False.</msg>
  <msg name="WinJS.UI.select.createSelect">Parcourt l'arborescence DOM de l'élément donné à la racine du document, chaque fois que la portée d'un sélecteur se trouve sélectionnée, effectue une recherche dans cette portée de la chaîne de sélecteur donnée. Le premier élément correspondant est retourné.</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">Chaîne de sélection.</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">Élément cible, si trouvé.</msg>
  <msg name="WinJS.UI.processAll">Applique la liaison de contrôle déclarative à tous les éléments, en commençant à l'élément racine spécifié.</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">Élément auquel commencer à appliquer la liaison. Si ce paramètre n'est pas spécifié, la liaison est appliquée au document entier.</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">Si la valeur est True, les éléments à lier ignorent l'élément racine spécifié et incluent uniquement les enfants.</msg>
  <msg name="WinJS.UI.processAll_returnValue">Promesse qui est remplie lorsque la liaison a été appliquée à tous les contrôles.</msg>
  <msg name="WinJS.UI.process">Applique la liaison de contrôle déclaratif à l'élément spécifié.</msg>
  <msg name="WinJS.UI.process_p:element">Élément à lier.</msg>
  <msg name="WinJS.UI.process_returnValue">Promesse qui est accomplie après que le contrôle soit activé. La valeur de la promesse est le contrôle associé à l'élément.</msg>
  <msg name="WinJS.Utilities.query">Exécute un sélecteur de requête sur l'élément spécifié ou le document entier.</msg>
  <msg name="WinJS.Utilities.query_p:query">Sélecteur de requête à exécuter.</msg>
  <msg name="WinJS.Utilities.query_p:element">Élément sur lequel exécuter la requête. Si ce paramètre n'est pas spécifié, la requête est exécutée dans le document entier.</msg>
  <msg name="WinJS.Utilities.query_returnValue">QueryCollection qui contient les résultats de la requête.</msg>
  <msg name="WinJS.Utilities.id">Recherche un élément par ID et encapsule le résultat dans une QueryCollection.</msg>
  <msg name="WinJS.Utilities.id_p:id">ID de l'élément.</msg>
  <msg name="WinJS.Utilities.id_returnValue">QueryCollection qui contient l'élément, s'il est trouvé.</msg>
  <msg name="WinJS.Utilities.children">Crée une QueryCollection qui contient les enfants de l'élément parent spécifié.</msg>
  <msg name="WinJS.Utilities.children_p:element">Élément parent.</msg>
  <msg name="WinJS.Utilities.children_returnValue">QueryCollection qui contient les enfants de l'élément.</msg>
  <msg name="WinJS.Utilities.Key">Définit un ensemble de valeurs de clavier.</msg>
  <msg name="WinJS.Utilities.Key.backspace">Touche RETOUR ARRIÈRE.</msg>
  <msg name="WinJS.Utilities.Key.tab">Touche TAB.</msg>
  <msg name="WinJS.Utilities.Key.enter">Touche ENTRÉE.</msg>
  <msg name="WinJS.Utilities.Key.shift">Touche Maj.</msg>
  <msg name="WinJS.Utilities.Key.ctrl">Touche CTRL.</msg>
  <msg name="WinJS.Utilities.Key.alt">Touche ALT</msg>
  <msg name="WinJS.Utilities.Key.pause">Touche Pause.</msg>
  <msg name="WinJS.Utilities.Key.capsLock">Touche VERR. MAJ.</msg>
  <msg name="WinJS.Utilities.Key.escape">Touche ÉCHAP.</msg>
  <msg name="WinJS.Utilities.Key.space">Touche ESPACE.</msg>
  <msg name="WinJS.Utilities.Key.pageUp">Touche PG.PRÉC.</msg>
  <msg name="WinJS.Utilities.Key.pageDown">Touche PG.SUIV.</msg>
  <msg name="WinJS.Utilities.Key.end">Touche FIN.</msg>
  <msg name="WinJS.Utilities.Key.home">Touche DÉBUT.</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">Flèche Gauche.</msg>
  <msg name="WinJS.Utilities.Key.upArrow">Touche HAUT.</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">Flèche Droite.</msg>
  <msg name="WinJS.Utilities.Key.downArrow">Flèche Bas.</msg>
  <msg name="WinJS.Utilities.Key.insert">Touche INSER.</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">Touche SUPPR.</msg>
  <msg name="WinJS.Utilities.Key.num0">Touche 0 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num1">Touche 1 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num2">Touche 2 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num3">Touche 3 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num4">Touche 4 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num5">Touche 5 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num6">Touche 6 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num7">Touche 7 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num8">Touche 8 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.num9">Touche 9 du clavier.</msg>
  <msg name="WinJS.Utilities.Key.a">Touche A.</msg>
  <msg name="WinJS.Utilities.Key.b">Touche B.</msg>
  <msg name="WinJS.Utilities.Key.c">Touche C.</msg>
  <msg name="WinJS.Utilities.Key.d">Touche D.</msg>
  <msg name="WinJS.Utilities.Key.e">Touche E.</msg>
  <msg name="WinJS.Utilities.Key.f">Touche F.</msg>
  <msg name="WinJS.Utilities.Key.g">Touche G.</msg>
  <msg name="WinJS.Utilities.Key.h">Touche H.</msg>
  <msg name="WinJS.Utilities.Key.i">Touche I.</msg>
  <msg name="WinJS.Utilities.Key.j">Touche J.</msg>
  <msg name="WinJS.Utilities.Key.k">Touche K.</msg>
  <msg name="WinJS.Utilities.Key.l">Touche L.</msg>
  <msg name="WinJS.Utilities.Key.m">Touche M.</msg>
  <msg name="WinJS.Utilities.Key.n">Touche N.</msg>
  <msg name="WinJS.Utilities.Key.o">Touche O.</msg>
  <msg name="WinJS.Utilities.Key.p">Touche P.</msg>
  <msg name="WinJS.Utilities.Key.q">Touche Q.</msg>
  <msg name="WinJS.Utilities.Key.r">Touche R.</msg>
  <msg name="WinJS.Utilities.Key.s">Touche S.</msg>
  <msg name="WinJS.Utilities.Key.t">Touche T.</msg>
  <msg name="WinJS.Utilities.Key.u">Touche U.</msg>
  <msg name="WinJS.Utilities.Key.v">Touche V.</msg>
  <msg name="WinJS.Utilities.Key.w">Touche W.</msg>
  <msg name="WinJS.Utilities.Key.x">Touche X.</msg>
  <msg name="WinJS.Utilities.Key.y">Touche Y.</msg>
  <msg name="WinJS.Utilities.Key.z">Touche Z.</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">Touche Windows gauche.</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">Touche Windows droite.</msg>
  <msg name="WinJS.Utilities.Key.menu">Touche Menu.</msg>
  <msg name="WinJS.Utilities.Key.numPad0">Touche 0 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad1">Touche 1 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad2">Touche 2 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad3">Touche 3 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad4">Touche 4 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad5">Touche 5 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad6">Touche 6 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad7">Touche 7 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad8">Touche 8 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.numPad9">Touche 9 du pavé numérique</msg>
  <msg name="WinJS.Utilities.Key.multiply">Touche Multiplication.</msg>
  <msg name="WinJS.Utilities.Key.add">Touche Addition.</msg>
  <msg name="WinJS.Utilities.Key.subtract">Touche Soustraction.</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">Touche Virgule décimale.</msg>
  <msg name="WinJS.Utilities.Key.divide">Touche Division.</msg>
  <msg name="WinJS.Utilities.Key.F1">Touche F1.</msg>
  <msg name="WinJS.Utilities.Key.F2">Touche F2.</msg>
  <msg name="WinJS.Utilities.Key.F3">Touche F3.</msg>
  <msg name="WinJS.Utilities.Key.F4">Touche F4.</msg>
  <msg name="WinJS.Utilities.Key.F5">Touche F5.</msg>
  <msg name="WinJS.Utilities.Key.F6">Touche F6.</msg>
  <msg name="WinJS.Utilities.Key.F7">Touche F7.</msg>
  <msg name="WinJS.Utilities.Key.F8">Touche F8.</msg>
  <msg name="WinJS.Utilities.Key.F9">Touche F9.</msg>
  <msg name="WinJS.Utilities.Key.F10">Touche F10.</msg>
  <msg name="WinJS.Utilities.Key.F11">Touche F11.</msg>
  <msg name="WinJS.Utilities.Key.F12">Touche F12.</msg>
  <msg name="WinJS.Utilities.Key.numLock">Touche VERR. NUM.</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">Touche ARRÊT DÉFIL</msg>
  <msg name="WinJS.Utilities.Key.browserBack">Touche Précédent du navigateur.</msg>
  <msg name="WinJS.Utilities.Key.browserForward">Touche Suivant du navigateur.</msg>
  <msg name="WinJS.Utilities.Key.semicolon">Touche POINT VIRGULE.</msg>
  <msg name="WinJS.Utilities.Key.equal">Touche ÉGAL.</msg>
  <msg name="WinJS.Utilities.Key.comma">Touche VIRGULE.</msg>
  <msg name="WinJS.Utilities.Key.dash">Touche TIRET.</msg>
  <msg name="WinJS.Utilities.Key.period">Touche POINT.</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">Touche BARRE OBLIQUE.</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">Touche Accent grave.</msg>
  <msg name="WinJS.Utilities.Key.openBracket">Touche CROCHET D'OUVERTURE.</msg>
  <msg name="WinJS.Utilities.Key.backSlash">Touche BARRE OBLIQUE INVERSE.</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">Touche CROCHET DE FERMETURE.</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">Touche APOSTROPHE.</msg>
  <msg name="WinJS.Utilities.data">Obtient la valeur de données associée à l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.data_p:element">Élément.</msg>
  <msg name="WinJS.Utilities.data_returnValue">Valeur associée à l'élément.</msg>
  <msg name="WinJS.Utilities.hasClass">Détermine si l'élément spécifié a la classe spécifiée.</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">True si l'élément spécifié contient la classe spécifiée ; sinon, False.</msg>
  <msg name="WinJS.Utilities.addClass">Ajoute la ou les classes spécifiées à l'élément spécifié. Plusieurs classes peuvent être ajoutées à l'aide de noms délimités par des espaces.</msg>
  <msg name="WinJS.Utilities.addClass_p:e">Élément auquel ajouter la classe.</msg>
  <msg name="WinJS.Utilities.addClass_p:name">Nom de la classe à ajouter, plusieurs classes peuvent être ajoutées à l'aide de noms délimités par des espaces</msg>
  <msg name="WinJS.Utilities.removeClass">Supprime la classe spécifiée de l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">Élément à partir duquel supprimer la classe.</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">Nom de la classe à supprimer.</msg>
  <msg name="WinJS.Utilities.toggleClass">Bascule (ajoute ou supprime) la classe spécifiée dans l'élément spécifié. Si la classe est présente, elle est supprimée ; si elle est absente, elle est ajoutée.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">Élément sur lequel basculer la classe .</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">Nom de la classe à basculer.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">Obtient la coordonnée gauche de l'élément spécifié par rapport au parent spécifié.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">Coordonnée gauche relative.</msg>
  <msg name="WinJS.Utilities.getRelativeTop">Obtient la coordonnée supérieure de l'élément par rapport au parent spécifié.</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">Coordonnée supérieure relative.</msg>
  <msg name="WinJS.Utilities.empty">Supprime tous les nœuds enfants de l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.getContentWidth">Obtient la largeur du contenu de l'élément spécifié. La largeur du contenu n'inclut pas les bordures ou le remplissage.</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">Largeur initiale de l'élément.</msg>
  <msg name="WinJS.Utilities.getTotalWidth">Obtient la largeur de l’élément, y compris les marges.</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">Largeur de l’élément, y compris les marges.</msg>
  <msg name="WinJS.Utilities.getContentHeight">Obtient la hauteur du contenu de l'élément spécifié. La hauteur du contenu n'inclut pas les bordures ou le remplissage.</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">Hauteur du contenu de l'élément.</msg>
  <msg name="WinJS.Utilities.getTotalHeight">Obtient la hauteur de l'élément, y compris ses marges.</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">Hauteur de l’élément, y compris les marges.</msg>
  <msg name="WinJS.Utilities.getPosition">Obtient la position de l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">Objet qui contient les propriétés gauche, haut, largeur et hauteur de l'élément.</msg>
  <msg name="WinJS.Utilities.convertToPixels">Convertit une chaîne de positionnement CSS pour l'élément spécifié en pixels.</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">Chaîne de positionnement CSS.</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">Nombre de pixels.</msg>
  <msg name="WinJS.Utilities.eventWithinElement">Détermine si l'événement spécifié s'est produit dans l'élément spécifié.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">Événement.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">True si l'événement s'est produit dans l'élément ; sinon, False.</msg>
  <msg name="WinJS.UI.Pages.dispose">Supprime cette page.</msg>
  <msg name="WinJS.UI.Pages._mixin.load">Crée une copie des éléments DOM de l'URI spécifié. Pour que cette substitution soit utilisée, la page qui contient la substitution de chargement doit être définie en appelant WinJS.UI.Pages. define() avant que WinJS.UI.Pages. render() soit appelé.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">URI à partir duquel les éléments DOM doivent être copiés.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">Promesse dont la valeur remplie est l'ensemble d'éléments DOM non apparentés, si le traitement asynchrone est nécessaire. Dans le cas contraire, rien n'est retourné.</msg>
  <msg name="WinJS.UI.Pages._mixin.init">Initialise le contrôle avant que le contenu du contrôle soit défini. Utilisez la méthode traitée pour toute initialisation qui doit être effectuée après que le contenu du contrôle a été défini.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">Élément DOM qui contiendra tout le contenu de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">Options passées au constructeur de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">Promesse qui est remplie lorsque l'initialisation est terminée, si le traitement asynchrone est nécessaire. Dans le cas contraire, rien n'est retourné.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">Initialise le contrôle après que le contenu du contrôle soit défini.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">Options qui doivent être passés au constructeur de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.render">Restitue le contrôle, généralement en ajoutant les éléments spécifiés dans le paramètre loadResult à l'élément spécifié.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">Options passées dans le constructeur de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">Éléments retournés par la méthode de chargement.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">Promesse qui est remplie lorsque la restitution est terminée, si le traitement asynchrone est nécessaire. Dans le cas contraire, rien n'est retourné.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">Appelé une fois l'initialisation et la restitution entièrement terminées. À ce stade l'élément est opérationnel.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">Élément DOM qui contient tout le contenu de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">Options passées dans le constructeur de la page</msg>
  <msg name="WinJS.UI.Pages._mixin.error">Appelé si une erreur se produit pendant le traitement de la page.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">Erreur qui s'est produite.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">Rien si l'erreur a été gérée, ou une promesse d'erreur si l'erreur n'a pas été gérée.</msg>
  <msg name="WinJS.UI.Pages.define">Crée un contrôle de la page de l'URI spécifié qui contient les membres spécifiés. Plusieurs appels à cette méthode pour le même URI sont autorisés, et tous les membres sont fusionnés.</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">URI du contenu qui définit la page.</msg>
  <msg name="WinJS.UI.Pages.define_p:members">Membres supplémentaires que le contrôle aura.</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">Fonction constructeur qui crée la page.</msg>
  <msg name="WinJS.UI.Pages.get">Obtient un contrôle de page déjà défini pour l'URI spécifié, ou en crée un.</msg>
  <msg name="WinJS.UI.Pages.render">Crée un contrôle de la page de l'URI spécifié dans l'élément spécifié avec les options spécifiées.</msg>
  <msg name="WinJS.UI.Pages.render_p:element">Élément à remplir avec la page.</msg>
  <msg name="WinJS.UI.Pages.render_p:options">Options pour configurer la page.</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">Promesse qui est remplie lorsque l'élément spécifié est apparenté au document final.</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">Promesse qui est accomplie après restitution de la page.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">Copie le contenu de l'URI spécifié dans l'élément spécifié.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">URI qui contient le fragment à copier.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">Élément auquel le fragment est ajouté.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">Promesse qui est remplie lorsque le fragment a été chargé. Si un élément cible n'est pas spécifié, le fragment copié est la valeur terminée.</msg>
  <msg name="WinJS.UI.Fragments.cache">Démarre le chargement du fragment à l'emplacement spécifié. La promesse retournée se termine lorsque le fragment est prêt à être copié.</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">URI qui contient le fragment à copier.</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">Promesse qui est remplie lorsque le fragment a été préparé pour la copie.</msg>
  <msg name="WinJS.UI.Fragments.clearCache">Supprime toutes les informations mises en cache sur le fragment spécifié. Cette méthode ne décharge aucun script ou style qui est référencé par le fragment.</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">URI qui contient le fragment à effacer. Si aucun URI n'est fourni, le contenu entier du cache est effacé.</msg>
  <msg name="WinJS.UI.isAnimationEnabled">Détermine si la bibliothèque d'animations de WinJS exécutera des animations.</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">True si les animations de WinJS sont exécutées. False si les animations de WinJS sont supprimées.</msg>
  <msg name="WinJS.UI.disableAnimations">Désactive les animations dans la bibliothèque d'animations de WinJS en décrémentant le nombre d'activation d'animation.</msg>
  <msg name="WinJS.UI.enableAnimations">Active les animations dans la bibliothèque d'animations de WinJS en incrémentant le nombre d'activation d'animation.</msg>
  <msg name="WinJS.UI.executeAnimation">Exécute une animation CSS qui peut coexister avec d'autres animations de la bibliothèque d'animations. Les applications ne sont pas destinées à appeler cette fonction directement ; elles doivent préférer l'utilisation des animations de niveau supérieur dans la bibliothèque d'animations.</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">Élément unique ou collection d'éléments dans lesquels exécuter une animation CSS.</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">Description d'animation unique ou tableau de descriptions d'animation.</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">Objet de promesse qui se termine lorsque l'animation CSS est terminée.</msg>
  <msg name="WinJS.UI.executeTransition">Exécute une transition CSS qui peut coexister avec d'autres animations de la bibliothèque d'animations. Les applications ne sont pas destinées à appeler cette fonction directement ; elles doivent préférer l'utilisation des animations de niveau supérieur dans la bibliothèque d'animations.</msg>
  <msg name="WinJS.UI.executeTransition_p:element">Élément unique ou collection d'éléments dans lesquels exécuter une transition CSS.</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">Description de transition unique ou tableau de descriptions de transition.</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">Objet de promesse qui se termine lorsque la transition CSS est terminée.</msg>
  <msg name="WinJS.UI.eventHandler">Marque une fonction de gestionnaire d'événements comme étant compatible avec le traitement déclaratif.</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">Gestionnaire à marquer comme compatible avec le traitement déclaratif.</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">Gestionnaire d'entrée.</msg>
  <msg name="WinJS.UI.Orientation">Options d'orientation de la propriété d'un contrôle</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">Vertical</msg>
  <msg name="WinJS.Application.event.setPromise">Utilisé pour informer l'objet d'application que le travail asynchrone est exécuté, et que ce gestionnaire d'événements ne doit pas être considéré comme terminé jusqu'à ce que la promesse se termine.</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">Promesse qu'il faut attendre.</msg>
  <msg name="WinJS.Application.queueEvent">Met en file d'attente un événement à traiter par la file d'attente d'événements de WinJS.Application.</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">L'objet d'événement est supposé avoir une propriété de type qui est utilisée comme nom de l'événement lors de la répartition dans la file d'attente d'événements de WinJS.Application. L'objet entier est fourni aux écouteurs d'événements dans la propriété détaillée de l'événement.</msg>
  <msg name="WinJS.Application.stop">Arrête le traitement de l'événement d'application et réinitialise WinJS.Application à son état initial.</msg>
  <msg name="WinJS.Application.checkpoint">Met en file d'attente un événement de point de contrôle.</msg>
  <msg name="WinJS.Application.start">Démarre le traitement des événements dans la file d'attente d'événements de WinJS.Application.</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">Utilisé pour informer la ListView que le travail asynchrone est exécuté, et que ce gestionnaire d'événements ne doit pas être considéré comme terminé jusqu'à ce que la promesse se termine.</msg>
  <msg name="WinJS.Navigation.canGoForward">Détermine s'il est possible de naviguer vers l'avant.</msg>
  <msg name="WinJS.Navigation.canGoBack">Détermine s'il est possible de naviguer vers l'arrière.</msg>
  <msg name="WinJS.Navigation.location">Obtient l'emplacement actuel.</msg>
  <msg name="WinJS.Navigation.state">Obtient ou définit l'état de navigation.</msg>
  <msg name="WinJS.Navigation.history">Obtient ou définit l'historique de navigation.</msg>
  <msg name="WinJS.Navigation.forward">Navigue vers l'avant.</msg>
  <msg name="WinJS.Navigation.forward_p:distance">Nombre d'entrées à revenir en arrière.</msg>
  <msg name="WinJS.Navigation.forward_returnValue">Promesse qui est terminée avec une valeur qui indique si la navigation a réussi.</msg>
  <msg name="WinJS.Navigation.back">Navigue vers l'arrière.</msg>
  <msg name="WinJS.Navigation.back_p:distance">Nombre d'entrées à revenir dans l'historique.</msg>
  <msg name="WinJS.Navigation.navigate">Navigue vers un emplacement.</msg>
  <msg name="WinJS.Navigation.navigate_p:location">Emplacement vers lequel naviguer. En général l'emplacement est une chaîne, mais il peut être n'importe quoi.</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">État de navigation accessible via WinJS.Navigation.state.</msg>
  <msg name="WinJS.Application.local">Autorise l'accès pour créer des fichiers dans le stockage local de l'application, qui est conservé entre les exécutions d'application et n'erre pas.</msg>
  <msg name="WinJS.Application.temp">Autorise l'accès pour créer des fichiers dans le stockage temporaire de l'application, qui peut être récupéré par le système entre deux exécutions d'application.</msg>
  <msg name="WinJS.Application.roaming">Autorise l'accès pour créer des fichiers dans le magasin itinérant de l'application, qui est conservé entre les exécutions d'application et erre avec l'utilisateur sur plusieurs ordinateurs.</msg>
  <msg name="WinJS.Binding.observableMixin.notify">Prévient les écouteurs qu'une valeur de propriété a été mise à jour.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">Nom de la propriété qui est mise à jour.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">Nouvelle valeur de la propriété.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">Ancienne valeur pour la propriété.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">Promesse qui est terminée lorsque les notifications sont terminées.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">Supprime un ou plusieurs écouteurs dans la liste de notification pour une propriété donnée.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">Nom de la propriété pour laquelle annuler la liaison. Si ce paramètre est omis, tous les écouteurs pour tous les événements sont supprimés.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">Fonction à supprimer de la liste d'écouteurs pour la propriété spécifiée. Si ce paramètre est omis, tous les écouteurs sont supprimés de la propriété spécifique.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">Obtient une valeur de propriété par nom.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">Nom de la propriété à obtenir.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">La valeur de la propriété a un objet observable.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">Met à jour une valeur de propriété et prévient tous les écouteurs.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">Nom de la propriété à mettre à jour.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">Nouvelle valeur de la propriété.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">Ajoute une propriété avec la notification de modifications à cet objet, y compris une définition de la propriété ECMAScript5.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">Nom de la propriété à ajouter.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">Valeur de la propriété.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">Une promesse qui se termine lorsque les notifications pour cette modification de propriété ont été traitées. Si plusieurs notifications sont fusionnées, la promesse peut être annulée ou la valeur de la promesse peut être mise à jour. La valeur remplie de la promesse est la nouvelle valeur de la propriété pour laquelle les notifications ont été terminées.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">Supprime une valeur de propriété.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">Nom de la propriété à supprimer.</msg>
  <msg name="WinJS.Binding.bind">Crée une liaison avec une ou plusieurs propriétés sur l'objet observable ou sur des valeurs enfants de cet objet.</msg>
  <msg name="WinJS.Binding.bind_p:observable">Objet auquel créer la liaison.</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">Littéral d'objet contenant les déclarations de liaison. Les déclarations de liaison prennent la forme : { propertyName : (function | bindingDeclaration),… } Par exemple, la liaison à un membre imbriqué d'un objet est déclarée comme suit : bind(someObject, { address: { street: function(v) { ... } } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">Objet qui contient au moins un champ « cancel », qui est une fonction qui supprime toutes les liaisons associées à cette demande de liaison.</msg>
  <msg name="WinJS.Binding.expandProperties">Encapsule l'objet spécifié afin que toutes ses propriétés soient instrumentées pour la liaison. Cela est destiné à être utilisé avec le mixin de liaison.</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">Spécification de l'objet pouvant être lié.</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">Objet avec un ensemble de propriétés qui sont toutes connectées pour la liaison.</msg>
  <msg name="WinJS.Binding.define">Crée une nouvelle fonction constructeur qui prend en charge l'observabilité de l'ensemble spécifié de propriétés.</msg>
  <msg name="WinJS.Binding.define_p:data">Objet à utiliser comme modèle pour définir l'ensemble des propriétés, par exemple : var MyPointClass = define({x:0,y:0});</msg>
  <msg name="WinJS.Binding.define_returnValue">Fonction constructeur avec 1 argument facultatif qui est l'état initial des propriétés.</msg>
  <msg name="WinJS.Binding.define.return">Crée un objet observable.</msg>
  <msg name="WinJS.Binding.define.return_p:init">Valeur initiale pour les propriétés.</msg>
  <msg name="WinJS.Binding.as">Retourne un objet observable. Cela peut être un proxy observable pour l'objet spécifié, un proxy existant, ou l'objet spécifié lui-même s'il prend en charge directement l'observabilité.</msg>
  <msg name="WinJS.Binding.as_p:data">Objet pour lequel fournir l'observabilité.</msg>
  <msg name="WinJS.Binding.as_returnValue">Objet observable.</msg>
  <msg name="WinJS.Binding.unwrap">L'objet (non observable) d'origine est retourné si l'objet spécifié est un proxy observable.</msg>
  <msg name="WinJS.Binding.unwrap_p:data">Objet pour lequel récupérer la valeur d'origine.</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">Si l'objet spécifié est un proxy observable, l'objet d'origine est retourné, sinon le même objet est retourné.</msg>
  <msg name="WinJS.Binding.Template.render.value">Restitue un modèle basé sur un URI.</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">URI à partir duquel le modèle doit être chargé.</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">Promesse qui est terminée après que la liaison soit terminée. La valeur est l'objet dans le paramètre de conteneur ou la balise DIV créée.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">Restitue un modèle lié aux données fournies et apparenté aux éléments inclus dans la QueryCollection. Si la QueryCollection contient plusieurs éléments, le modèle est restitué plusieurs fois, une fois à chaque élément de la QueryCollection par élément de données passé.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">Élément DOM auquel le modèle de contrôle est attaché.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">Données à restituer. Si les données sont un tableau (ou autre objet qui a une méthode forEach) alors le modèle est restitué plusieurs fois, une fois pour chaque élément de la collection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">Si fournie, cette fonction est appelée chaque fois que le modèle est rendu, et est passée une promesse qui est remplie lorsque le rendu de modèle est terminé.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">QueryCollection.</msg>
  <msg name="WinJS.Binding.declarativeBind">Lie les valeurs du contexte de données spécifié aux éléments qui sont des descendants de l'élément racine spécifié et ont des attributs de liaison déclaratifs (donnée-win-liaison).</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">Élément par lequel commencer à parcourir pour rechercher des éléments pour effectuer la liaison. Si ce paramètre est omis, le document entier est trouvé.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">Données liées mises en cache.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">L'initialiseur de liaison à utiliser dans le cas où il n'est pas spécifié dans une expression de liaison. S'il n'est pas fourni, le comportement est identique à WinJS.Binding.defaultBind.</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">Promesse qui se termine lorsque chaque élément qui contient des déclarations de liaison a été traité et que la mise à jour a démarré.</msg>
  <msg name="WinJS.Binding.converter">Crée un initialiseur de liaison par défaut pour la liaison entre une propriété source et une propriété de destination avec une fonction de convertisseur fournie qui est exécutée sur la valeur de la propriété source.</msg>
  <msg name="WinJS.Binding.converter_p:convert">Conversion qui s'exécute sur le résultat de la propriété source pour produire une valeur définie sur la propriété de destination.</msg>
  <msg name="WinJS.Binding.converter_returnValue">Initialiseur de liaison.</msg>
  <msg name="WinJS.Binding.setAttribute">Crée une liaison unidirectionnelle entre l'objet source et un attribut sur l'élément de destination.</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">Objet source.</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">Chemin d'accès sur l'objet source à la propriété source.</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">Objet de destination (doit être un élément DOM).</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">Chemin d'accès sur la destination d'objet vers la propriété de destination (doit être un nom unique).</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">Valeur initiale connue de la cible, si la valeur source est identique à cette valeur initiale (avec ===), la cible n'est pas définie la première fois.</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">Objet avec une méthode d'annulation qui est utilisée pour fusionner des liaisons.</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">Définit un attribut sur l'élément de destination vers la valeur de la propriété source</msg>
  <msg name="WinJS.Binding.addClassOneTime">Ajoute une classe de l'élément de destination à la valeur de la propriété source</msg>
  <msg name="WinJS.Binding.defaultBind">Crée une liaison unidirectionnelle entre l'objet source et l'objet de destination.</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">Objet de destination.</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">Chemin d'accès sur l'objet de destination à la propriété de destination.</msg>
  <msg name="WinJS.Binding.oneTime">Définit la propriété de destination sur la valeur de la propriété source.</msg>
  <msg name="WinJS.Binding.initializer">Marque une fonction d'initialiseur personnalisée comme étant compatible avec la liaison de données déclarative.</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">Initialiseur personnalisé à marquer comme compatible avec la liaison de données déclarative.</msg>
  <msg name="WinJS.Binding.initializer_returnValue">customInitializer d'entrée.</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">La valeur reconnue par la clé spécifiée a été remplacée par une valeur différente.</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">Une nouvelle valeur a été insérée dans la liste.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">La valeur reconnue par la clé spécifiée a été déplacé d'un index dans la liste à un autre index.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">La valeur reconnue par la clé spécifiée a été mutée.</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">La valeur reconnue par la clé spécifiée a été supprimée de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.onreload">La liste a été actualisée. Toutes les références aux éléments de la liste peuvent être incorrectes.</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">Force la liste à envoyer une notification de rechargement à tous les écouteurs.</msg>
  <msg name="WinJS.Binding.ListBase.getAt">Obtient la valeur de l'index spécifié.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">Index de la valeur à obtenir.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">Valeur de propriété située à l'index spécifié.</msg>
  <msg name="WinJS.Binding.ListBase.concat">Retourne une nouvelle liste combinant deux tableaux.</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">Tableau contenant la concaténation de la liste et de tout autre élément fourni.</msg>
  <msg name="WinJS.Binding.ListBase.join">Retourne une chaîne composée de tous les éléments d'une liste délimités par la chaîne de séparateur spécifiée.</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">Chaîne utilisée pour séparer les éléments d'une liste. Si ce paramètre est omis, les éléments de la liste sont séparés par une virgule.</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">Éléments d'une liste séparés par la chaîne de séparateur spécifiée.</msg>
  <msg name="WinJS.Binding.ListBase.slice">Extrait une section d'une liste et retourne une nouvelle liste.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">Index qui spécifie le début de la section.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">Index qui spécifie la fin de la section.</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">Retourne une section d'un tableau.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">Obtient l'index de la première occurrence de l'objet spécifié dans une liste.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">Valeur à localiser dans la liste.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">Index à partir duquel commence la recherche. Si fromIndex est omis, la recherche démarre à l'index 0.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">Index de la première occurrence d'une valeur dans une liste ou -1 si non trouvé.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">Obtient l'index de la dernière occurrence de l'objet spécifié dans une liste.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">Index à partir duquel commence la recherche. Si fromIndex est omis, la recherche démarre au dernier index dans la liste.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">Index de la dernière occurrence d'une valeur dans une liste ou -1 si non trouvé.</msg>
  <msg name="WinJS.Binding.ListBase.every">Vérifie si la fonction de rappel spécifiée retourne la valeur True pour tous les éléments d'une liste.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">Fonction acceptant jusqu'à trois arguments. Cette fonction est appelée pour chaque élément de la liste jusqu'à ce qu'elle retourne la valeur false ou que la fin de la liste est atteinte.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">Objet auquel ce mot clé peut faire référence dans la fonction de rappel. Si thisArg est omis, undefined est utilisé.</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">True si le rappel retourne la valeur True pour tous les éléments de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.filter">Retourne les éléments d'une liste qui remplissent la condition spécifiée dans une fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">Fonction acceptant jusqu'à trois arguments. La fonction est appelée pour chaque élément de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">Tableau contenant les éléments qui remplissent la condition spécifiée dans la fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.forEach">Appelle la fonction de rappel spécifiée pour chaque élément d'une liste.</msg>
  <msg name="WinJS.Binding.ListBase.map">Appelle la fonction de rappel spécifiée sur chaque élément d'une liste, puis retourne un tableau qui contient les résultats.</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">Tableau contenant le résultat de l'appel de la fonction de rappel sur chaque élément de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.some">Vérifie si la fonction de rappel spécifiée retourne la valeur True pour n'importe quel élément d'une liste.</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">Fonction acceptant jusqu'à trois arguments. La fonction est appelée pour chaque élément de la liste jusqu'à ce qu'elle retourne la valeur True, ou jusqu'à la fin de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">True si le rappel retourne la valeur True pour tout élément dans la liste.</msg>
  <msg name="WinJS.Binding.ListBase.reduce">Accumule un résultat unique en appelant la fonction de rappel spécifiée pour tous les éléments d'une liste. La valeur de retour de la fonction de rappel est le résultat accumulé, et est fournie en tant qu'argument dans le prochain appel à la fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">Fonction acceptant jusqu'à quatre arguments. La fonction est appelée pour chaque élément de la liste.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">Si initialValue est spécifié, il est utilisé comme valeur à partir de laquelle commencer l'accumulation. Le premier appel à la fonction fournit cette valeur comme argument au lieu d'une valeur de liste.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">La valeur de retour du dernier appel à la fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">Accumule un résultat unique en appelant la fonction de rappel spécifiée pour tous les éléments d'une liste, par ordre décroissant. La valeur de retour de la fonction de rappel est le résultat accumulé, et est fournie en tant qu'argument dans le prochain appel à la fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">Si initialValue est spécifié, il est utilisé comme valeur à partir de laquelle commencer l'accumulation. Le premier appel à la fonction callbackfn fournit cette valeur comme argument au lieu d'une valeur de liste.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">La valeur de retour du dernier appel à la fonction de rappel.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">Crée une projection filtrée active sur cette liste. Lorsque la liste change, la projection filtrée réagit à ces modifications et peut également changer.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">Fonction qui accepte un argument unique. La fonction createFiltered appelle le rappel avec chaque élément de la liste. Si la fonction retourne la valeur True, cet élément est inclus dans la liste filtrée.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">Projection filtrée sur la liste.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">Crée une projection groupée active sur cette liste. Lorsque la liste change, la projection groupée réagit à ces modifications et peut également changer. La projection groupée trie tous les éléments de la liste pour être dans l'ordre groupe-adjacent. La projection groupée contient également une propriété .groups qui est une WinJS.Binding.List représentant les groupes qui ont été trouvés dans la liste.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">Fonction qui accepte un argument unique. La fonction est appelée à chaque élément dans la liste, la fonction doit retourner une chaîne qui représente le groupe contenant l'élément.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">Fonction qui accepte un argument unique. La fonction est appelée sur un élément dans la liste pour chaque groupe. Elle doit retourner la valeur qui doit être définie en tant que données de l'élément de liste .groups pour ce groupe.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">Fonction qui accepte deux arguments. La fonction est appelée avec la clé des groupes trouvés dans la liste. Elle doit retourner une des valeurs numériques suivantes : négative si le premier argument est inférieur au deuxième, zéro si les deux arguments sont équivalents, positive si le premier argument est supérieur au deuxième. Si omis, les groupes sont triés en ordre croissant de caractères ASCII.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">Projection groupée sur la liste.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">Crée une projection triée active sur cette liste. Lorsque la liste change, la projection triée réagit à ces modifications et peut également changer.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">Fonction qui accepte deux arguments. La fonction est appelée avec des éléments dans la liste. Elle doit retourner une des valeurs numériques suivantes : négative si le premier argument est inférieur au deuxième, zéro si les deux arguments sont équivalents, positive si le premier argument est supérieur au deuxième.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">Projection triée sur la liste.</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">Déconnecte cette projection de WinJS.Binding.List de sa WinJS.Binding.List sous-jacente. Cela est important uniquement s'ils ont différentes durées de vie.</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">Obtient une paire clé/données pour la clé spécifiée.</msg>
  <msg name="WinJS.Binding.ListProjection.move">Déplace la valeur à l'index pour positionner le newIndex.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">Retourne une valeur entière une fois supérieure à l'élément le plus élevé défini dans une liste.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">Retourne une paire clé/données pour l'index spécifié.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">Index de la valeur à récupérer.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">Retourne l'index de la première occurrence d'une clé dans une liste.</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">Obtient ou définit la longueur d'une liste. Retourne une valeur entière une fois supérieure à l'élément le plus élevé défini dans une liste.</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">Retourne l'index de la première occurrence d'une clé.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">Obtient une WinJS.Binding.List, qui est une projection des groupes qui ont été identifiés dans cette liste.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">Obtient une paire clé/données pour la clé d'élément spécifiée.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">Obtient la longueur de la liste. Retourne une valeur entière une fois supérieure à l'élément le plus élevé défini dans une liste.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">Obtient une paire clé/données pour l'index spécifié.</msg>
  <msg name="WinJS.Resources.processAll">Traite les balises de ressources et remplace les chaînes avec les chaînes localisées.</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">Élément DOM à partir duquel commencer le traitement. processAll traite l'élément et ses éléments enfants. Si vous ne spécifiez pas l'élément racine, processAll traite le document entier.</msg>
</messagebundle>