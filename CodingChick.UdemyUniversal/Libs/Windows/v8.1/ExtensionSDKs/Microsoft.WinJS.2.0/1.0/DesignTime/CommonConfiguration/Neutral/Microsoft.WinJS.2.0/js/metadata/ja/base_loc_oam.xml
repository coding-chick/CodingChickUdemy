<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">約束された値で満たすことをキャンセルしようとします。約束がまだ満たされてなく、キャンセルがサポートされている場合、約束は "Canceled" のエラー値でエラー状態になります。</msg>
  <msg name="WinJS.PromiseStateMachine.done">約束した値が満たされたときの動作、約束した値が満たされなかったときに行われるエラー ハンドリング、および処理中の進行状況の通知の処理が指定できます。ハンドラーの実行が完了した後、この関数は then() から戻された任意のエラーを、エラー状態の約束としてスローします。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">約束を値で満たすことに成功したときに呼び出される関数満たされた値を単一の引数として渡します。値が null のとき、満たされた値が返されます。関数から返される値は、then() によって返される約束の満たされた値になります。関数を実行中に例外がスローされた場合、then() によって返される約束はエラー状態に移行します。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">約束がエラーで満たされたときに呼び出される関数。エラーを単一の引数として渡します。null の場合、エラーを転送します。関数から返される値は、then() によって返される約束の満たされた値です。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">約束のレポートが進行すると呼び出される関数。進行状況のデータを単一の引数として渡します。約束は、進行状況をサポートする必要はありません。</msg>
  <msg name="WinJS.PromiseStateMachine.then">約束した値が満たされたときの動作、約束した値が満たされなかったときに行われるエラー ハンドリング、および処理中の進行状況の通知の処理が指定できます。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">約束を値で満たすことに成功したときに呼び出される関数値を単一の引数として渡します。値が null のとき、値が返されます。関数から返される値は、then() によって返される約束の満たされた値になります。この関数が実行中に例外がスローされた場合、then() によって返される約束はエラー状態に移行します。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">約束がエラーで満たされたときに呼び出される関数。エラーを単一の引数として渡します。null の場合、エラーを転送します。関数から返される値は、then() によって返される約束の満たされた値になります。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">約束のレポートが進行すると呼び出される関数。進行状況のデータを単一の引数として渡します。約束は、進行状況をサポートする必要はありません。</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">値が完全な関数またはエラー関数の実行結果である約束。</msg>
  <msg name="WinJS.Promise">約束は、計算されていない値に対して行われる作業をスケジュールする機能を提供します。これは非同期 API との相互作用を管理するのに便利な抽象化です。</msg>
  <msg name="WinJS.Promise_p:init">約束の構築時に呼び出される関数。関数には 3 つの引数 (完了、エラー、進行状況) が与えられます。この関数の中で、この値によってサポートされる通知のイベント リスナーを追加してください。</msg>
  <msg name="WinJS.Promise_p:oncancel">この約束のコンシューマーが未完了の処理を取り消したいときに呼び出す関数。約束は、キャンセルをサポートする必要はありません。</msg>
  <msg name="WinJS.Promise.addEventListener">イベント リスナーをコントロールに追加します。</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">イベントの型 (名前)。</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">イベントが発生したときに呼び出すリスナー。</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">キャプチャを開始するかどうかを指定します。</msg>
  <msg name="WinJS.Promise.any">入力約束の 1 つが満たされたときに満たされる約束を返します。</msg>
  <msg name="WinJS.Promise.any_p:values">約束オブジェクトまたはプロパティの値に約束オブジェクトが含まれるオブジェクトを含む配列。</msg>
  <msg name="WinJS.Promise.any_returnValue">満たされたときに入力の値 (完了またはエラー) を生成する約束。</msg>
  <msg name="WinJS.Promise.as">約束を返します。オブジェクトが既に約束の場合はそのオブジェクトが返され、それ以外の場合はオブジェクトが約束にラップされます。</msg>
  <msg name="WinJS.Promise.as_p:value">約束として処理される値。</msg>
  <msg name="WinJS.Promise.as_returnValue">約束。</msg>
  <msg name="WinJS.Promise.cancel">約束のチェーンの取り消しを示す約束の完了ハンドラーから戻すことができる、キャンセルされた約束の値。</msg>
  <msg name="WinJS.Promise.dispatchEvent">指定された型とプロパティのイベントを発生させます。</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">イベント オブジェクトに関連付けられる追加プロパティのセット。</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">イベント時に preventDefault が呼び出されたかどうかを示します。</msg>
  <msg name="WinJS.Promise.is">値が約束のコントラクトを満たすかどうかを判定します。</msg>
  <msg name="WinJS.Promise.is_p:value">約束である可能性がある値。</msg>
  <msg name="WinJS.Promise.is_returnValue">指定した値が約束である場合は True、それ以外の場合は False。</msg>
  <msg name="WinJS.Promise.join">すべての値が満たされたときに満たされる約束を作成します。</msg>
  <msg name="WinJS.Promise.join_p:values">フィールドが値を含み、その一部が約束である可能性のあるオブジェクト。</msg>
  <msg name="WinJS.Promise.join_returnValue">各フィールドの値が約束の満たされた値であり、値パラメーターのオブジェクトと同じフィールド名が使用されたオブジェクトが値である約束。</msg>
  <msg name="WinJS.Promise.removeEventListener">コントロールからイベント リスナーを削除します。</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">削除するリスナー。</msg>
  <msg name="WinJS.Promise.then">約束のインスタンス メソッド then() の静的なバージョン。</msg>
  <msg name="WinJS.Promise.then_p:value">約束として処理される値。</msg>
  <msg name="WinJS.Promise.then_p:complete">約束が値で満たされたときに呼び出される関数。null の場合、約束は単にその値を返します。値を単一の引数として渡します。</msg>
  <msg name="WinJS.Promise.then_p:error">約束がエラーで満たされたときに呼び出される関数。エラーを単一の引数として渡します。</msg>
  <msg name="WinJS.Promise.then_returnValue">提供された完全な関数の実行結果が値である約束。</msg>
  <msg name="WinJS.Promise.thenEach">すべての入力約束に対する操作を実行し、入力の形を持ち、各入力に対して実行された操作の結果を含む約束を返します。</msg>
  <msg name="WinJS.Promise.thenEach_p:values">一部またはすべてが約束である一連の値 (配列またはオブジェクト)。</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">約束が値で満たされたときに呼び出される関数。値が null の場合、約束はその値を返します。値を単一の引数として渡します。</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">値パラメーターの Promise.join を呼び出した結果である約束。</msg>
  <msg name="WinJS.Promise.timeout">タイムアウト後に満たされた約束を作成します。</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">タイムアウト期限 (ミリ秒単位)。この値が 0 または指定されていない場合は setImmediate が呼び出され、それ以外の場合は setTimeout が呼び出されます。</msg>
  <msg name="WinJS.Promise.timeout_p:promise">タイムアウトの期限が切れるまでに完了しないとキャンセルされる約束。</msg>
  <msg name="WinJS.Promise.timeout_returnValue">指定されたタイムアウトの後に非同期的に完了する約束。</msg>
  <msg name="WinJS.Promise.wrap">約束の中の非約束値をラップします。約束を必要とする関数に値を渡す必要がある場合は、この関数を使用できます。</msg>
  <msg name="WinJS.Promise.wrap_p:value">約束の中にラップされる非約束値。</msg>
  <msg name="WinJS.Promise.wrap_returnValue">指定された値で正常に満たされる約束</msg>
  <msg name="WinJS.Promise.wrapError">約束の中の非約束のエラー値をラップします。約束を必要とする関数にエラーを渡す必要がある場合は、この関数を使用できます。</msg>
  <msg name="WinJS.Promise.wrapError_p:error">約束の中にラップされる非約束のエラー値。</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">指定された値でエラー状態にある約束。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">ジョブが完了したかどうかを示す値を取得します。ジョブの実行が完了した場合はこの値は True、まだ完了していない場合や取り消された場合は False です。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">このジョブに対応する一意の識別子を取得します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">このジョブに対応する診断名を指定する文字列を取得または設定します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">ジョブに対応する所有者のトークンを取得します。この所有者のトークンに対応する cancelAll メソッドを使用して、関連するジョブを取り消すことができます。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">このジョブがスケジューラによって実行されたときの優先順位を取得または設定します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">ジョブを取り消します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">ジョブを一時停止します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">ジョブが一時停止されていた場合は再開します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">現在実行されている作業に対応するジョブのインスタンス。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">作業項目を協調的に実行するようにスケジューラから要求された場合に True になるブール値。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">作業項目が非同期処理によってブロックされたときに呼び出されます。スケジューラはジョブを再スケジュールする前に、指定した約束が完了するのを待機します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">完了したときに、作業項目の機能を再スケジュールする約束の値。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">作業項目がスケジューラと協調的に実行され、今後完了する予定の作業がさらに存在するときに呼び出されます。作業項目が実行されようとしているときに、追加の作業をスケジュールするには、このメソッドを使用します。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">再スケジュールされる予定の作業関数。</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">この所有者トークンに関連付けられているすべてのジョブを取り消します。</msg>
  <msg name="WinJS.ErrorFromName">指定された名前とメッセージ プロパティでエラー オブジェクトを作成します。</msg>
  <msg name="WinJS.ErrorFromName_p:name">このエラーの名前です。名前は、プログラムで実行するように設計され、ローカライズできません。</msg>
  <msg name="WinJS.ErrorFromName_p:message">このエラーのメッセージです。メッセージは、人間が読むように設計されているため、ローカライズする必要があります。</msg>
  <msg name="WinJS.ErrorFromName_returnValue">取り込まれた .name と .message のプロパティに関するエラー インスタンス</msg>
  <msg name="WinJS.Utilities.QueryCollection">クエリのセレクターの結果を表し、コレクションの要素に対する操作を実行するさまざまな操作を提供します。</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">クエリの結果から得られる項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">QueryCollection の各項目の操作を実行します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">各項目に対して実行する操作。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">callbackFn にバインディングする引数</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">QueryCollection を返します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">QueryCollection から項目を取得します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">返すアイテムのインデックス。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">コレクションから取得した単一の項目。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">コレクションのすべての項目の属性値を設定します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">設定する属性の名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">設定する属性値。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">この QueryCollection のオブジェクト。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">コレクションの最初の要素の属性値を取得します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">属性の名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">属性の値。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">指定したクラスを、コレクションのすべての要素に追加します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">追加するクラスの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">指定したクラスがコレクションの最初の要素に既に存在しているかどうかを判断します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">クラスの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">要素が指定されたクラスを持つ場合は True、それ以外の場合は False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">コレクションのすべての要素から指定されたクラスを削除します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">削除されるクラスの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">コレクションのすべての要素の指定されたクラスを切り替えます (追加または削除)。クラスがある場合は削除、ない場合は追加されます。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">切り替えるクラスの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">コレクションのすべての要素に指定されたイベントのリスナーを登録します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">イベントの名前です。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">イベント発生時に呼び出されるイベント ハンドラー関数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">"capture == true" を addEventListener に渡す場合は True、それ以外の場合は False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">コレクションのすべての要素から指定されたイベントのリスナーを登録解除します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">イベント ハンドラー関数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">"capture == true" のときは True、それ以外は False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">コレクションのすべての要素に対して、指定されたスタイル プロパティを設定します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">スタイル プロパティの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">プロパティの値。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">コレクションのすべての要素に対して、指定されたスタイル プロパティをクリアします。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">クリアするスタイル プロパティの名前。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">コレクションのすべての要素のクエリのセレクターを実行し、QueryCollection に結果を集計します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">クエリ セレクター文字列。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">コレクションのすべての要素のクエリを実行した結果の集計を含む QueryCollection オブジェクト。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">一連の項目をこの QueryCollection に追加します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">QueryCollection に追加する項目。これは、配列様式のオブジェクト、ドキュメント フラグメント、または単一の項目である場合があります。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">この QueryCollection の要素に関連付けられるコントロールを作成します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">要素に関連付けられるコントロールを作成するために使用されるコンストラクター関数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">新しく作成されたコントロールに渡されるオプション。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">この QueryCollection の要素に関連付けられるコントロールを構成します。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">コントロールに渡されるオプション。</msg>
  <msg name="WinJS.UI.HtmlControl">HTML ページを動的に含める。</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">HtmlControl の新しいインスタンスを初期化し、新しいページ コントロールを定義します。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">HtmlControl をホストする要素。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">ページを構成するオプション。ページのコンテンツのソース ドキュメントを指定するには URI オプションが必要です。</msg>
  <msg name="WinJS.UI.TabContainer.constructor">TabContainer を構築します。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">TabContainer に関連付けられる DOM 要素。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">TabContainer に初期状態で適用されるオプションのセット。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">構築された TabContainer。</msg>
  <msg name="WinJS.UI.TabContainer.dispose">タブ コンテナーを破棄します。</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">フォーカスがある子要素を取得または設定します。</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">コンテナー内のコントロールのタブ オーダーを取得または設定します。</msg>
  <msg name="WinJS.Application.IOHelper.exists">指定したファイルがコンテナー内にあるかどうかを調べます。</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">このフォルダー内にある可能性のあるファイル</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">True (ファイルがある場合) または False の約束。</msg>
  <msg name="WinJS.Application.IOHelper.remove">コンテナー内のファイルを削除します。</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">削除されるファイル</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">ファイルが削除されたときに満たされる約束</msg>
  <msg name="WinJS.Application.IOHelper.writeText">指定したテキストで、ファイルをコンテナーに書き込みます。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">書き込み先のファイル。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">ファイルに書き込むコンテンツ</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">書き込まれた文字数の約束</msg>
  <msg name="WinJS.Application.IOHelper.readText">コンテナーからファイルのコンテンツを読み取ります。ファイルが存在しない場合は、"def" を返します。</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">読み込むファイル</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">ファイルが開けない場合に返す既定値</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">ファイルの内容または "def" を含む約束。</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">このフォルダー内にある可能性のあるファイル名</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">コンテナー内のファイルを削除します</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">書き込むファイル名</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">読み込むファイル名</msg>
  <msg name="WinJS.Binding.observableMixin.bind">名前パラメーターで指定されるプロパティに指定された操作をリンクします。この関数は、プロパティの値が変更された可能性のあるときに呼び出されます。値が実際に変更されたときだけ操作が呼び出されるかどうかは保証されていません。また、値が変更されるたびに呼び出されるかどうかも保証されていません。この関数の実装は、複数のプロパティ値の更新が、結果として指定された操作の単一の呼び出しになるなど、変更通知をひとまとめにします。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">操作をバインディングするプロパティの名前。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">プロパティが変更された可能性のあるときに、非同期的に呼び出す関数。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">このオブジェクトが返されます。</msg>
  <msg name="WinJS.Binding.Template.constructor">再利用可能な宣言型バインディング要素を提供するテンプレートを作成します。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">テンプレートに変換する DOM 要素。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">このパラメーターが提供されている場合、テンプレートは URI から読み込まれ、要素のパラメーターの内容は無視されます。</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">指定した場合は、初期化子を明示的に指定していないすべてのデータ バインディングで、この関数が既定の初期化子として使用されます。指定された関数は、処理をサポートするものとしてマークされている必要があります。</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">テンプレートが最初のレンダリング時にデバッガー内で中断されるかどうかを示します</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">従来のテンプレート処理とデータ バインディングを復元し、テンプレートのコンパイルを無効にするには、このプロパティを設定します。</msg>
  <msg name="WinJS.Binding.Template.element">テンプレートとして使用する DOM 要素を取得します。</msg>
  <msg name="WinJS.Binding.Template.extractChild">すべてのテンプレート コンテンツをホストするラッパー要素の代わりに、テンプレートの最初の要素である子を返します。</msg>
  <msg name="WinJS.Binding.Template.processTimeout">宣言コントロールのインスタンス化を遅延するミリ秒数。ゼロ (0) では遅延なし、負の数値では setImmediate の遅延、正の数値はミリ秒数として扱われます。</msg>
  <msg name="WinJS.Binding.Template.render">指定されたデータ コンテキストの値を指定されたルート要素の子孫要素にバインディングし、宣言型バインディング属性 (data-win-bind) を持ちます。</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">既定のデータ バインディングに使用するオブジェクト。</msg>
  <msg name="WinJS.Binding.Template.render_p:container">表示されたテンプレートを追加する要素。このパラメーターを省略した場合、新しい DIV が作成されます。</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">バインディング終了後に完了する約束。値は、コンテナー パラメーターで指定された要素または作成された DIV です。</msg>
  <msg name="WinJS.Binding.Template.renderItem">項目に含まれているデータにバインディングされているテンプレートのインスタンスを表示します。再利用されたパラメーターが存在し、さらに enableRecycling が True の場合、テンプレートは再利用されたパラメーターから DOM 要素を再利用しようとします。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">バインディングするデータを含むオブジェクト。item.data のみ必要です。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">以前生成されたテンプレートのインスタンス。</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">DOM 要素。</msg>
  <msg name="WinJS.Binding.Template">再利用可能な宣言型バインディング要素を提供します。</msg>
  <msg name="WinJS.Binding.Template_name">テンプレート</msg>
  <msg name="WinJS.Binding.List.constructor">WinJS.Binding.List のオブジェクトを作成します。</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">リストを初期化する要素を含む配列。</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">options.binding が True の場合、リストには要素の値で WinJS.Binding.as() を呼び出した結果が含まれます。options.proxy が True の場合、最初のパラメーターとして指定されたリストは WinJS.Binding.List の格納に使用されます。このオプションは、データ ストレージへの一貫性のない編集でエラーが発生するため、注意して使用してください。</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">新しく構築された WinJS.Binding.List のインスタンス。</msg>
  <msg name="WinJS.Binding.List.length">リストで定義されている最上位の要素より 1 だけ大きい整数値で、長さを取得または設定します。</msg>
  <msg name="WinJS.Binding.List.getItem">指定されたリスト インデックスのキー/データのペアを取得します。</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">取得する値のインデックス。</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">.key プロパティと .data プロパティが設定されたオブジェクト。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">指定されたリスト項目キーのキー/データのペアを取得します。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">取得する値のキー。</msg>
  <msg name="WinJS.Binding.List.indexOfKey">リストで最初に見つかったキーのインデックスを取得します。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">リスト内で検索されるキー。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">リストで最初に見つかった指定したキーのインデックス、または見つからなかった場合に -1。</msg>
  <msg name="WinJS.Binding.List.move">インデックスの位置にある値を指定した位置に移動します。</msg>
  <msg name="WinJS.Binding.List.move_p:index">値の元のインデックス。</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">値の移動後のインデックス。</msg>
  <msg name="WinJS.Binding.List.notifyMutated">リストが、指定されたインデックスの値のリスナーに itemmutated 通知を強制的に送信するようにします。</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">変更された値のインデックス。</msg>
  <msg name="WinJS.Binding.List.setAt">指定したインデックス位置の項目を、新しい値で置き換えます。</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">置換された値のインデックス。</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">新しい値。</msg>
  <msg name="WinJS.Binding.List.reverse">要素を反転させたリストを返します。このメソッドは、リスト オブジェクトの要素をその場で反転させます。このメソッドを実行しても、新しいリスト オブジェクトは作成されません。</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">逆順のリスト。</msg>
  <msg name="WinJS.Binding.List.sort">要素を並べ替えたリストを返します。このメソッドは、リスト オブジェクトの要素をその場で並べ替えます。このメソッドを実行しても、新しいリスト オブジェクトは作成されません。</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">要素の順序を決定するために使用する関数。省略した場合、要素は ASCII 文字の昇順で並べ替えられます。</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">並べ替えられたリスト。</msg>
  <msg name="WinJS.Binding.List.pop">リストの最後の要素を削除し、削除した要素を返します。</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">リストの最後の要素。</msg>
  <msg name="WinJS.Binding.List.push">リストに新しい要素を追加し、その要素を追加した後のリストの長さを返します。</msg>
  <msg name="WinJS.Binding.List.push_p:value">リストの最後に挿入する要素。</msg>
  <msg name="WinJS.Binding.List.push_returnValue">リストの新しい長さ。</msg>
  <msg name="WinJS.Binding.List.shift">リストの先頭の要素を削除し、削除した要素を返します。</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">リストの最初の要素。</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">リストの最初に挿入する要素。</msg>
  <msg name="WinJS.Binding.List.splice">リストから要素を削除し、必要に応じて新しい要素を削除位置に挿入し、削除した要素を返します。</msg>
  <msg name="WinJS.Binding.List.splice_p:start">要素の削除を開始する、リストの 0 から始まる位置。</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">削除する要素の数を指定します。</msg>
  <msg name="WinJS.Binding.List.splice_p:item">削除した要素の代わりにリストに挿入する要素。</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">削除された要素。</msg>
  <msg name="WinJS.Namespace.defineWithParent">指定された親の名前空間に、指定した名前で新しい名前空間を定義します。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">親の名前空間。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">新しい名前空間の名前。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">新しい名前空間のメンバー。</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">新しく定義された名前空間。</msg>
  <msg name="WinJS.Namespace.define">指定した名前で、新しい名前空間を定義します。</msg>
  <msg name="WinJS.Namespace.define_p:name">名前空間の名前。入れ子になった名前空間は、ドットで区切られた名前が可能です。</msg>
  <msg name="WinJS.Class.define">与えられたコンストラクターと指定されたインスタンスのメンバーを使用してクラスを定義します。</msg>
  <msg name="WinJS.Class.define_p:constructor">このクラスをインスタンス化するために使用されるコンストラクター関数。</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">クラスで使用可能なインスタンス フィールド、プロパティ、およびメソッドのセット。</msg>
  <msg name="WinJS.Class.define_p:staticMembers">クラスで使用可能な静的フィールド、プロパティ、およびメソッドのセット。</msg>
  <msg name="WinJS.Class.define_returnValue">新しく定義されたクラス。</msg>
  <msg name="WinJS.Class.derive">プロトタイプの継承を使用して、提供された baseClass パラメーターに基づいてサブクラスを作成します。</msg>
  <msg name="WinJS.Class.derive_p:baseClass">継承元のクラス。</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">クラスで使用可能にするインスタンス フィールド、プロパティ、およびメソッドのセット。</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">クラスで使用可能にする静的フィールド、プロパティ、およびメソッドのセット。</msg>
  <msg name="WinJS.Class.mix">与えられたコンストラクター、およびすべての混合オブジェクトで指定されたインスタンス メンバーのセットの共用体を使用して、クラスを定義します。混合パラメーター リストは可変長です。</msg>
  <msg name="WinJS.Utilities.hasWinRT">WinRT がこのスクリプトのコンテキストにアクセスできるかどうかを確認します。</msg>
  <msg name="WinJS.Utilities.getMember">名前パラメーターで指定されたリーフレベルの型または名前空間を取得します。</msg>
  <msg name="WinJS.Utilities.getMember_p:name">メンバーの名前です。</msg>
  <msg name="WinJS.Utilities.getMember_p:root">開始するルート。規定値はグローバル オブジェクトです。</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">指定された親の名前空間での、リーフレベルの型または名前空間。</msg>
  <msg name="WinJS.Utilities.ready">DOMContentLoaded のイベントが現在のページに対して発生した後にのみ、指定された関数が実行されることを確認します。</msg>
  <msg name="WinJS.Utilities.ready_returnValue">DOMContentLoaded が発生した後に完了する約束。</msg>
  <msg name="WinJS.Utilities.ready_p:callback">DOMContentLoaded が発生した後に実行する関数。</msg>
  <msg name="WinJS.Utilities.ready_p:async">True の場合、コールバックは非同期的に実行されます。</msg>
  <msg name="WinJS.Utilities.strictProcessing">厳密な宣言処理がこのスクリプトのコンテキストで有効になっているかどうかを判定します。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">WinJS.UI.processAll または WinJS.Binding.processAll のような宣言処理と互換性のあるものとして、関数をマークします。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">宣言処理と互換性のあるものとしてマークされる関数。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">入力関数。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">WinJS.UI.processAll や WinJS.Binding.processAll のような宣言処理と値が互換性のあることをアサートします。互換性がない場合、例外がスローされます。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">宣言処理の互換性をテストする値。値が関数の場合、"supportedForProcessing" プロパティを True でマークする必要があります。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">入力値。</msg>
  <msg name="WinJS.strictProcessing">厳格な処理が常に適用され、このメソッドは無効です。</msg>
  <msg name="WinJS.Utilities.formatLog">ログ メッセージにタグおよび型を追加します。</msg>
  <msg name="WinJS.Utilities.startLog_p:message">書式設定するメッセージ。</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">メッセージに適用するタグ。複数のタグは、空白で区切ります。</msg>
  <msg name="WinJS.Utilities.startLog_p:type">メッセージの型。</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">フォーマットされたメッセージ。</msg>
  <msg name="WinJS.Utilities.startLog">WinJS.log から console.log に、指定されたタグを含むメッセージを書き込むロガーを構成します。</msg>
  <msg name="WinJS.Utilities.startLog_p:options">記録するメッセージのタグ。複数のタグは、空白で区切ります。</msg>
  <msg name="WinJS.Utilities.startLog2">WinJS.log の出力を書き込むようにロガーを構成します。</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">.type、.tags、.excludeTags および .action のプロパティを含む場合があります。- .type は必須のタグです。- .excludeTags はスペース区切りのタグのリストで、いずれもログに記録されないメッセージとなります。- .tags はスペース区切りのタグのリストで、いずれもログに記録されるメッセージとなります。- .action は、存在する場合、ログ メッセージ、タグおよび型と共に呼び出される関数です。既定では、コンソールに記録します。</msg>
  <msg name="WinJS.Utilities.stopLog">前回設定したロガーを削除します。</msg>
  <msg name="WinJS.Utilities.createEventProperties">関数に渡された名前ごとに 1 つずつのプロパティを持つオブジェクトを作成します。</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">プロパティ名の変数リスト。</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">指定したプロパティを持つオブジェクト。プロパティ名の先頭には "on" が付けられます。</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">True の場合はキャプチャを開始し、それ以外の場合は False。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">指定した型および指定した追加プロパティのイベントを発生させます。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">イベントが発生したときにイベント オブジェクトに関連付けられる追加プロパティのセット。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">イベント時に preventDefault が呼び出されると True になります。</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">キャプチャを開始するかどうかを指定します。</msg>
  <msg name="WinJS.Resources.addEventListener">指定したイベントのイベント ハンドラーを登録します。</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">処理するイベントの名前。</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">イベントが発生したときに呼び出すリスナー。</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">キャプチャ フェーズのイベント ハンドラーを登録するには True に設定します。バブル フェーズのイベント ハンドラーを登録するには False に設定します。</msg>
  <msg name="WinJS.Resources.getString">指定したリソース ID を持つリソース文字列を取得します。</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">取得する文字列のリソース ID。</msg>
  <msg name="WinJS.Resources.getString_returnValue">値および要求された文字列の値のプロパティを含むことができるオブジェクト。このプロパティは常に存在します。empty: 要求された文字列が見つからなかったかどうかを示す値。True の場合は、文字列が見つからなかったことを示します。False または未定義のとき、要求した文字列が見つかったことを示します。lang: 指定されている場合は、文字列の言語。このプロパティは、複数言語のリソースだけにあります。</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">診断の目的で、スケジューラの状態を文字列形式で返します。ジョブとドレインの要求は、現時点で予期されている処理順序に従って表示されます。現在のジョブとドレインの要求はアスタリスクによってマークされます。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">指定した優先順位およびそれより高い優先順位にあるすべてのジョブの実行が完了するまでは、スケジューラ内にあるジョブはタイム スライスなしで実行されます。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">スケジューラがドレインする必要がある優先順位。既定値は、キュー内のすべてのジョブをドレインすることを意味する Priority.min です。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">診断を目的とした、ドレインの要求に関するオプションの説明。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">ドレインが完了したときに完了する約束。この約束を取り消すと、ドレインの要求も取り消されます。この約束は、決してエラー状態になりません。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">指定したコールバックを、優先順位の高いコンテキスト内で実行します。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">優先順位の高いコンテキスト内で実行しようとするコールバック。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">コールバックの戻り値。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">1 つ以上のジョブに対応する所有者のプロパティに対して設定できる、新しい所有者トークンを作成して返します。その後、その所有者が "所有" するすべてのジョブを取り消すために使用できます。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">新しい所有者トークン。このトークンを使用して、その所有者が所有するジョブを制御できます。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">指定した関数を非同期的に実行するようにスケジュールを設定します。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">スケジュールしようとする作業項目を表す関数。呼び出されたときに、作業項目は最初の引数として JobInfo オブジェクトを受け取ります。このオブジェクトにより、作業項目はスケジューラに対して、協調的に実行する必要があるかどうかを問い合わせます。また、その必要がある場合は、継続処理として実行される関数を作業項目が提供するのか、それとも完了時に継続処理として実行される関数を提供することになる WinJS.Promise を作業項目が提供するかを問い合わせます。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">作業項目をスケジュールする優先順位。既定値は Priority.normal です。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">作業項目にバインディングする "this" インスタンス。既定値は null です。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">診断を目的とする、作業項目の説明。既定値は、空の文字列です。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">この作業項目を表すジョブのインスタンス。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">返された約束を完了させるジョブをスケジュールします。一般的に使用される複数の優先順位に対応して、このメソッドには次の 5 種類のバージョンがあります。schedulePromiseHigh、schedulePromiseAboveNormal、schedulePromiseNormal、schedulePromiseBelowNormal、および schedulePromiseIdle。約束チェーン内にある最後のリンクが、スケジューラによって高い優先順位で確実に実行される方法を示す使用例。asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">返された約束が完了する値。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">診断の目的で、ジョブを説明する文字列。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">目的の優先順位を持つジョブの中で完了した約束。</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">呼び出し元が実行されている現在の優先順位を取得します。</msg>
  <msg name="WinJS.xhr">約束の中で XMLHttpRequest の呼び出しをラップします。</msg>
  <msg name="WinJS.xhr_p:options">XMLHttpRequest のオブジェクトに適用されるオプション。これらは型、URL、ユーザー、パスワード、ヘッダー、responseType、データおよび customRequestInitializer です。</msg>
  <msg name="WinJS.xhr_returnValue">完了時に XMLHttpRequest オブジェクトを返す約束。</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">指定された要素の innerHTML プロパティを指定されたテキストに設定します。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">innerHTML プロパティを設定する要素。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">innerHTML プロパティに設定する値。</msg>
  <msg name="WinJS.Utilities.setOuterHTML">指定された要素の outerHTML プロパティを指定されたテキストに設定します。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">outerHTML プロパティを設定する要素。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">outerHTML プロパティに設定する値。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">指定された要素の insertAdjacentHTML を呼び出します。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">insertAdjacentHTML が呼び出される要素。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">HTML を挿入する、要素に相対する位置。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">insertAdjacentHTML に提供される値。</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">msWWA.execUnsafeLocalFunction のコンテキストで指定されたテキストに指定された要素の outerHTML のプロパティを設定します。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">msWWA.execUnsafeLocalFunction のコンテキストで指定された要素の insertAdjacentHTML を呼び出します。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">insertAdjacentHTML に提供される値。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">msIsStaticHTML のチェックを通過したとき、指定されたテキストに要素の innerHTML のプロパティを設定します。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">msIsStaticHTML のチェックを通過したとき、指定されたテキストに要素の outerHTML のプロパティを設定します。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">msIsStaticHTML のチェックを通過したとき、要素の insertAdjacentHTML を呼び出します。</msg>
  <msg name="WinJS.Utilities.markDisposable">指定した要素に対して、指定した dispose の実装を追加し、破棄可能というマークを付けます。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">破棄可能というマークを付ける要素。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">Dispose 関数によって呼び出される、要素固有の破棄ロジックを含む関数。</msg>
  <msg name="WinJS.Utilities.disposeSubTree">指定した要素の下位にある、第 1 世代の破棄可能要素すべてを破棄します。指定した要素自体は、破棄されません。</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">そのサブツリーが破棄対象になるルート要素。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">宣言的に指定されたオプション (プロパティとイベント) のセットを指定のコントロールに追加します。オプションのプロパティの名前が "on" で始まる場合、プロパティ値は関数であり、コントロールは addEventListener をサポートします。setOptions メソッドはコントロールの addEventListener メソッドを呼び出します。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">プロパティおよびイベントの適用先のコントロール。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">宣言的に指定されるオプションのセット。</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">キャプチャを開始する場合は True、それ以外は False。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">指定の型でイベントを発生させ、指定の追加プロパティを追加します。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">イベント時に preventDefault が呼び出された場合は True、それ以外は False。</msg>
  <msg name="WinJS.UI.select.createSelect">指定された要素からドキュメントのルートまで DOM ツリーを走査し、セレクター スコープに当たるたびに select は与えられたセレクター文字列に対してスコープ内の検索を行います。最初の一致する要素が返されます。</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">セレクター文字列。</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">検出された場合は、ターゲット要素。</msg>
  <msg name="WinJS.UI.processAll">指定したルート要素から始め、すべての要素に宣言的なコントロール バインディングを適用します。</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">バインディング適用の開始点となる要素。このパラメーターが指定されていない場合、バインディングはドキュメント全体に適用されます。</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">True の場合、バインディングされる要素は特定のルート要素をスキップし、子だけを含みます。</msg>
  <msg name="WinJS.UI.processAll_returnValue">バインディングがすべてのコントロールに適用されたときに満たされる約束。</msg>
  <msg name="WinJS.UI.process">宣言的コントロール バインディングを指定の要素に適用します。</msg>
  <msg name="WinJS.UI.process_p:element">バインディング対象の要素。</msg>
  <msg name="WinJS.UI.process_returnValue">コントロールがアクティブ化された後に満たされる約束。約束の値は、要素に関連付けられているコントロールです。</msg>
  <msg name="WinJS.Utilities.query">指定された要素または文書全体にクエリ セレクターを実行します。</msg>
  <msg name="WinJS.Utilities.query_p:query">実行するクエリ セレクター。</msg>
  <msg name="WinJS.Utilities.query_p:element">クエリを実行する要素。このパラメーターが指定されていない場合、クエリはドキュメント全体に実行されます。</msg>
  <msg name="WinJS.Utilities.query_returnValue">クエリの結果を含む QueryCollection。</msg>
  <msg name="WinJS.Utilities.id">要素を ID で検索し、結果を QueryCollection にラップします。</msg>
  <msg name="WinJS.Utilities.id_p:id">要素の ID。</msg>
  <msg name="WinJS.Utilities.id_returnValue">検出された場合、その要素を含む QueryCollection。</msg>
  <msg name="WinJS.Utilities.children">指定された親要素の子を含む QueryCollection を作成します。</msg>
  <msg name="WinJS.Utilities.children_p:element">親要素。</msg>
  <msg name="WinJS.Utilities.children_returnValue">要素の子を含む QueryCollection。</msg>
  <msg name="WinJS.Utilities.Key">一連のキーボード値を定義します。</msg>
  <msg name="WinJS.Utilities.Key.backspace">BackSpace キー。</msg>
  <msg name="WinJS.Utilities.Key.tab">Tab キー。</msg>
  <msg name="WinJS.Utilities.Key.enter">Enter キー。</msg>
  <msg name="WinJS.Utilities.Key.shift">Shift キー。</msg>
  <msg name="WinJS.Utilities.Key.ctrl">Ctrl キー。</msg>
  <msg name="WinJS.Utilities.Key.alt">Alt キー。</msg>
  <msg name="WinJS.Utilities.Key.pause">Pause キー。</msg>
  <msg name="WinJS.Utilities.Key.capsLock">Caps Lock キー。</msg>
  <msg name="WinJS.Utilities.Key.escape">Escape キー。</msg>
  <msg name="WinJS.Utilities.Key.space">Space キー。</msg>
  <msg name="WinJS.Utilities.Key.pageUp">PageUp キー。</msg>
  <msg name="WinJS.Utilities.Key.pageDown">PageDown キー。</msg>
  <msg name="WinJS.Utilities.Key.end">End キー。</msg>
  <msg name="WinJS.Utilities.Key.home">Home キー。</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">左方向キー。</msg>
  <msg name="WinJS.Utilities.Key.upArrow">上方向キー。</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">右方向キー。</msg>
  <msg name="WinJS.Utilities.Key.downArrow">下方向キー。</msg>
  <msg name="WinJS.Utilities.Key.insert">Insert キー。</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">Del キー。</msg>
  <msg name="WinJS.Utilities.Key.num0">数字の 0 キー。</msg>
  <msg name="WinJS.Utilities.Key.num1">数字の 1 キー。</msg>
  <msg name="WinJS.Utilities.Key.num2">数字の 2 キー。</msg>
  <msg name="WinJS.Utilities.Key.num3">数字の 3 キー。</msg>
  <msg name="WinJS.Utilities.Key.num4">数字の 4 キー。</msg>
  <msg name="WinJS.Utilities.Key.num5">数字の 5 キー。</msg>
  <msg name="WinJS.Utilities.Key.num6">数字の 6 キー。</msg>
  <msg name="WinJS.Utilities.Key.num7">数字の 7 キー。</msg>
  <msg name="WinJS.Utilities.Key.num8">数字の 8 キー。</msg>
  <msg name="WinJS.Utilities.Key.num9">数字の 9 キー。</msg>
  <msg name="WinJS.Utilities.Key.a">A キー。</msg>
  <msg name="WinJS.Utilities.Key.b">B キー。</msg>
  <msg name="WinJS.Utilities.Key.c">C キー。</msg>
  <msg name="WinJS.Utilities.Key.d">D キー。</msg>
  <msg name="WinJS.Utilities.Key.e">E キー。</msg>
  <msg name="WinJS.Utilities.Key.f">F キー。</msg>
  <msg name="WinJS.Utilities.Key.g">G キー。</msg>
  <msg name="WinJS.Utilities.Key.h">H キー。</msg>
  <msg name="WinJS.Utilities.Key.i">I キー。</msg>
  <msg name="WinJS.Utilities.Key.j">J キー。</msg>
  <msg name="WinJS.Utilities.Key.k">K キー。</msg>
  <msg name="WinJS.Utilities.Key.l">L キー。</msg>
  <msg name="WinJS.Utilities.Key.m">M キー。</msg>
  <msg name="WinJS.Utilities.Key.n">N キー。</msg>
  <msg name="WinJS.Utilities.Key.o">O キー。</msg>
  <msg name="WinJS.Utilities.Key.p">P キー。</msg>
  <msg name="WinJS.Utilities.Key.q">Q キー。</msg>
  <msg name="WinJS.Utilities.Key.r">R キー。</msg>
  <msg name="WinJS.Utilities.Key.s">S キー。</msg>
  <msg name="WinJS.Utilities.Key.t">T キー。</msg>
  <msg name="WinJS.Utilities.Key.u">U キー。</msg>
  <msg name="WinJS.Utilities.Key.v">V キー。</msg>
  <msg name="WinJS.Utilities.Key.w">W キー。</msg>
  <msg name="WinJS.Utilities.Key.x">X キー。</msg>
  <msg name="WinJS.Utilities.Key.y">Y キー。</msg>
  <msg name="WinJS.Utilities.Key.z">Z キー。</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">左 Windows キー。</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">右 Windows キー。</msg>
  <msg name="WinJS.Utilities.Key.menu">メニュー キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad0">テンキーの 0 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad1">テンキーの 1 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad2">テンキーの 2 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad3">テンキーの 3 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad4">テンキーの 4 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad5">テンキーの 5 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad6">テンキーの 6 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad7">テンキーの 7 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad8">テンキーの 8 キー。</msg>
  <msg name="WinJS.Utilities.Key.numPad9">テンキーの 9 キー。</msg>
  <msg name="WinJS.Utilities.Key.multiply">* キー。</msg>
  <msg name="WinJS.Utilities.Key.add">+ キー。</msg>
  <msg name="WinJS.Utilities.Key.subtract">- キー。</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">. キー。</msg>
  <msg name="WinJS.Utilities.Key.divide">/ キー。</msg>
  <msg name="WinJS.Utilities.Key.F1">F1 キー。</msg>
  <msg name="WinJS.Utilities.Key.F2">F2 キー。</msg>
  <msg name="WinJS.Utilities.Key.F3">F3 キー。</msg>
  <msg name="WinJS.Utilities.Key.F4">F4 キー。</msg>
  <msg name="WinJS.Utilities.Key.F5">F5 キー。</msg>
  <msg name="WinJS.Utilities.Key.F6">F6 キー。</msg>
  <msg name="WinJS.Utilities.Key.F7">F7 キー。</msg>
  <msg name="WinJS.Utilities.Key.F8">F8 キー。</msg>
  <msg name="WinJS.Utilities.Key.F9">F9 キー。</msg>
  <msg name="WinJS.Utilities.Key.F10">F10 キー。</msg>
  <msg name="WinJS.Utilities.Key.F11">F11 キー。</msg>
  <msg name="WinJS.Utilities.Key.F12">F12 キー。</msg>
  <msg name="WinJS.Utilities.Key.numLock">NumLock キー。</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">ScrollLock キー。</msg>
  <msg name="WinJS.Utilities.Key.browserBack">ブラウザーの戻るキー。</msg>
  <msg name="WinJS.Utilities.Key.browserForward">ブラウザーの進むキー。</msg>
  <msg name="WinJS.Utilities.Key.semicolon">セミコロン キー。</msg>
  <msg name="WinJS.Utilities.Key.equal">= キー。</msg>
  <msg name="WinJS.Utilities.Key.comma">, キー。</msg>
  <msg name="WinJS.Utilities.Key.dash">- キー。</msg>
  <msg name="WinJS.Utilities.Key.period">ピリオド キー。</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">/ キー。</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">` キー。</msg>
  <msg name="WinJS.Utilities.Key.openBracket">[ キー。</msg>
  <msg name="WinJS.Utilities.Key.backSlash">\ キー。</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">] キー。</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">' キー。</msg>
  <msg name="WinJS.Utilities.data">指定された要素に関連付けられているデータ値を取得します。</msg>
  <msg name="WinJS.Utilities.data_p:element">要素。</msg>
  <msg name="WinJS.Utilities.data_returnValue">値に関連付けられている要素。</msg>
  <msg name="WinJS.Utilities.hasClass">指定した要素が指定したクラスを持つかどうかを確認します。</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">指定した要素が指定したクラスを含む場合は True、それ以外の場合は False。</msg>
  <msg name="WinJS.Utilities.addClass">指定したクラスを指定された要素に追加します。スペース区切りの名前を使用して複数のクラスを追加できます。</msg>
  <msg name="WinJS.Utilities.addClass_p:e">クラスを追加する要素。</msg>
  <msg name="WinJS.Utilities.addClass_p:name">追加するクラスの名前。スペース区切りの名前を使用して、複数のクラスを追加できます。</msg>
  <msg name="WinJS.Utilities.removeClass">指定した要素から指定したクラスを削除します。</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">クラスを削除する要素。</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">削除するクラスの名前。</msg>
  <msg name="WinJS.Utilities.toggleClass">指定した要素の指定したクラスを切り替えます (追加または削除)。クラスがある場合は削除、ない場合は追加されます。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">クラスを切り替える対象の要素。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">切り替えるクラスの名前。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">指定された親に相対する指定された要素の左座標を取得します。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">相対的な左座標。</msg>
  <msg name="WinJS.Utilities.getRelativeTop">指定された親に相対する要素の上座標を取得します。</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">相対的な上座標。</msg>
  <msg name="WinJS.Utilities.empty">指定された要素からすべての子ノードを削除します。</msg>
  <msg name="WinJS.Utilities.getContentWidth">指定した要素のコンテンツの幅を取得します。コンテンツ幅に、境界線または埋め込みは含まれません。</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">要素のコンテンツの幅。</msg>
  <msg name="WinJS.Utilities.getTotalWidth">余白を含んだ要素の幅を取得します。</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">余白を含んだ要素の幅。</msg>
  <msg name="WinJS.Utilities.getContentHeight">指定した要素のコンテンツの高さを取得します。コンテンツ高さに、境界線または埋め込みは含まれません。</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">要素のコンテンツの高さ。</msg>
  <msg name="WinJS.Utilities.getTotalHeight">余白を含んだ要素の高さを取得します。</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">余白を含んだ要素の高さ。</msg>
  <msg name="WinJS.Utilities.getPosition">指定した要素の位置を取得します。</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">要素の左、上、幅、高さプロパティを含むオブジェクト。</msg>
  <msg name="WinJS.Utilities.convertToPixels">指定された要素の CSS の配置文字列をピクセルに変換します。</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">CSS の配置文字列。</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">ピクセル数。</msg>
  <msg name="WinJS.Utilities.eventWithinElement">指定したイベントが指定した要素内で起こったかどうかを確認します。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">イベント。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">イベントが要素内で起こった場合は True、それ以外の場合は False。</msg>
  <msg name="WinJS.UI.Pages.dispose">この Page を破棄します。</msg>
  <msg name="WinJS.UI.Pages._mixin.load">指定された URI から DOM 要素のコピーを作成します。このオーバーライドを使用するためには、負荷のオーバーライドを含むページが、WinJS.UI.Pages.render() が呼び出される前に WinJS.UI.Pages.define() を呼び出すことで定義される必要があります。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">DOM 要素のコピー元の URI。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">非同期操作が必要な場合の、満たされた値が親のない DOM 要素のセットである約束。そうでない場合、何も返しません。</msg>
  <msg name="WinJS.UI.Pages._mixin.init">コントロールのコンテンツが設定される前に、コントロールを初期化します。コントロールのコンテンツが設定された後に行う必要がある、任意の初期化のための処理されたメソッドを使用します。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">ページのすべてのコンテンツを含む DOM 要素。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">ページのコンストラクターに渡されたオプション。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">非同期操作が必要な場合に、初期化が完了したときに満たされる約束。そうでない場合、何も返しません。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">コントロールのコンテンツが設定された後に、コントロールを初期化します。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">ページのコンストラクターに渡されるオプション。</msg>
  <msg name="WinJS.UI.Pages._mixin.render">通常、loadResult パラメーターで指定された要素を指定した要素をに追加したとき、コントロールを描画します。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">ページのコンストラクターに渡されたオプション。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">load メソッドから返された要素。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">非同期操作が必要な場合に、描画が完了したときに満たされる約束。そうでない場合、何も返しません。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">すべての初期化と描画が完了した後に呼び出されます。この時点で、要素は使用できます。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">ページのすべてのコンテンツを含む DOM 要素。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">ページのコンストラクターに渡されたオプション</msg>
  <msg name="WinJS.UI.Pages._mixin.error">ページの処理中にエラーが発生すると呼び出されます。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">発生したエラー。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">エラーが処理されたときは無し、エラーが処理されなかったときはエラー約束。</msg>
  <msg name="WinJS.UI.Pages.define">指定した URI から、指定したメンバーを含む新しいページ コントロールを作成します。同じ URI に対してこのメソッドを複数回呼び出すことができ、すべてのメンバーがマージされます。</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">ページを定義するコンテンツの URI。</msg>
  <msg name="WinJS.UI.Pages.define_p:members">コントロールが持つ追加のメンバー。</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">ページを作成するコンストラクター関数。</msg>
  <msg name="WinJS.UI.Pages.get">指定された URI の定義済みページ コントロールを取得するか、新しく作成します。</msg>
  <msg name="WinJS.UI.Pages.render">指定されたオプションで指定された要素内に、指定された URI からのページ コントロールを作成します。</msg>
  <msg name="WinJS.UI.Pages.render_p:element">ページに取り込む要素。</msg>
  <msg name="WinJS.UI.Pages.render_p:options">ページを構成するオプション。</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">最終ドキュメントが指定した要素の親になるときに満たされる約束。</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">ページが表示を完了したときに満たされる約束。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">指定された URI のコンテンツを指定された要素にコピーします。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">コピーするフラグメントを含む URI。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">フラグメントの追加先の要素。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">フラグメントが読み込まれたときに満たされる約束。ターゲット要素が指定されていない場合、コピーされたフラグメントは完了値です。</msg>
  <msg name="WinJS.UI.Fragments.cache">指定した位置でフラグメントの読み込みを開始します。返された約束は、フラグメントがコピーできるようになると完了します。</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">コピーするフラグメントを含む URI。</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">フラグメントのコピーが準備できたときに満たされる約束。</msg>
  <msg name="WinJS.UI.Fragments.clearCache">指定したフラグメントに関するキャッシュされた情報を削除します。このメソッドは、フラグメントによって参照されるスクリプトまたはスタイルをアンロードしません。</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">クリアするフラグメントを含む URI。URI が提供されていない場合、キャッシュのすべてのコンテンツはクリアされます。</msg>
  <msg name="WinJS.UI.isAnimationEnabled">WinJS Animation Library でアニメーションを実行するかどうかを決定します。</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">WinJS のアニメーションを行う場合は True。WinJS のアニメーションを抑制する場合は False。</msg>
  <msg name="WinJS.UI.disableAnimations">アニメーション有効カウントをデクリメントすることで、WinJS Animation Library のアニメーションを無効にします。</msg>
  <msg name="WinJS.UI.enableAnimations">アニメーション有効カウントをインクリメントすることで、WinJS Animation Library のアニメーションを有効にします。</msg>
  <msg name="WinJS.UI.executeAnimation">他の Animation Library のアニメーションと共存できる CSS アニメーションを実行します。アプリケーションがこの関数を直接呼び出すことは想定されていません。Animation Library の高度なアニメーションの使用を選ぶ必要があります。</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">CSS アニメーションを実行する単一の要素またはコレクション。</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">単一のアニメーションの説明またはその配列。</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">CSS アニメーションが終了すると完了する約束のオブジェクト。</msg>
  <msg name="WinJS.UI.executeTransition">他の Animation Library のアニメーションと共存できる CSS トランジションを実行します。アプリケーションがこの関数を直接呼び出すことは想定されていません。Animation Library の高度なアニメーションの使用を選ぶ必要があります。</msg>
  <msg name="WinJS.UI.executeTransition_p:element">CSS トランジションを実行する単一要素またはコレクション。</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">単一のトランジションの説明またはその配列。</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">CSS トランジションが終了すると完了する約束のオブジェクト。</msg>
  <msg name="WinJS.UI.eventHandler">宣言型処理と互換性のあるものとしてイベント ハンドラー関数をマークします。</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">宣言型処理と互換性のあるものとしてマークされるハンドラー。</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">入力ハンドラー。</msg>
  <msg name="WinJS.UI.Orientation">コントロールのプロパティに関する方向オプション</msg>
  <msg name="WinJS.UI.Orientation.horizontal">[水平方向]</msg>
  <msg name="WinJS.UI.Orientation.vertical">[垂直方向]</msg>
  <msg name="WinJS.Application.event.setPromise">非同期処理が行われていること、および約束が完了するまでこのイベント ハンドラーは完了と見なされないことを、アプリケーション オブジェクトに通知するために使用します。</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">待機する約束。</msg>
  <msg name="WinJS.Application.queueEvent">WinJS.Application のイベント キューで処理するイベントを、キューに追加します。</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">イベント オブジェクトは、WinJS.Application のイベント キューに送られるときにイベント名として使用する型のプロパティがあると想定されます。イベントの詳細なプロパティのイベント リスナーに、オブジェクト全体が提供されます。</msg>
  <msg name="WinJS.Application.stop">アプリケーション イベント処理を停止し、WinJS.Application を初期状態にリセットします。</msg>
  <msg name="WinJS.Application.checkpoint">チェックポイントのイベントをキューに追加します。</msg>
  <msg name="WinJS.Application.start">WinJS.Application のイベント キューのイベント処理を開始します。</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">非同期処理が行われていること、および約束が完了するまでこのイベント ハンドラーは完了と見なされないことを、ListView に通知するために使用します。</msg>
  <msg name="WinJS.Navigation.canGoForward">次に進むことができるかどうかを指定します。</msg>
  <msg name="WinJS.Navigation.canGoBack">前に戻ることができるかどうかを指定します。</msg>
  <msg name="WinJS.Navigation.location">現在の場所を取得します。</msg>
  <msg name="WinJS.Navigation.state">ナビゲーション状態を取得または設定します。</msg>
  <msg name="WinJS.Navigation.history">ナビゲーション履歴を取得または設定します。</msg>
  <msg name="WinJS.Navigation.forward">前に進みます。</msg>
  <msg name="WinJS.Navigation.forward_p:distance">次に進むエントリーの数。</msg>
  <msg name="WinJS.Navigation.forward_returnValue">ナビゲーションが正常に行われたかどうかを示す値で満たされる約束。</msg>
  <msg name="WinJS.Navigation.back">前に戻ります。</msg>
  <msg name="WinJS.Navigation.back_p:distance">履歴で前に戻るエントリーの数。</msg>
  <msg name="WinJS.Navigation.navigate">場所に移動します。</msg>
  <msg name="WinJS.Navigation.navigate_p:location">移動先の場所。通常、場所は文字列ですが、別のものの可能性もあります。</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">WinJS.Navigation.state でアクセスできるナビゲーションの状態。</msg>
  <msg name="WinJS.Application.local">アプリケーションのローカル ストレージにファイルを作成するアクセスが許可され、アプリケーションの実行中は維持されますが、ローミングされません。</msg>
  <msg name="WinJS.Application.temp">アプリケーションの一時ストレージにファイルを作成するアクセスが許可され、アプリケーションの実行ごとにシステムがによって解放される場合があります。</msg>
  <msg name="WinJS.Application.roaming">アプリケーションのローミング ストレージにファイルを作成するアクセスが許可され、アプリケーションの実行中は維持され、複数のコンピューターにわたってユーザーにローミングされます。</msg>
  <msg name="WinJS.Binding.observableMixin.notify">プロパティ値が変更されたことをリスナーに通知します。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">変更するプロパティの名前。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">プロパティの新しい値。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">プロパティの古い値。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">通知が完了したときに満たされる約束。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">与えられたプロパティの通知リストから 1 つ以上のリスナーを削除します。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">バインディング解除するプロパティの名前です。このパラメーターを省略すると、すべてのイベントのすべてのリスナーは削除されます。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">指定されたプロパティのリスナーのリストから削除する関数。このパラメーターを省略すると、指定されたプロパティのすべてのリスナーは削除されます。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">プロパティ値を名前で取得します。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">取得するプロパティの名前です。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">観測可能なオブジェクトとしてのプロパティの値。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">プロパティ値を変更し、任意のリスナーに通知します。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">更新するプロパティの名前。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">プロパティの新しい値。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">ECMAScript5 プロパティ定義を含めて、変更通知と共にこのオブジェクトにプロパティを追加します。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">追加するプロパティの名前。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">プロパティの値。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">このプロパティの変更の通知が処理されたときに完了する約束。複数の通知をひとまとめにすると、約束がキャンセルされる場合や、約束の値が更新される場合があります。満たされた約束の値は、通知が完了したプロパティの新しい値です。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">プロパティ値を削除します。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">削除するプロパティの名前。</msg>
  <msg name="WinJS.Binding.bind">観測可能なオブジェクトまたはそのオブジェクトの子の値の、1 つ以上のプロパティへバインディングします。</msg>
  <msg name="WinJS.Binding.bind_p:observable">バインディング先のオブジェクト。</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">バインディング宣言を含むオブジェクト リテラル。バインディング宣言は、{ propertyName: (function | bindingDeclaration), ...} の形式です。たとえば、オブジェクトの入れ子になったメンバーにバインディングするには、bind(someObject, { address: { street: function(v) { ... } } }) のように宣言します。} } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">このバインディング要求に関連付けられているすべてのバインディングを削除する関数である、少なくとも "cancel" フィールドを含むオブジェクト。</msg>
  <msg name="WinJS.Binding.expandProperties">指定されたオブジェクトをラップし、すべてのプロパティがバインディングに対応するようします。これは、バインディング混合と組み合わせて使用するように設計されています。</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">バインディングできるオブジェクトの仕様。</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">バインディングのために接続された一連のプロパティを持つオブジェクト。</msg>
  <msg name="WinJS.Binding.define">指定された一連のプロパティの可観測性をサポートする新しいコンストラクター関数を作成します。</msg>
  <msg name="WinJS.Binding.define_p:data">var MyPointClass = define({x:0,y:0}); など、プロパティのセットを定義するパターンとして使用するオブジェクト</msg>
  <msg name="WinJS.Binding.define_returnValue">プロパティの初期状態である 1 種類の省略できる引数のコンストラクター関数。</msg>
  <msg name="WinJS.Binding.define.return">新しい観測可能なオブジェクトを作成します。</msg>
  <msg name="WinJS.Binding.define.return_p:init">プロパティの初期値。</msg>
  <msg name="WinJS.Binding.as">観測可能なオブジェクトを返します。これは、指定されたオブジェクトの観測可能なプロキシ、既存のプロキシ、または可観測性を直接サポートする場合は指定されたオブジェクト自体である場合があります。</msg>
  <msg name="WinJS.Binding.as_p:data">可観測性の提供先のオブジェクト。</msg>
  <msg name="WinJS.Binding.as_returnValue">観察可能なオブジェクト。</msg>
  <msg name="WinJS.Binding.unwrap">指定されたオブジェクトが観察可能なプロキシの場合は、元のオブジェクト (観測不可能) を返します。</msg>
  <msg name="WinJS.Binding.unwrap_p:data">元の値の取得対象となるオブジェクト。</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">指定されたオブジェクトが観測可能なプロキシの場合は、元のオブジェクトを返し、それ以外の場合は同じオブジェクトを返します。</msg>
  <msg name="WinJS.Binding.Template.render.value">URI に基づいてテンプレートを表示します。</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">テンプレートの読み込み元の URI。</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">バインディング終了後に完了する約束。値は、コンテナー パラメーターのオブジェクトまたは作成された DIV のいずれかです。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">与えられたデータにバインディングされ、QueryCollection に含まれる要素が親になるテンプレートを表示します。QueryCollection が複数の要素を含む場合、テンプレートは QueryCollection の各要素にデータ項目が渡されるごとに、一度ずつ表示されます。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">テンプレート コントロールが関連付けられた DOM 要素。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">表示するデータ。データが配列 (または forEach メソッドを持つ任意のオブジェクト) のとき、テンプレートはコレクションの項目ごとに、一度ずつ表示されます。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">提供された場合、この関数はテンプレートが表示されるたびに呼び出され、テンプレートの表示が完了したときに満たされる約束を渡されます。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">QueryCollection。</msg>
  <msg name="WinJS.Binding.declarativeBind">指定されたデータ コンテキストの値を指定されたルート要素の子孫要素にバインディングし、宣言型バインディング属性 (data-win-bind) を持ちます。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">バインディングする要素の走査を開始する位置を示す要素。このパラメーターを省略した場合、文書全体を検索します。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">キャッシュ バインディング データ。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">バインディング式で初期化子が指定されていない場合に使用される、バインディングの初期化子。指定しない場合の動作は、WinJS.Binding.defaultBind と同じです。</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">バインディング宣言を含む各項目が処理され、更新が開始したときに完了する約束。</msg>
  <msg name="WinJS.Binding.converter">ソース プロパティの値で実行される与えられたコンバーター関数を使用して、ソース プロパティとターゲット プロパティの間のバインディングの既定のバインディングの初期化子を作成します。</msg>
  <msg name="WinJS.Binding.converter_p:convert">ターゲット プロパティに設定する値を生成するためのソース プロパティの結果に対して行われる変換。</msg>
  <msg name="WinJS.Binding.converter_returnValue">バインディングの初期化子。</msg>
  <msg name="WinJS.Binding.setAttribute">ソース オブジェクトとターゲット要素の属性との間に一方通行のバインディングを作成します。</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">ソース オブジェクト。</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">ソース オブジェクトのソース プロパティへのパス。</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">ターゲット オブジェクト (DOM 要素である必要があります)。</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">ターゲット オブジェクトのターゲット プロパティへのパス。これは単一の名前である必要があります。</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">ターゲットの既知の初期値に関して、ソース値がこの初期値と同じである (=== を使用) 場合は、最初はターゲットは設定されません。</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">バインディングを結合するために使用される cancel メソッドのオブジェクト。</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">ターゲット要素の属性をソース プロパティの値に設定します。</msg>
  <msg name="WinJS.Binding.addClassOneTime">ターゲット要素に対応するクラスを、ソース プロパティの値に追加します。</msg>
  <msg name="WinJS.Binding.defaultBind">ソース オブジェクトとターゲット オブジェクトの間に一方通行のバインディングを作成します。</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">ターゲット オブジェクト。</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">ターゲット オブジェクトのターゲット プロパティへのパス。</msg>
  <msg name="WinJS.Binding.oneTime">ターゲット プロパティをソース プロパティの値に設定します。</msg>
  <msg name="WinJS.Binding.initializer">カスタム初期化関数を、宣言型データ バインディングと互換性があるものとしてマークします。</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">宣言型データ バインディングと互換性があるものとしてマークするカスタム初期化子。</msg>
  <msg name="WinJS.Binding.initializer_returnValue">入力の customInitializer。</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">指定されたキーで識別される値は、異なる値に置き換えられました。</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">新しい値がリストに挿入されました。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">指定されたキーで識別される値は、リストのあるインデックスから別のインデックスに移動しました。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">指定されたキーで識別される値は変更されました。</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">指定されたキーで識別される値はリストから削除されました。</msg>
  <msg name="WinJS.Binding.ListBase.onreload">リストは更新されました。リスト項目への参照は正しくない場合があります。</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">リストがリスナーに更新の通知を強制的に送信するようにします。</msg>
  <msg name="WinJS.Binding.ListBase.getAt">指定したインデックス位置にある値を取得します。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">取得する値のインデックス。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">指定したインデックスにある値。</msg>
  <msg name="WinJS.Binding.ListBase.concat">2 つの配列を連結した新しいリストを返します。</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">リストの連結と他の提供された項目を含む配列。</msg>
  <msg name="WinJS.Binding.ListBase.join">指定した区切り記号文字列で区切られた、リストのすべての要素から構成される文字列を返します。</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">リストの要素を区切るために使用する文字列。このパラメーターを省略した場合、リストの要素はコンマで区切られます。</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">指定した区切り記号文字列で区切られた要素。</msg>
  <msg name="WinJS.Binding.ListBase.slice">リストのセクションを抽出し、新しいリストを返します。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">セクションの開始を指定するインデックス。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">セクションの終了を指定するインデックス。</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">配列の一部を返します。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">リストで最初に見つかった指定した値のインデックスを取得します。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">リスト内で検索する値。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">検索の開始点を示すインデックス。fromIndex を省略すると、検索はインデックス 0 から開始します。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">リストで最初に見つかった値のインデックス、見つからなかった場合には -1。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">リストで値が最後に見つかったインデックスを取得します。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">検索の開始点を示すインデックス。fromIndex を省略すると、検索はリストの最後のインデックスから開始します。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">リストで値が最後に見つかったインデックス、見つからなかった場合には -1。</msg>
  <msg name="WinJS.Binding.ListBase.every">指定されたコールバック関数がリストのすべての要素に対して True を返すかどうかをチェックします。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">3 つまでの引数を受け取る関数。この関数は、False を返すか、リストの末尾にたどり着くまで、リストの各要素に対して呼び出されます。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">コールバック関数でこのキーワードが参照することができるオブジェクト。thisArg を省略すると、"undefined" が使用されます。</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">コールバックがリストのすべての要素に対して True を返す場合は True。</msg>
  <msg name="WinJS.Binding.ListBase.filter">コールバック関数で指定された条件を満たすリストの要素を返します。</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">3 つまでの引数を受け取る関数。リストの各要素に対してこの関数が呼び出されます。</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">コールバック関数で指定された条件を満たす要素を含む配列。</msg>
  <msg name="WinJS.Binding.ListBase.forEach">リストの各要素に対して、指定されたコールバック関数を呼び出します。</msg>
  <msg name="WinJS.Binding.ListBase.map">リストの各要素に対して、指定されたコールバック関数を呼び出し、結果を含む配列を返します。</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">リストの各要素に対してコールバック関数を呼び出した結果を含む配列。</msg>
  <msg name="WinJS.Binding.ListBase.some">指定されたコールバック関数がリストの任意の要素に対して True を返すかどうかをチェックします。</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">3 つまでの引数を受け取る関数。この関数は、True を返すか、リストの末尾にたどり着くまで、リストの各要素に対して呼び出されます。</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">コールバックがリストの任意の要素に対して True を返す場合は True。</msg>
  <msg name="WinJS.Binding.ListBase.reduce">リストのすべての要素に対して指定されたコールバック関数を呼び出して、単一の結果を収集します。コールバック関数の戻り値は収集された結果で、コールバック関数の次の呼び出しの引数として提供されます。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">4 つまでの引数を受け取る関数。リストの各要素に対してこの関数が呼び出されます。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">initialValue を指定すると、累積を開始する値として使用されます。関数の最初の呼び出しのとき、リスト値の代わりにこの値を引数として使用します。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">コールバック関数の最後の呼び出しの戻り値。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">リストのすべての要素に対して、指定されたコールバック関数を降順で呼び出して、単一の結果を収集します。コールバック関数の戻り値は収集された結果で、コールバック関数の次の呼び出しの引数として提供されます。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">initialValue を指定すると、累積を開始する値として使用されます。callbackfn 関数の最初の呼び出しのとき、リスト値の代わりにこの値を引数として使用します。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">コールバック関数の最後の呼び出しの戻り値。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">このリストに対してライブ フィルター射影を作成します。リストが変更されると、フィルター射影はそれらの変更に反応して変更される場合があります。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">1 つの引数を受け取る関数。createFiltered 関数は、リストの各要素についてコールバックを呼び出します。関数が True を返す場合、その要素はフィルター処理されたリストに含まれます。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">リストに対するフィルター射影。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">このリストに対してライブ グループ射影を作成します。リストが変更されると、グループ射影はそれらの変更に反応して変更する場合があります。グループ射影は、グループが連続的な順序でリストのすべての要素を並べ替えます。グループ射影には、リストで見つかったグループを表す WinJS.Binding.List である .groups のプロパティも含まれています。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">1 つの引数を受け取る関数。この関数はリストの各要素について呼び出され、要素を含むグループを表す文字列を返す必要があります。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">1 つの引数を受け取る関数。各グループのリストの要素に対してこの関数が呼び出されます。これは、このグループの .groups リストの要素のデータとして設定される値を返す必要があります。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">2 つの引数を受け取る関数。関数は、リストにあるグループのキーによって呼び出されます。これは、最初の引数が 2 番目より小さい場合は負数、2 つの引数が等しい場合はゼロ、最初の引数が 2 番目より大きい場合は正数の、いずれか 1 つを必ず返します。省略した場合、グループは ASCII 文字の昇順で並べ替えられます。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">リストに対するグループ射影。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">このリストに対してライブ ソート射影を作成します。リストが変更されると、ソート射影はそれらの変更に反応して変更する場合があります。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">2 つの引数を受け取る関数。リストの要素でこの関数が呼び出されます。これは、最初の引数が 2 番目より小さい場合は負数、2 つの引数が等しい場合はゼロ、最初の引数が 2 番目より大きい場合は正数の、いずれか 1 つを必ず返します。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">リストに対するソート射影。</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">基になる WinJS.Binding.List からこの WinJS.Binding.List への射影を解除します。これは、別々の有効期間がある場合にのみ重要です。</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">指定されたキーのキー/データのペアを取得します。</msg>
  <msg name="WinJS.Binding.ListProjection.move">インデックスの位置にある値を newIndex に移動します。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">リスト内で定義されている最上位の要素のインデックスより 1 だけ大きい整数値を返します。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">指定されたインデックスのキー/データのペアを返します。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">取得する値のインデックス。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">リストで最初に見つかったキーのインデックスを返します。</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">リストの長さを取得または設定します。リスト内で定義されている最上位の要素のインデックスより 1 だけ大きい整数値を返します。</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">最初に見つかったキーのインデックスを返します。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">このリストで指定されたグループの射影である WinJS.Binding.List を取得します。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">指定された項目キーのキー/データのペアを取得します。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">リストの長さを取得します。リスト内で定義されている最上位の要素のインデックスより 1 だけ大きい整数値を返します。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">指定されたインデックスのキー/データのペアを取得します。</msg>
  <msg name="WinJS.Resources.processAll">リソース タグを処理し、文字列をローカライズされた文字列で置き換えます。</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">処理を開始する DOM 要素。processAll は、要素およびその子要素を処理します。ルート要素を指定しない場合、processAll はドキュメント全体を処理します。</msg>
</messagebundle>