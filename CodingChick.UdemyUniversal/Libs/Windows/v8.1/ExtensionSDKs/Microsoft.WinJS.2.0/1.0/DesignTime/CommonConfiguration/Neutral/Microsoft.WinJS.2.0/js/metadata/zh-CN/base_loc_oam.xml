<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">试图取消完成承诺的值。如果未完成目标或支持取消操作，该目标将进入 Error ("Canceled") 值的错误状态。</msg>
  <msg name="WinJS.PromiseStateMachine.done">允许您指定工作在承诺值的实现上完成，如果该目标不能实现值则将执行错误处理，且随之带有进程通知的处理。处理程序完成执行后，此函数将引发可能已从 then() 中作为错误状态中的承诺返回的任何错误。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">如果使用值成功实现了该承诺，则将调用函数。传递实现了的值为单个参数。如果该值为 Null，则将返回实现了的值从函数中返回的值成为了 then() 返回的承诺的实现值。如果在执行函数时引发异常，then() 返回的承诺将移动到错误状态。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">如果使用错误实现了该承诺，则将调用函数。传递该错误为单个参数。如果该错误是 Null，则转发它。从函数中返回的值是 then() 返回的承诺的实现值。</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">如果该承诺报告进程，则调用该函数。传递有关过程的数据传递为单个函数。不需要承诺来支持过程。</msg>
  <msg name="WinJS.PromiseStateMachine.then">允许您指定工作在承诺值的实现上完成，如果该目标不能实现值则将执行错误处理，且随之带有进程通知的处理。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">如果使用值成功实现了该承诺，则将调用函数。传递值为单个参数。如果该值为 Null，则将返回值从函数中返回的值成为了 then() 返回的承诺的实现值。如果在正执行此函数时引发异常，then() 返回的承诺将移动到错误状态。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">如果使用错误实现了该承诺，则将调用函数。传递该错误为单个参数。如果该错误是 Null，则转发它。从函数中返回的值成为了 then() 返回的承诺的实现值。</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">如果该承诺报告进程，则调用该函数。传递有关过程的数据传递为单个函数。不需要承诺来支持过程。</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">其值为执行完整函数或错误函数的结果的承诺。</msg>
  <msg name="WinJS.Promise">承诺提供了一个机制来安排工作在还未计算的值上完成。这是为管理异步 API 的交互的方便抽象。</msg>
  <msg name="WinJS.Promise_p:init">在构造承诺期间调用的函数。已为该形参提供了三个实参（完整、错误、进程）。在此函数内部，您应该为此值支持的通知添加事件侦听器。</msg>
  <msg name="WinJS.Promise_p:oncancel">如果此承诺的使用者想取消其未完成的工作，则调用函数。不需要承诺来支持取消。</msg>
  <msg name="WinJS.Promise.addEventListener">将时间侦听器添加到控制台。</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">事件的类型（名称）。</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">引发事件时调用侦听器。</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">指定是否初始化捕获。</msg>
  <msg name="WinJS.Promise.any">当输入承诺之一已实现后，则返回已实现的承诺。</msg>
  <msg name="WinJS.Promise.any_p:values">包含承诺对象或其属性值包括承诺对象的对象的数组。</msg>
  <msg name="WinJS.Promise.any_returnValue">产生输入（完整或错误）的值的实现上的承诺。</msg>
  <msg name="WinJS.Promise.as">返回一个承诺。如果该对象已是一个承诺，则返回；否则该对象将在承诺中换行。</msg>
  <msg name="WinJS.Promise.as_p:value">被视为承诺的值。</msg>
  <msg name="WinJS.Promise.as_returnValue">承诺。</msg>
  <msg name="WinJS.Promise.cancel">已取消的承诺值可以从承诺完成处理程序返回以指示承诺链的取消。</msg>
  <msg name="WinJS.Promise.dispatchEvent">引发指定类型和属性的事件。</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">附加到事件对象的附加属性的集。</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">指定是否在该事件上调用 preventDefault。</msg>
  <msg name="WinJS.Promise.is">确定值是否实现承诺协定。</msg>
  <msg name="WinJS.Promise.is_p:value">可能为承诺的值。</msg>
  <msg name="WinJS.Promise.is_returnValue">如果指定值为承诺，则为 True，否则为 False。</msg>
  <msg name="WinJS.Promise.join">创建在实现所有值时所实现的承诺。</msg>
  <msg name="WinJS.Promise.join_p:values">其字段包含值的对象，其中一些可能为承诺。</msg>
  <msg name="WinJS.Promise.join_returnValue">其值是带有与值参数中的对象的字段名称相同的字段名称的对象的承诺，在该值参数处，每个字段值是承诺的实现值。</msg>
  <msg name="WinJS.Promise.removeEventListener">将从控制台移除事件侦听器。</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">要移除的侦听器。</msg>
  <msg name="WinJS.Promise.then">承诺实例方法 then() 的静态版本。</msg>
  <msg name="WinJS.Promise.then_p:value">被视为一个承诺的值。</msg>
  <msg name="WinJS.Promise.then_p:complete">如果使用值实现了该承诺，则将调用函数。如果为 Null，则该承诺将只返回值。传递值为单个参数。</msg>
  <msg name="WinJS.Promise.then_p:error">如果使用错误实现了该承诺，则将调用函数。传递该错误为单个参数。</msg>
  <msg name="WinJS.Promise.then_returnValue">其值为执行提供的完整函数的结果的承诺。</msg>
  <msg name="WinJS.Promise.thenEach">在所有输入承诺上执行操作，返回拥有该输入的形状的承诺，并包括在每个输入上执行了的操作的结果。</msg>
  <msg name="WinJS.Promise.thenEach_p:values">其中一些或所有的都是承诺的值（可能为数组或对象）的集。</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">如果使用值实现了该承诺，则将调用函数。如果值为 Null，承诺将返回该值。传递值为单个参数。</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">为在值参数上调用 Promise.join 的结果的承诺。</msg>
  <msg name="WinJS.Promise.timeout">创建一个在超时后实现的承诺。</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">超时时间（以毫秒为单位）。如果该值为零或没有调用指定的 setImmediate，则调用 setTimeout。</msg>
  <msg name="WinJS.Promise.timeout_p:promise">将在超时已过期前没有完成时取消的承诺。</msg>
  <msg name="WinJS.Promise.timeout_returnValue">在指定的超时后异步完成的承诺。</msg>
  <msg name="WinJS.Promise.wrap">在承诺中包装非承诺值。您可能会使用此函数（如果您需要传递值到需要承诺的函数）。</msg>
  <msg name="WinJS.Promise.wrap_p:value">在承诺中包装的一些非承诺值。</msg>
  <msg name="WinJS.Promise.wrap_returnValue">成功实现了指定值的承诺。</msg>
  <msg name="WinJS.Promise.wrapError">在承诺中包装非承诺错误值。您可能会使用此函数（如果您需要传递错误到需要承诺的函数）。</msg>
  <msg name="WinJS.Promise.wrapError_p:error">将在承诺中包装的非承诺错误值。</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">处于指定值的错误状态的承诺。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">获得指示作业是否已完成的值。如果作业已运行完成则此值为 true，如果尚未运行或已取消则此值为 false。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">获取该作业的唯一标识符。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">获取或设置指定此作业的诊断名称的字符串。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">获取此作业的所有者标记。可以使用此所有者标记的 cancelAll 方法取消相关作业。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">获取或设置计划程序执行此作业的优先级。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">取消作业。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">暂停作业。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">如果该作业已暂停，请恢复。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">该工作当前执行的作业实例。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">当该计划程序请求工作项协作让出资源时将变为 true 的布尔值。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">当工作项阻塞在异步工作中将被调用。该计划程序等待指定的承诺在重新计划工作之前完成。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">当完成时，能够提供要重新计划的工作项功能的承诺值。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">当工作项协作让行该计划程序并在以后需完成更多的工作时将被调用。当将要产生工作项时，请使用此方法来计划额外的工作。</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">将重新计划的工作函数。</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">取消与此所有者标记有关的全部作业。</msg>
  <msg name="WinJS.ErrorFromName">使用指定的名称和消息属性创建 Error 对象。</msg>
  <msg name="WinJS.ErrorFromName_p:name">此错误的名称。该名称被视为以编程的方式被使用，并不应该被本地化。</msg>
  <msg name="WinJS.ErrorFromName_p:message">此错误的消息。该消息被视为由人类使用，并应该被本地化。</msg>
  <msg name="WinJS.ErrorFromName_returnValue">填充的带有 .name 和 .message 属性的错误实例。</msg>
  <msg name="WinJS.Utilities.QueryCollection">表示查询选择器的结果，并提供执行针对集合的元素的操作的多个操作。</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">由该查询生成的项。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">执行 QueryCollection 中每个项上的操作</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">要在每个项上执行的操作。</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">要绑定到 callbackFn 的参数</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">返回 QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">从 QueryCollection 中获取项。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">要返回的项的索引。</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">来自集合的单个项。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">设置集合中的所有项上的特性值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">要设置的特性名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">要设置的特性的值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">此 QueryCollection 对象。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">从集合中的第一个元素获取特性值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">属性名。</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">属性的值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">将指定类添加到集合中的所有元素。</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">要添加的类的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">确定指定类是否存在于集合的第一个元素上。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">类的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">如果元素有指定类则为 True；否则为 False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">将指定类从集合中的所有元素中移除。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">将被移除的类的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">切换（添加或移除）集合中的所有元素的指定类。如果类存在，将移除它；如果它不存在，则添加它。</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">要切换的类的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">为集合中的所有元素上的指定事件注册侦听器。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">事件的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">事件发生时将调用的事件处理程序函数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">如果捕获则为 True == 将 True 传递到 addEventListener；否则为 False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">为集合中的所有元素上的指定事件取消注册侦听器。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">事件处理程序函数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">如果捕获则为 True == True；否则为 False。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">为集合中的所有元素设置指定样式属性。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">样式属性的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">属性的值。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">为集合中的所有元素清除指定样式属性。</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">要清除的样式属性的名称。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">执行集合中的所有元素的查询选择器并将结果聚集到 QueryCollection。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">查询选择器字符串。</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">包含在集合中的所有元素上执行查询的聚集结果的 QueryCollection 对象。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">将项的集添加到此 QueryCollection。</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">逃添加到 QueryCollection 的项。它可能是像数组的对象、文档片段或单个项。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">创建附加到此 QueryCollection 中的元素的控件。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">用于创建控件附加到组件的构造函数。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">传递到新建控件的选项。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">配置附加到此 QueryCollection 中的元素的控件。</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">传递到控件的选项。</msg>
  <msg name="WinJS.UI.HtmlControl">使您能够动态包括 HTML 页。</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">实例化 HtmlControl 的新实例来定义新页控件。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">承载 HtmlControl 的元素。</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">配置页的选项。需要 URI 以为页的内容指定资源文档。</msg>
  <msg name="WinJS.UI.TabContainer.constructor">构造 TabContainer。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">与 TabContainer 关联的 DOM 元素。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">最初应用于 TabContainer 的选项的集。</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">构造的 TabContainer。</msg>
  <msg name="WinJS.UI.TabContainer.dispose">配置选项卡容器。</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">获取或设置具有焦点的子元素。</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">获取或设置在控件的容器的控件的 Tab 键顺序。</msg>
  <msg name="WinJS.Application.IOHelper.exists">确定指定文件是否存在于容器中。</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">可能存在于此文件夹内的文件。</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">承诺为 True（文件存在）或 False。</msg>
  <msg name="WinJS.Application.IOHelper.remove">在容器中删除文件。</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">待删除的文件。</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">文件已被删除时实现的承诺。</msg>
  <msg name="WinJS.Application.IOHelper.writeText">使用指定文本将文件写入容器。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">要写入到的文件。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">待写入该文件的内容。</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">承诺写入的字符的计算。</msg>
  <msg name="WinJS.Application.IOHelper.readText">读取来自该容器的文件的内容，如果该文件不存在，则将返回 Def。</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">要从中读取的文件。</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">如果文件不能打开时返回的默认值。</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">承诺包含文件的内容或 Def。</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">可能存在于此文件夹中的文件名称。</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">删除容器中的文件。</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">要写入到的文件名</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">要从中读取的文件名称</msg>
  <msg name="WinJS.Binding.observableMixin.bind">将指定操作链接到指定于名称参数中的属性。此函数是属性的值可能已更改时调用的。不能保证操作只在值实际已更改时被调用，也不能保证将为每个值更改调用该操作。此函数的实现合并了更改通知，而导致对属性值的多个更新可能导致仅对指定操作的单个调用。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">绑定此操作所到的属性的名称。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">当已更改属性时异步调用的函数。</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">返回此对象。</msg>
  <msg name="WinJS.Binding.Template.constructor">创建模板并提供可重用的声明性绑定元素。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">要转换为模板的 DOM 元素。</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">如果提供此参数，将从 URI 加载模板并忽略元素参数。</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">是否已指定此函数为任意未明确指定的数据绑定的默认初始值。提供的函数必须标记为支持进程。</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">表示模板是否应在首先呈现的调试器中中断</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">将此属性设置为 true，以还原经典模板进程、数据绑定和禁用模板编译。</msg>
  <msg name="WinJS.Binding.Template.element">获取用于模板的 DOM 元素。</msg>
  <msg name="WinJS.Binding.Template.extractChild">返回模板的第一个子元素而不是承载所有模板内容的包装器元素。</msg>
  <msg name="WinJS.Binding.Template.processTimeout">延迟实例化声明性控件的毫秒数。零 (0) 将不会导致延迟，任何负数将导致 setImmediate 延迟，任何正数将被视为毫秒数。</msg>
  <msg name="WinJS.Binding.Template.render">将来自指定的数据上下文的值绑定到是指定的根元素的子代并拥有声明性绑定特性 (data-win-bind) 的元素。</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">用于默认数据绑定的对象。</msg>
  <msg name="WinJS.Binding.Template.render_p:container">要将所呈现的模板添加到其上的元素。如果省略了此参数，将创建新 DIV。</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">完成绑定后所完成的目标。该值是指定于容器参数中的元素或创建的 DIV。</msg>
  <msg name="WinJS.Binding.Template.renderItem">呈现此模板的实例，该模板是绑定到包含于项中的数据的模板。如果已回收的参数是存在的且 enableRecycling 为 True，则模板将尝试重新使用来自回收参数的 DOM 元素。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">包含绑定所到的数据的对象。只需要 item.data。</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">先前生成的模板实例。</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">DOM 元素。</msg>
  <msg name="WinJS.Binding.Template">提供可重用的生命性绑定元素。</msg>
  <msg name="WinJS.Binding.Template_name">模板</msg>
  <msg name="WinJS.Binding.List.constructor">创建 WinJS.Binding.List 对象。</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">包含实例化列表的元素的列表。</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">如果 options.binding 为 True，该列表将包含调用元素值上的 WinJS.Binding.as() 的结果。如果 options.proxy 为 True，指定为第一个参数的列表将用于 WinJS.Binding.List 的存储。应该谨慎使用此选项，因为数据存储的未协调编辑将导致错误。</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">新构造的 WinJS.Binding.List 实例。</msg>
  <msg name="WinJS.Binding.List.length">获取或设置该列表的长度，它是比定义在该列表中的最高元素高一的整数值。</msg>
  <msg name="WinJS.Binding.List.getItem">为指定列表索引获取键/数据对。</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">要检索的值的索引。</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">带有 .key 和 .data 属性的对象。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">为指定的列表项键获取键/数据对。</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">要检索的值的键。</msg>
  <msg name="WinJS.Binding.List.indexOfKey">获取键在列表中第一次出现的索引。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">要在列表中定位的键。</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">键在列表中第一个出现的索引或 -1（如果未找到）。</msg>
  <msg name="WinJS.Binding.List.move">将索引处的值移动到指定位置。</msg>
  <msg name="WinJS.Binding.List.move_p:index">值的原始索引。</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">移动后的值的索引。</msg>
  <msg name="WinJS.Binding.List.notifyMutated">强制列表为指定索引处的值向任何侦听器发送不可变通知。</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">已转变的值的索引。</msg>
  <msg name="WinJS.Binding.List.setAt">使用新值替换指定索引处的值。</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">已替换的值的索引。</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">新值。</msg>
  <msg name="WinJS.Binding.List.reverse">使用反转的元素返回列表。此方法就地反转了列表对象的元素。在执行过程中它不会创建新列表对象。</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">反向列表。</msg>
  <msg name="WinJS.Binding.List.sort">使用排序的元素返回列表。此方法就地对列表对象的元素进行了排序。在执行过程中它不会创建新列表对象。</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">用来确定元素顺序的函数。如果省略 ASCII 字符顺序，则将按升序对这些元素进行排序。</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">已排序的列表。</msg>
  <msg name="WinJS.Binding.List.pop">从列表中移动最后一个元素并返回它。</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">来自该列表的最后一个元素。</msg>
  <msg name="WinJS.Binding.List.push">将新元素追加到列表并返回该列表的新长度。</msg>
  <msg name="WinJS.Binding.List.push_p:value">要插入到列表结尾处的元素。</msg>
  <msg name="WinJS.Binding.List.push_returnValue">该列表的新长度。</msg>
  <msg name="WinJS.Binding.List.shift">从列表中移除第一个元素并将返回该元素。</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">来自该列表的第一个元素。</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">要插入到列表开始处的元素。</msg>
  <msg name="WinJS.Binding.List.splice">将元素从列表中移除，如必要，插入新元素到它们的位置，同时返回所删除的元素。</msg>
  <msg name="WinJS.Binding.List.splice_p:start">从其开始移除元素的列表中从 0 开始的位置。</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">要移除的元素数。</msg>
  <msg name="WinJS.Binding.List.splice_p:item">要插入到列表中以代替已删除元素的元素。</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">已删除的元素。</msg>
  <msg name="WinJS.Namespace.defineWithParent">使用指定父命名空间下的指定名称定义新的命名空间。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">父命名空间。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">新命名空间的名称。</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">新命名空间的成员。</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">新定义的命名空间。</msg>
  <msg name="WinJS.Namespace.define">使用指定名称定义新命名空间。</msg>
  <msg name="WinJS.Namespace.define_p:name">命名空间的名称。这可能是嵌套命名空间的名称（以点号分隔）。</msg>
  <msg name="WinJS.Class.define">使用给定构造函数和指定实例成员的类。</msg>
  <msg name="WinJS.Class.define_p:constructor">用于实例化此类的构造函数。</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">实例字段、属性和该类上可用的方法的集。</msg>
  <msg name="WinJS.Class.define_p:staticMembers">静态字段、属性和该类上可用的方法的集。</msg>
  <msg name="WinJS.Class.define_returnValue">新定义的类。</msg>
  <msg name="WinJS.Class.derive">使用原型继承基于提供的 baseClass 参数创建子类。</msg>
  <msg name="WinJS.Class.derive_p:baseClass">从其中继承的类。</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">实例字段、属性和使其在类上可用的方法的集。</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">静态字段、属性和使其在类上可用的方法的集。</msg>
  <msg name="WinJS.Class.mix">使用给定构造函数和所有 mixin 对象指定的实例成员集的联合。Mixin 参数列表是可用长度。</msg>
  <msg name="WinJS.Utilities.hasWinRT">确定 WinRT 是否在此脚本上下文中是可访问的。</msg>
  <msg name="WinJS.Utilities.getMember">获取叶级类型或名称参数指定的命名空间。</msg>
  <msg name="WinJS.Utilities.getMember_p:name">成员的名称。</msg>
  <msg name="WinJS.Utilities.getMember_p:root">In. Defaults 开始全局对象的根。</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">叶级类型或指定的父命名空间中的命名空间。</msg>
  <msg name="WinJS.Utilities.ready">确保指定函数只在 DOMContentLoaded 事件激发当前页后执行。</msg>
  <msg name="WinJS.Utilities.ready_returnValue">在发生 DOMContentLoaded 后完成的目标。</msg>
  <msg name="WinJS.Utilities.ready_p:callback">在发生 DOMContentLoaded 后执行的函数。</msg>
  <msg name="WinJS.Utilities.ready_p:async">如果为 true，将异步执行回调。</msg>
  <msg name="WinJS.Utilities.strictProcessing">确定严格声明性处理是否在此脚本上下文中可用。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">使函数与 WinJS.UI.processAll 或 WinJS.Binding.processAll 等声明性处理兼容。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">将被标记为与声明性处理兼容的函数。</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">输入函数。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">断言该值是与 WinJS.UI.processAll 或 WinJS.Binding.processAll 等声明性处理兼容的。如果不兼容，将引发异常。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">用于测试与声明性处理的兼容性的值。如果该值是函数，则它必须用属性 'supportedForProcessing' 标记为 true 的值。</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">输入值。</msg>
  <msg name="WinJS.strictProcessing">始终强制执行严格的处理，此方法不起作用。</msg>
  <msg name="WinJS.Utilities.formatLog">将标记和类型添加到日志消息。</msg>
  <msg name="WinJS.Utilities.startLog_p:message">要进行格式设置的消息。</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">将应用于该消息的一个标记或一些标记。请用空格分隔多个标记。</msg>
  <msg name="WinJS.Utilities.startLog_p:type">消息的类型。</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">所格式化的消息。</msg>
  <msg name="WinJS.Utilities.startLog">配置将包含指定标记的消息从 WinJS.log 写入到 console.log 的记录器。</msg>
  <msg name="WinJS.Utilities.startLog_p:options">要记录的消息的标记。请用空格分隔多个标记。</msg>
  <msg name="WinJS.Utilities.startLog2">配置记录器已写入 WinJS.log 输出。</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">可能包含 .type、.tags、.excludeTags 和 .action 属性。- .type 是所需标记。- .excludeTags 是标记的空格分隔的列表，这些标记中的任何一个将导致消息不被记录。- .tags 是标记的空格分隔的列表，这些标记中的任何一个将导致消息被记录。- .action 是将使用日志消息、标记和类型调用的函数（如果存在）。该默认是记录到控制台。</msg>
  <msg name="WinJS.Utilities.stopLog">移除先前安装的记录器。</msg>
  <msg name="WinJS.Utilities.createEventProperties">创建传递到函数的每个名称都拥有一个属性的对象。</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">属性名称的变量列表。</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">带有指定属性的对象。属性的名称以 'on' 为前缀。</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">如果 True 会启动捕获，则为 False。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">引发指定类型并带有指定附加属性的事件。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">将在引发事件时被附加到事件目标的附加属性的集。</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">如果在事件上调用 preventDefault，则为 True。</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">指定是否要启动访问。</msg>
  <msg name="WinJS.Resources.addEventListener">为指定事件注册事件处理程序。</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">要处理的事件的名称。</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">引发事件时调用的侦听器。</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">设置为 True来为捕获阶段注册事件处理程序；设置为 False 为冒泡阶段注册。</msg>
  <msg name="WinJS.Resources.getString">检索拥有指定资源 ID 的资源字符串。</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">要检索的字符串的资源 ID。</msg>
  <msg name="WinJS.Resources.getString_returnValue">能包含这些属性的对象：值：所需字符串的值。此属性始终是存在的。空:指定是否找到所需字符串的值。如果为 True，将不能找到字符串。如果它的 False 或未定义，则能找到所需的字符串。如果指定，lang：字符串的语言。此属性只为多语言资源存在。</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">返回计划程序状态的字符串表示方法用作诊断。作业和流失请求按当前待处理顺序显示。当前作业和流失请求用星号标出。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">在计划程序中无需时间分段便可运行作业，直到已执行所有指定优先级和更高级的作业。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">该计划程序应漏的优先级。该默认值为 Priority.min，可耗尽队列中的任何作业。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">用于诊断的流失需求的可选说明。</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">当流失结束后完成的承诺。取消该承诺将取消流失请求。此承诺永远不会输入错误状态。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">在高优先级的上下文中运行指定的回调。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">将在高优先级的上下文中运行的回调。</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">回调的返回值。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">创建并返回一个可设为一个或多个作业的所有者特性的新所有者标记。然后可用于取消它“拥有”的所有作业。</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">新的所有者标记。可以使用此标记控制其所拥有的作业。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">计划所指定的函数异步执行。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">表示将进行计划的工作项的函数。当调用工作项时，它将接收允许其要求计划程序是否应协作让出资源的 JobInfo 对象作为其第一个参数，如果是，则允许工作项提供将作为继续符或 WinJS.Promise 运行的函数，将在完成后提供一个函数作为要运行的继续符。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">计划工作项的优先级。默认值为正常优先级。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">将绑定到工作项中的“this”实例。默认值为 null。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">对用于诊断的工作项的说明。默认值为空字符串。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">表示此工作项的作业实例。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">计划作业完成一个返回的承诺。针对不同的常用优先级，该方法有四种版本：schedulePromiseHigh、schedulePromiseAboveNormal、schedulePromiseNormal、schedulePromiseBelowNormal 和 schedulePromiseIdle。能够演示如何确保提交链的最后一个链接在高优先级的计划程序中运行的示例用法：asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { })；</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">用于完成返回的承诺的值。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">描述作业以用于诊断的字符串。</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">在所需优先级的作业内完成的承诺。</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">获取调用方正按其执行的当前优先级。</msg>
  <msg name="WinJS.xhr">将对 XMLHttpRequest 的调用包装到承诺中。</msg>
  <msg name="WinJS.xhr_p:options">应用于 XMLHttpRequest 对象中的选项。它们是：类型、URL、用户、密码、标头、esponseType、数据和 customRequestInitializer。</msg>
  <msg name="WinJS.xhr_returnValue">它完成时返回 XMLHttpRequest 对象的承诺。</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">将指定元素的 innerHTML 属性设置到指定文本。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">将在其上设置 innerHTML 属性的元素。</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">将被设置到 innerHTML 属性的值。</msg>
  <msg name="WinJS.Utilities.setOuterHTML">将指定元素的 outerHTML 属性设置到指定文本。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">将在其上设置 outerHTML 属性的元素。</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">将被设置到 outerHTML 属性的值。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">调用指定元素上的 insertAdjacentHTML。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">将在其调用 insertAdjacentHTML 的元素。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">相对其上插入 HTML 的元素相关的位置。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">将被提供到 insertAdjacentHTML 的值。</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">将指定元素的 outerHTML 属性设置到 msWWA.execUnsafeLocalFunction 的上下文中的指定文本。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">在 msWWA.execUnsafeLocalFunction 的上下文中的指定元素上调用 insertAdjacentHTML。</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">被提供到 insertAdjacentHTML 的值。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">将元素的 innerHTML 属性设置到指定文本（如果它传递 msIsStaticHTML 检查）。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">将元素的 outerHTML 属性设置到指定文本（如果它传递 msIsStaticHTML 检查）。</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">在元素上调用 insertAdjacentHTML（如果它传递 msIsStaticHTML 检查）。</msg>
  <msg name="WinJS.Utilities.markDisposable">将指定的释放实现添加到指定的元素中，并将其标记为可释放。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">将元素标记为可释放。</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">包含特定元素释放逻辑（将由释放函数调用）的函数。</msg>
  <msg name="WinJS.Utilities.disposeSubTree">释放所有第一代为指定元素子代的可释放元素。指定元素本身不可释放。</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">将释放其子树的根元素。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">将以声明方式指定的选项（属性和事件）的集添加到指定控件。如果选项属性的名称以“on”开头，属性值将为函数而且控件将支持 addEventListener。该 setOptions 方法在控件上调用 addEventListener 方法。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">在其上应用属性和事件的控件。</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">以声明方式指定的选项的集。</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">初始化捕获的 True；否则为 False。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">引发指定类型的事件，同时添加指定的附加属性。</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">如果在事件上调用 preventDefault，为 True，否则为 False。</msg>
  <msg name="WinJS.UI.select.createSelect">每当选择器范围遇到选择在给定的选择器字符串的范围内查找，指导来自文件的根的给定元素中的 DOM 树。返回第一个匹配元素。</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">选择器字符串。</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">目标元素（如果找到了）。</msg>
  <msg name="WinJS.UI.processAll">将声明性控件绑定应用到所有元素（从指定根元素处开始）。</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">从其开始应用绑定的元素。如果未指定此参数，则将绑定应用到整个文档。</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">如果为 True，待绑定的元素将跳过指定根元素并只包括子集。</msg>
  <msg name="WinJS.UI.processAll_returnValue">将绑定应用到所有控件上后实现承诺。</msg>
  <msg name="WinJS.UI.process">将声明性控件绑定应用到指定元素。</msg>
  <msg name="WinJS.UI.process_p:element">要绑定的元素。</msg>
  <msg name="WinJS.UI.process_returnValue">激活控件后实现的承诺。承诺的值是附加到元素的控件。</msg>
  <msg name="WinJS.Utilities.query">在指定元素或整个文档上执行查询选择器。</msg>
  <msg name="WinJS.Utilities.query_p:query">要执行的查询选择器。</msg>
  <msg name="WinJS.Utilities.query_p:element">在其上执行查询的元素。如果未指定此参数，则将在整个文档上执行查询。</msg>
  <msg name="WinJS.Utilities.query_returnValue">包含查询结果的 QueryCollection。</msg>
  <msg name="WinJS.Utilities.id">通过 ID 查找元素并保证 QueryCollection 中的结果。</msg>
  <msg name="WinJS.Utilities.id_p:id">元素的 ID。</msg>
  <msg name="WinJS.Utilities.id_returnValue">包含元素的 QueryCollection（如果找到它）。</msg>
  <msg name="WinJS.Utilities.children">创建包含指定父元素的子级的 QueryCollection。</msg>
  <msg name="WinJS.Utilities.children_p:element">父元素。</msg>
  <msg name="WinJS.Utilities.children_returnValue">包含元素的子级的 QueryCollection。</msg>
  <msg name="WinJS.Utilities.Key">定义一组键盘值。</msg>
  <msg name="WinJS.Utilities.Key.backspace">Backspace 键。</msg>
  <msg name="WinJS.Utilities.Key.tab">Tab 键。</msg>
  <msg name="WinJS.Utilities.Key.enter">Enter 键。</msg>
  <msg name="WinJS.Utilities.Key.shift">Shift 键。</msg>
  <msg name="WinJS.Utilities.Key.ctrl">Ctrl 键。</msg>
  <msg name="WinJS.Utilities.Key.alt">Alt 键</msg>
  <msg name="WinJS.Utilities.Key.pause">Pause 键。</msg>
  <msg name="WinJS.Utilities.Key.capsLock">Caps Lock 键。</msg>
  <msg name="WinJS.Utilities.Key.escape">Escape 键。</msg>
  <msg name="WinJS.Utilities.Key.space">Space 键。</msg>
  <msg name="WinJS.Utilities.Key.pageUp">Page Up 键。</msg>
  <msg name="WinJS.Utilities.Key.pageDown">Page Down 键。</msg>
  <msg name="WinJS.Utilities.Key.end">End 键。</msg>
  <msg name="WinJS.Utilities.Key.home">Home 键。</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">向左键。</msg>
  <msg name="WinJS.Utilities.Key.upArrow">向上键。</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">向右键。</msg>
  <msg name="WinJS.Utilities.Key.downArrow">向下键。</msg>
  <msg name="WinJS.Utilities.Key.insert">Insert 键。</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">Delete 键。</msg>
  <msg name="WinJS.Utilities.Key.num0">数字键 0。</msg>
  <msg name="WinJS.Utilities.Key.num1">数字键 1。</msg>
  <msg name="WinJS.Utilities.Key.num2">数字键 2。</msg>
  <msg name="WinJS.Utilities.Key.num3">数字键 3.</msg>
  <msg name="WinJS.Utilities.Key.num4">数字键 4。</msg>
  <msg name="WinJS.Utilities.Key.num5">数字键 5。</msg>
  <msg name="WinJS.Utilities.Key.num6">数字键 6。</msg>
  <msg name="WinJS.Utilities.Key.num7">数字键 7。</msg>
  <msg name="WinJS.Utilities.Key.num8">数字键 8。</msg>
  <msg name="WinJS.Utilities.Key.num9">数字键 9。</msg>
  <msg name="WinJS.Utilities.Key.a">A 键。</msg>
  <msg name="WinJS.Utilities.Key.b">B 键。</msg>
  <msg name="WinJS.Utilities.Key.c">C 键。</msg>
  <msg name="WinJS.Utilities.Key.d">D 键。</msg>
  <msg name="WinJS.Utilities.Key.e">E 键。</msg>
  <msg name="WinJS.Utilities.Key.f">F 键。</msg>
  <msg name="WinJS.Utilities.Key.g">G 键。</msg>
  <msg name="WinJS.Utilities.Key.h">H 键。</msg>
  <msg name="WinJS.Utilities.Key.i">I 键。</msg>
  <msg name="WinJS.Utilities.Key.j">J 键。</msg>
  <msg name="WinJS.Utilities.Key.k">K 键。</msg>
  <msg name="WinJS.Utilities.Key.l">L 键。</msg>
  <msg name="WinJS.Utilities.Key.m">M 键。</msg>
  <msg name="WinJS.Utilities.Key.n">N 键。</msg>
  <msg name="WinJS.Utilities.Key.o">O 键。</msg>
  <msg name="WinJS.Utilities.Key.p">P 键。</msg>
  <msg name="WinJS.Utilities.Key.q">Q 键。</msg>
  <msg name="WinJS.Utilities.Key.r">R 键。</msg>
  <msg name="WinJS.Utilities.Key.s">S 键。</msg>
  <msg name="WinJS.Utilities.Key.t">T 键。</msg>
  <msg name="WinJS.Utilities.Key.u">U 键。</msg>
  <msg name="WinJS.Utilities.Key.v">V 键。</msg>
  <msg name="WinJS.Utilities.Key.w">W 键。</msg>
  <msg name="WinJS.Utilities.Key.x">X 键。</msg>
  <msg name="WinJS.Utilities.Key.y">Y 键。</msg>
  <msg name="WinJS.Utilities.Key.z">Z 键。</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">左 Windows 键。</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">右 Windows 键。</msg>
  <msg name="WinJS.Utilities.Key.menu">菜单键</msg>
  <msg name="WinJS.Utilities.Key.numPad0">数字键盘上的 0 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad1">数字键盘上的 1 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad2">数字键盘上的 2 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad3">数字键盘上的 3 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad4">数字键盘上的 4 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad5">数字键盘上的 5 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad6">数字键盘上的 6 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad7">数字键盘上的 7 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad8">数字键盘上的 8 键。</msg>
  <msg name="WinJS.Utilities.Key.numPad9">数字键盘上的 9 键。</msg>
  <msg name="WinJS.Utilities.Key.multiply">乘法键。</msg>
  <msg name="WinJS.Utilities.Key.add">添加键。</msg>
  <msg name="WinJS.Utilities.Key.subtract">减法键。</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">小数点键。</msg>
  <msg name="WinJS.Utilities.Key.divide">除法键。</msg>
  <msg name="WinJS.Utilities.Key.F1">F1 键。</msg>
  <msg name="WinJS.Utilities.Key.F2">F2 键。</msg>
  <msg name="WinJS.Utilities.Key.F3">F3 键。</msg>
  <msg name="WinJS.Utilities.Key.F4">F4 键。</msg>
  <msg name="WinJS.Utilities.Key.F5">F5 键。</msg>
  <msg name="WinJS.Utilities.Key.F6">F6 键。</msg>
  <msg name="WinJS.Utilities.Key.F7">F7 键。</msg>
  <msg name="WinJS.Utilities.Key.F8">F8 键。</msg>
  <msg name="WinJS.Utilities.Key.F9">F9 键。</msg>
  <msg name="WinJS.Utilities.Key.F10">F10 键。</msg>
  <msg name="WinJS.Utilities.Key.F11">F11 键。</msg>
  <msg name="WinJS.Utilities.Key.F12">F12 键。</msg>
  <msg name="WinJS.Utilities.Key.numLock">Number Lock 键。</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">Scroll Lock 键。</msg>
  <msg name="WinJS.Utilities.Key.browserBack">浏览器后退键。</msg>
  <msg name="WinJS.Utilities.Key.browserForward">浏览器向前键。</msg>
  <msg name="WinJS.Utilities.Key.semicolon">“分号”键。</msg>
  <msg name="WinJS.Utilities.Key.equal">“等号”键。</msg>
  <msg name="WinJS.Utilities.Key.comma">“逗号”键。</msg>
  <msg name="WinJS.Utilities.Key.dash">“破折号”键。</msg>
  <msg name="WinJS.Utilities.Key.period">“句号”键。</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">“向前斜杠”键。</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">抑音符键。</msg>
  <msg name="WinJS.Utilities.Key.openBracket">“前括号”键。</msg>
  <msg name="WinJS.Utilities.Key.backSlash">“斜线”键。</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">“后括号”键。</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">“单引号”键。</msg>
  <msg name="WinJS.Utilities.data">获取与指定元素关联的数据。</msg>
  <msg name="WinJS.Utilities.data_p:element">该元素。</msg>
  <msg name="WinJS.Utilities.data_returnValue">与元素关联的值。</msg>
  <msg name="WinJS.Utilities.hasClass">确定指定元素是否拥有指定类。</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">如果指定元素包含指定类则为 True；否则为 False。</msg>
  <msg name="WinJS.Utilities.addClass">添加指定类到指定元素。可以使用空格分隔的名称添加多个类。</msg>
  <msg name="WinJS.Utilities.addClass_p:e">将类添加到其上的元素。</msg>
  <msg name="WinJS.Utilities.addClass_p:name">可使用空格分隔的名称添加带添加的类的名称和多个类。</msg>
  <msg name="WinJS.Utilities.removeClass">从指定元素中移除指定类。</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">从其中移除的类的元素。</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">要移除的类的名称。</msg>
  <msg name="WinJS.Utilities.toggleClass">在指定元素上切换（添加或移除）指定类。如果类存在，将移除它；如果它不存在，则添加它。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">在其上切换类的元素。</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">要切换的类的名称。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">获取相对于指定父级的指定元素的左边缘坐标。</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">相对左边缘坐标。</msg>
  <msg name="WinJS.Utilities.getRelativeTop">获取相对于指定父级的指定元素的上边缘坐标。</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">相对上边缘坐标。</msg>
  <msg name="WinJS.Utilities.empty">从指定元素中移除所有子节点。</msg>
  <msg name="WinJS.Utilities.getContentWidth">获取指定元素的内容的宽度。内容宽度不包括边框和空白。</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">元素的内容宽度。</msg>
  <msg name="WinJS.Utilities.getTotalWidth">获取元素的宽度（包括空白）。</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">获取包括空白的元素的宽度。</msg>
  <msg name="WinJS.Utilities.getContentHeight">获取指定元素的内容的高度。内容高度不包括边框和空白。</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">元素的内容高度。</msg>
  <msg name="WinJS.Utilities.getTotalHeight">获取元素的高度（包括它的空白）。</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">获取包括空白的元素的高度。</msg>
  <msg name="WinJS.Utilities.getPosition">获取指定元素的位置。</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">包括元素的 Left、Top、宽度和高度属性的对象。</msg>
  <msg name="WinJS.Utilities.convertToPixels">将指定元素的 CSS 定位字符串转换为像素。</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">CSS 定义字符串。</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">像素数目。</msg>
  <msg name="WinJS.Utilities.eventWithinElement">确定指定事件是否出现在指定元素内。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">事件。</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">如果事件出现在元素内，则为 True；否则为 False。</msg>
  <msg name="WinJS.UI.Pages.dispose">释放此页。</msg>
  <msg name="WinJS.UI.Pages._mixin.load">创建来自指定 URL 的 DOM 元素的副本。为了使用此重写，包含加载重写的页需要在调用 WinJS.UI.Pages.render() 前通过调用 WinJS.UI.Pages.define() 被定义。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">从其中复制 DOM 元素的 URL。</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">其实现值是无父级的 DOM 元素的承诺（如果异步处理是必需的）。如果不是，则什么也不返回。</msg>
  <msg name="WinJS.UI.Pages._mixin.init">在设置控件的内容前初始化该控件。为应该在已设置控件的内容后完成的任何初始化使用已处理方法。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">将包含页的所有内容的 DOM 元素。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">传递到页的构造函数的选项。</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">初始化完成时实现的承诺（如果异步处理时必需的）。如果不是，则什么也不返回。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">在设置控件的内容后初始化该控件。</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">将被传递到页的构造函数的选项。</msg>
  <msg name="WinJS.UI.Pages._mixin.render">通常情况下是通过将指定于 loadResult 参数中的元素添加到指定元素呈现控件。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">传递到页的构造函数的选项。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">从加载方法返回的元素。</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">呈现完成时实现的承诺（如果异步处理时必需的）。如果不是，则什么也不返回。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">在所有初始化和呈现完成后调用。此时元素准备就绪，可以使用。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">包含页的所有内容的 DOM 元素。</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">传递到页的构造函数的选项</msg>
  <msg name="WinJS.UI.Pages._mixin.error">如果在页的处理期间出现任何错误时调用。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">已发生的错误。</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">如果已处理该错误则为 Nothing，或者如果未处理该错误则为一个错误承诺。</msg>
  <msg name="WinJS.UI.Pages.define">创建来自包含指定成员的指定 URL 的新页控件。为相同的 URL 多次调用此方法是允许的，且将合并所有成员。</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">定义页的内容的 URL。</msg>
  <msg name="WinJS.UI.Pages.define_p:members">控件将拥有的附加成员。</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">创建该页的构造函数。</msg>
  <msg name="WinJS.UI.Pages.get">为指定 URL 获取已定义的页控件或创建一个新的页控件。</msg>
  <msg name="WinJS.UI.Pages.render">使用指定选项创建来自指定元素内部的指定 URL 的页控件。</msg>
  <msg name="WinJS.UI.Pages.render_p:element">要用页填充的元素。</msg>
  <msg name="WinJS.UI.Pages.render_p:options">配置页的选项。</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">指定元素成为最终文档的父级时实现的承诺。</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">完成页呈现时满足的承诺。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">将指定 URL 的内容复制到指定元素。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">包含要复制的片段的 URL。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">追加片段到其上的元素。</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">已加载片段时实现的承诺。如果未指定目标元素，则复制的片段将为已完成的值。</msg>
  <msg name="WinJS.UI.Fragments.cache">开始在指定的位置处加载片段。返回的承诺完成（当片段准备可以被复制时）。</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">包含要复制的片段的 URL。</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">该片段已为复制做好准备时实现的承诺。</msg>
  <msg name="WinJS.UI.Fragments.clearCache">移除有关指定片段的缓存信息。此方法不卸载任何脚本以及片段所引用的样式。</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">包含要清除的片段的 URL。如果未提供 URI，则将清除缓存的整个内容。</msg>
  <msg name="WinJS.UI.isAnimationEnabled">确定 WinJS“动画库”是否将执行动画。</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">如果执行 WinJS动画，则为 True。如果禁止 WinJS动画，则为 False。</msg>
  <msg name="WinJS.UI.disableAnimations">通过递减动画启用计数禁用 WinJS“动画库”中的动画。</msg>
  <msg name="WinJS.UI.enableAnimations">通过递增动画启用计数启用 WinJS“动画库”中的动画。</msg>
  <msg name="WinJS.UI.executeAnimation">执行同其他“动画库”动画共存的 CSS 动画。不期待应用程序直接调用此函数；它们应首选使用“动画库”中的高级别动画。</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">在其上执行 CSS 动画的单个元素或元素的集合。</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">单个动画说明或动画说明数组。</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">CSS 动画完成时完成的承诺对象。</msg>
  <msg name="WinJS.UI.executeTransition">执行同其他“动画库”动画共存的 CSS 转换。不期待应用程序直接调用此函数；它们应首选使用“动画库”中的高级别动画。</msg>
  <msg name="WinJS.UI.executeTransition_p:element">在其上执行 CSS 转换的单个元素或元素的集合。</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">单个转换说明或转换说明数组。</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">CSS 转换完成时完成的承诺对象。</msg>
  <msg name="WinJS.UI.eventHandler">标记事件处理程序函数为与声明性处理兼容。</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">将被标记为与声明性处理兼容的处理程序。</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">输入处理程序。</msg>
  <msg name="WinJS.UI.Orientation">控件属性的“方向”选项</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">垂直</msg>
  <msg name="WinJS.Application.event.setPromise">用于通知应用程序对象正在执行异步工作以及此事件处理程序不应该被视为完成直到完成了该承诺。</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">等待的承诺。</msg>
  <msg name="WinJS.Application.queueEvent">对将由 WinJS.Application 事件队列处理的事件排队。</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">事件对象应拥有用作事件名称的类型属性（当在 WinJS.Application 事件队列上调度时）。将向事件的详细属性中的事件侦听器提供整个对象。</msg>
  <msg name="WinJS.Application.stop">停止处理应用程序事件处理并重新设置 WinJS.Application 到其原始状态。</msg>
  <msg name="WinJS.Application.checkpoint">对检查点事件进行排队。</msg>
  <msg name="WinJS.Application.start">开始处理 WinJS.Application 事件队列中的事件。</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">用于通知 ListView 正在执行异步工作以及此事件处理程序不应该被视为完成直到完成了该承诺。</msg>
  <msg name="WinJS.Navigation.canGoForward">确定向前导航是否是可能的。</msg>
  <msg name="WinJS.Navigation.canGoBack">确定向后导航是否是可能的。</msg>
  <msg name="WinJS.Navigation.location">获取当前位置。</msg>
  <msg name="WinJS.Navigation.state">获取或设置导航状态。</msg>
  <msg name="WinJS.Navigation.history">获取或设置导航历史记录。</msg>
  <msg name="WinJS.Navigation.forward">向前导航。</msg>
  <msg name="WinJS.Navigation.forward_p:distance">要前进的项数目。</msg>
  <msg name="WinJS.Navigation.forward_returnValue">使用指示导航是否成功的值完成的承诺。</msg>
  <msg name="WinJS.Navigation.back">向后导航。</msg>
  <msg name="WinJS.Navigation.back_p:distance">转回到历史记录的项数目。</msg>
  <msg name="WinJS.Navigation.navigate">定位到一个位置。</msg>
  <msg name="WinJS.Navigation.navigate_p:location">要定位到的位置。通常位置为字符串，但是它可以是任意的。</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">可以通过 WinJS.Navigation. 状态访问的导航状态。</msg>
  <msg name="WinJS.Application.local">允许访问以在应用程序本地存储中创建文件，这是跨应用程序的允许保留的并不会漫游。</msg>
  <msg name="WinJS.Application.temp">允许访问以在应用程序临时存储中创建文件，这可能由应用程序允许间的系统回收。</msg>
  <msg name="WinJS.Application.roaming">允许访问以在应用程序漫游存储中创建文件，这是跨应用程序的允许保留的并与跨多个计算机的用户一起漫游。</msg>
  <msg name="WinJS.Binding.observableMixin.notify">通知侦听器属性值已更改。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">正在更新的属性的名称。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">属性的新值。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">属性的旧值。</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">通知完成时所完成的承诺。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">为给定属性从通知列表中移除一个或多个侦听器。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">要取消绑定的属性的名称。如果省略了此参数，则将移除所有事件的所有侦听器。</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">为指定属性从侦听器中移除的函数。如果省略了此参数，则将为指定属性移除所有侦听器。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">按名称获取属性值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">要获取的属性的名称。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">作为可观察对象的属性的值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">更新属性值并通知任何侦听器。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">要更新的属性的名称。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">属性的新值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">将带有更改通知的属性添加到此对象，包括 ECMAScript5 属性定义。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">要添加的属性的名称。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">该属性的值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">当此属性的通知更改时完成了的承诺已被处理。如果合并了多个通知，则可能取消该承诺或可能更新该承诺的值。该承诺的已实现的值是已为其完成通知的属性的新值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">移除一个属性值。</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">要移除的属性的名称。</msg>
  <msg name="WinJS.Binding.bind">绑定到可观察对象上或此对象的子值上的一个或多个属性。</msg>
  <msg name="WinJS.Binding.bind_p:observable">绑定所到的对象。</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">包含绑定声明的对象文本。绑定声明采取的形式：{ propertyName：（函数 | bindingDeclaration），...} 例如，对对象的嵌套成员的绑定被声明如下：绑定（someObject，{地址：{街道：函数 (v) { ...} } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">包含指示一个“取消”字段的对象是移除与此绑定请求关联的所有绑定的函数。</msg>
  <msg name="WinJS.Binding.expandProperties">包装指定对象以便针对所有它的属性检测绑定。这意味着与绑定 Mixin 一起使用。</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">针对可绑定对象的规范。</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">一组属性的对象，所有的属性都连接绑定。</msg>
  <msg name="WinJS.Binding.define">创建使用属性的指定集支持可观察性的新构造函数。</msg>
  <msg name="WinJS.Binding.define_p:data">用作定义属性集的模式的对象，例如：var MyPointClass = 定义 ({x:0,y:0})；</msg>
  <msg name="WinJS.Binding.define_returnValue">为属性的初始状态的 1 可选参数的构造函数。</msg>
  <msg name="WinJS.Binding.define.return">创建一个新的可观察对象。</msg>
  <msg name="WinJS.Binding.define.return_p:init">属性的初始值。</msg>
  <msg name="WinJS.Binding.as">返回可观察对象。这可能是指定对象的可观察代理、现有代理或指定对象本身（如果它直接支持可观察性）。</msg>
  <msg name="WinJS.Binding.as_p:data">向其提供可观察性的对象。</msg>
  <msg name="WinJS.Binding.as_returnValue">可观察到的对象。</msg>
  <msg name="WinJS.Binding.unwrap">如果指定对象是可观察代理，则返回原始（非可观察）对象。</msg>
  <msg name="WinJS.Binding.unwrap_p:data">针对其检索原始值的对象。</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">如果指定对象是可观察代理，则将返回原始对象，都在将返回相同的对象。</msg>
  <msg name="WinJS.Binding.Template.render.value">基于 URL 呈现模板。</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">从中加载模板的 URL。</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">完成绑定后所完成的目标。该值是容器参数中的对象或已创建的 DIV。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">呈现被绑定到给定数据并成为包含在 QueryCollection 中的元素的父级的模板。如果 QueryCollection 包含对个元素，模板将呈现多个项（只要传递 QueryCollection 中的每个元素处的每个数据项）。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">模板控件所附加到的 DOM 元素。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">要呈现的数据。如果数据为数组（或拥有 forEach 方法的任何其他对象），然后该模板呈现多个项（一次为集合中的一个项）。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">如果提供，每次呈现模板时将调用此函数，且当完成模板呈现时将传递已实现的承诺。</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">QueryCollection。</msg>
  <msg name="WinJS.Binding.declarativeBind">将来自指定的数据上下文的值绑定到是指定的根元素的子代并拥有声明性绑定特性 (data-win-bind) 的元素。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">在其处开始遍历查找绑定所到元素的元素。如果省略了此参数，则将搜索整个文档。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">缓存的绑定数据。</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">绑定初始值将在其未在绑定表达式中指定的情况下使用。如果未提供，该行为将与 WinJS.Binding.defaultBind 相同。</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">已处理每个包含绑定声明的项且已开始更新时完成的承诺。</msg>
  <msg name="WinJS.Binding.converter">使用在源属性的值上执行的已提供转换器函数为源属性间的绑定和目标属性创建默认绑定初始值。</msg>
  <msg name="WinJS.Binding.converter_p:convert">在源属性的结果上操作以产生设置为目标属性的值的转换。</msg>
  <msg name="WinJS.Binding.converter_returnValue">绑定初始值。</msg>
  <msg name="WinJS.Binding.setAttribute">在目标元素上创建源对象和特性之间的单向绑定。</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">源对象。</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">源属性的在源对象上的路径。</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">目标对象（必须为 DOM 元素）。</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">目标对象上通向目标属性的路径，这必须为单一名称。</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">目标已知的初始值，如果源值与初始值相同（使用 ===），说明目标不是首次设置。</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">带有用于合并绑定的取消方法的对象。</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">将目标元素上的特性设置为源属性的值。</msg>
  <msg name="WinJS.Binding.addClassOneTime">将目标元素上的类添加到源属性的值</msg>
  <msg name="WinJS.Binding.defaultBind">创建源对象和目标对象间的单向绑定。</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">目标对象。</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">目标属性的在目标对象上的路径。</msg>
  <msg name="WinJS.Binding.oneTime">将目标属性设置到源属性的值。</msg>
  <msg name="WinJS.Binding.initializer">使自定义初始值函数与声明性数据绑定兼容。</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">将被标记为与声明性数据绑定兼容的自定义初始值。</msg>
  <msg name="WinJS.Binding.initializer_returnValue">输入 customInitializer。</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">指定键标识的值已被一个不同的值替代。</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">新值已插入到该列表。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">指定键标识的值已从列表中的一个索引移动到另一个索引。</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">指定键标识的值已转变。</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">指定键标识的值已从该列表中移除。</msg>
  <msg name="WinJS.Binding.ListBase.onreload">该列表已刷新。列表中的项的任何引用可能不正确。</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">强制列表向所有侦听器发送重新加载通知。</msg>
  <msg name="WinJS.Binding.ListBase.getAt">获取位于指定索引处的值。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">要获取的值的索引。</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">位于指定索引处的值。</msg>
  <msg name="WinJS.Binding.ListBase.concat">返回由两个数组的组合构成的新列表。</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">包含串联列表和其他任何所提供项的数组。</msg>
  <msg name="WinJS.Binding.ListBase.join">返回一个由指定分隔符字符串分隔的列表的所有元素构成的字符串。</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">用于分隔列表的元素的字符串。如果省略此参数，则将用逗号分隔列表元素。</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">指定分隔符字符串分隔的列表的元素。</msg>
  <msg name="WinJS.Binding.ListBase.slice">提取列表的一部分并返回新列表。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">指定该部分开头的索引。</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">指定该部分结尾的索引。</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">返回一个数组中的一部分。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">获取指定值在列表中第一个出现的索引。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">要在列表中查找的值。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">在其处开始搜索的索引。如果省略 fromIndex，则搜索开始于索引 0 处。</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">值在列表中第一个出现的索引或 -1（如果未找到）。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">获取指定值在列表中最后一次出现的索引。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">在其处开始搜索的索引。如果省略 fromIndex，则搜索开始于列表中的最后一个索引。</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">值在列表中最后一个出现的索引，或 -1（如果未找到）。</msg>
  <msg name="WinJS.Binding.ListBase.every">检查指定回调函数是否为列表中的所有元素返回 True。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">最多可以接受三个参数的函数。为列表中的每个元素调用此函数，直到它返回 False 或到达了该列表的结尾。</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">此键盘在回调函数中引用的对象。如果省略 thisArg，则将未定义。</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">如果回调为列表中的所有元素返回 True，则为 True。</msg>
  <msg name="WinJS.Binding.ListBase.filter">返回满足指定于回调函数中的条件的列表的元素。</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">最多可以接受三个参数的函数。为列表中的每个元素调用函数。</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">包含满足指定于回调函数中的条件的元素的数组。</msg>
  <msg name="WinJS.Binding.ListBase.forEach">为列表中的每个元素调用指定回调函数。</msg>
  <msg name="WinJS.Binding.ListBase.map">调用列表的每个元素上的指定回调函数并返回包含结果的数组。</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">包含在列表中的每个元素调用回调函数的结果的数组。</msg>
  <msg name="WinJS.Binding.ListBase.some">检查指定回调函数是否为列表的任何元素返回 True。</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">最多可以接受三个参数的函数。为列表中的每个元素调用此函数，直到它返回 True 或到达了该列表的结尾。</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">如果回调为列表中的任何元素返回 True，则为 True。</msg>
  <msg name="WinJS.Binding.ListBase.reduce">通过为列表中的所有元素调用指定回调函数来累积单个结果。回调函数的返回值是已累积结果，并且作为对回调函数的下一个调用中的参数被提供。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">最多可以接受四个参数的函数。为列表中的每个元素调用函数。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">如果指定 initialValue，则作为开始累积所使用的值使用。对函数的第一次调用提供了作为参数的值而不是列表值。</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">来自对回调函数的最后一个调用的返回值。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">通过为列表中的所有元素调用指定回调函数按降序来累积单个结果。回调函数的返回值是已累积结果，并且作为对回调函数的下一个调用中的参数被提供。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">如果指定 initialValue，则作为开始累积所使用的值使用。对 callbackfn 函数的第一次调用提供了作为参数的值而不是列表值。</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">来自对回调函数的最后一个调用的返回值。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">创建对此列表的实时筛选投影。更改列表的同时已筛选投影对这些更改进行了响应，而且还可更改。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">接受单个参数的函数。该 createFiltered 函数使用列表中的每个元素调用回调。如果函数返回 True，该元素将包含在已筛选列表中。</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">对该列表的筛选投影。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">创建对此列表的实时分组投影。更改列表的同时已分组投影对这些更改进行了响应，而且还可更改。分组投影将列表的所有元素排序为连续组序列。已分组投影也包含是表示列表中找到的组的 WinJS.Binding.List 的 .groups 属性。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">接受单个参数的函数。使用列表中的每个元素调用该函数，该函数应该返回表示包含元素的组的字符串。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">接受单个参数的函数。为每个组在列表中的元素上调用该函数。它应该返回该值，此值应该为此组设置为 .groups 列表元素的数据。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">接受了两个参数的函数。使用在列表中找到的组的密钥调用该函数。它必须返回以下数值之一：负数（如果第一个参数小于第二个参数）、零（如果两个参数相等）、正数（如果第一个参数大于第二个参数）。如果省略 ASCII 字符顺序，则将按升序对这些组进行排序。</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">对列表的已分组投影。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">创建对此列表的实时排序投影。更改列表的同时已排序组投影对这些更改进行了响应，而且还可更改。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">接受了两个参数的函数。使用列表中的元素调用函数。它必须返回以下数值之一：负数（如果第一个参数小于第二个参数）、零（如果两个参数相等）、正数（如果第一个参数大于第二个参数）。</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">对列表的已排序投影。</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">将 WinJS.Binding.List 投影从它的基础 WinJS.Binding.List 中断开连接。只有它们拥有不用的正存期是重要的。</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">为指定键获取键/数据对。</msg>
  <msg name="WinJS.Binding.ListProjection.move">将索引处的值移动到位置 newIndex。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">返回比定义在列表中的最高元素高一的整数值。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">为指定索引返回键/数据对。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">要检索的值的索引。</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">返回键在列表中第一次出现的索引。</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">获取或设置该列表的长度。返回比定义在列表中的最高元素高一的整数值。</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">返回键第一次出现的索引。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">获取 WinJS.Binding.List，它是定义在此列表中的组的投影。</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">为指定项键获取键/数据对。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">获取该列表的长度。返回比定义在列表中的最高元素高一的整数值。</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">为指定列表索引获取键/数据对。</msg>
  <msg name="WinJS.Resources.processAll">处理源标记并使用本地字符串替代字符串。</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">在其处开始处理的 DOM 元素。processAll 处理了元素和它的子元素。如果您不指定根元素，processAll 处理整个文档。</msg>
</messagebundle>