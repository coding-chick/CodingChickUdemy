<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">Пытается отменить выполнение обещанного значения. Если обещание еще не было выполнено и отмена поддерживается, обещание переходит в состояние ошибки со значением Error("Canceled").</msg>
  <msg name="WinJS.PromiseStateMachine.done">Позволяет указать работу, которая должна выполняться при выполнении обещанного значения, обработку ошибки, которая должна выполняться, если обещание на выполнило значение, а также обработку уведомлений о ходе выполнения в процессе работы. После завершения выполнения обработчиков эта функция создает любую ошибку, которая была бы возвращена из then() в виде обещания в состоянии ошибки.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">Функция, которая вызывается, если обещание успешно выполнено со значением. Выполненное значение передается в виде одного аргумента. Если это значение равно NULL, возвращается выполненное значение. Значение, возвращенное из этой функции, становится выполненным значением обещания, возвращенного then(). Если во время выполнения этой функции возникает исключение, обещание, возвращенное then(), переходит в состояние ошибки.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">Функция, которая вызывается, если обещание выполнено с ошибкой. Ошибка передается в виде одного аргумента. Если это значение null, то ошибка переадресовывается. Значение, возвращенное из этой функции, является выполненным значением обещания, возвращенного then().</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">Функция, которая вызывается, когда обещание сообщает о ходе выполнения. Данные о ходе выполнения передаются в виде одного аргумента. Обещания не обязаны поддерживать ход выполнения.</msg>
  <msg name="WinJS.PromiseStateMachine.then">Позволяет указать работу, которая должна выполняться при выполнении обещанного значения, обработку ошибки, которая должна выполняться, если обещание на выполнило значение, а также обработку уведомлений о ходе выполнения в процессе работы.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">Функция, которая вызывается, если обещание успешно выполнено со значением. Значение передается в виде одного аргумента. Если это значение равно NULL, возвращается значение. Значение, возвращенное из этой функции, становится выполненным значением обещания, возвращенного then(). Если во время выполнения этой функции возникает исключение, обещание, возвращенное then(), переходит в состояние ошибки.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">Функция, которая вызывается, если обещание выполнено с ошибкой. Ошибка передается в виде одного аргумента. Если это значение null, то ошибка переадресовывается. Значение, возвращенное из этой функции, становится выполненным значением обещания, возвращенного then().</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">Функция, которая вызывается, когда обещание сообщает о ходе выполнения. Данные о ходе выполнения передаются в виде одного аргумента. Обещания не обязаны поддерживать ход выполнения.</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">Обещание, значение которого является результатом выполнения функции при завершении или функции при ошибке.</msg>
  <msg name="WinJS.Promise">Обещание предоставляет механизм планирования для значения, которое еще не было вычислено. Это удобная абстракция для управления взаимодействия с асинхронными API.</msg>
  <msg name="WinJS.Promise_p:init">Функция, которая вызывается во время создания обещания. Функция принимает 3 аргумента (завершение, ошибка, ход выполнения). В этой функции необходимо добавить прослушиватели событий для уведомлений, поддерживаемых данным значением.</msg>
  <msg name="WinJS.Promise_p:oncancel">Функция, вызываемая, если объект-получатель этого обещания хочет отменить невыполненную работу. Обещания не обязаны поддерживать отмену.</msg>
  <msg name="WinJS.Promise.addEventListener">Добавляет прослушиватель событий в элемент управления.</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">Тип (имя) события.</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">Прослушиватель, который требуется вызывать при возникновении события.</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">Указывает, следует или нет инициировать захват.</msg>
  <msg name="WinJS.Promise.any">Возвращает обещание, которое выполняется, когда выполняется одно из входных обещаний.</msg>
  <msg name="WinJS.Promise.any_p:values">Массив, содержащий объекты обещания или объекты, значения свойств которых содержат объекты обещания.</msg>
  <msg name="WinJS.Promise.any_returnValue">Обещание, которое при выполнении дает входное значение (завершение или ошибка).</msg>
  <msg name="WinJS.Promise.as">Возвращает обещание. Если объект уже является обещанием, он возвращается; в противном случае объект заключается в оболочку обещания.</msg>
  <msg name="WinJS.Promise.as_p:value">Значение, которое требуется рассматривать как обещание.</msg>
  <msg name="WinJS.Promise.as_returnValue">Обещание.</msg>
  <msg name="WinJS.Promise.cancel">Значение отмененного обещания, может быть возвращено из обработчика завершения обещания для указания отмены цепочки обещаний.</msg>
  <msg name="WinJS.Promise.dispatchEvent">Вызывает событие с указанными типом и свойствами.</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">Набор дополнительных свойств, который требуется вложить в объект события.</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">Указывает, вызвался ли метод preventDefault для события.</msg>
  <msg name="WinJS.Promise.is">Определяет, выполняет ли значение контракт обещания.</msg>
  <msg name="WinJS.Promise.is_p:value">Значение, которое может быть обещанием.</msg>
  <msg name="WinJS.Promise.is_returnValue">Значение true, если указанное значение является обещанием, в противном случае — значение false.</msg>
  <msg name="WinJS.Promise.join">Создает обещание, которое выполняется, когда выполняются все значения.</msg>
  <msg name="WinJS.Promise.join_p:values">Объект, поля которого содержат значения, некоторые из которых могут быть обещаниями.</msg>
  <msg name="WinJS.Promise.join_returnValue">Обещание, значение которого представляет собой объект с теми же именами полей, что и у объекта в параметре значений, где каждое значение поля является выполненным значением обещания.</msg>
  <msg name="WinJS.Promise.removeEventListener">Удаляет прослушивать событий из элемента управления.</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">Удаляемый прослушиватель.</msg>
  <msg name="WinJS.Promise.then">Статическая версия метода экземпляра посыла then().</msg>
  <msg name="WinJS.Promise.then_p:value">значение, которое требуется рассматривать как обещание.</msg>
  <msg name="WinJS.Promise.then_p:complete">Функция, которая вызывается, если обещание выполнено со значением. Если значение равно NULL, то обещание просто возвращает значение. Значение передается в виде одного аргумента.</msg>
  <msg name="WinJS.Promise.then_p:error">Функция, которая вызывается, если обещание выполнено с ошибкой. Ошибка передается в виде одного аргумента.</msg>
  <msg name="WinJS.Promise.then_returnValue">Обещание, значение которого является результатом выполнения указанной функции при завершении.</msg>
  <msg name="WinJS.Promise.thenEach">Выполняет операцию для всех входных обещаний и возвращает обещание, имеющее форму входных данных и содержащее результат операции, которая была выполнена на каждых входных данных.</msg>
  <msg name="WinJS.Promise.thenEach_p:values">Набор значений (которые могут быть или массивом или объектом), некоторые или все из которых являются обещаниями.</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">Функция, которая вызывается, если обещание выполнено со значением. Если значение равно NULL, то обещание возвращает значение. Значение передается в виде одного аргумента.</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">Обещание, являющееся результатом вызова функции Promise.join с параметром значения.</msg>
  <msg name="WinJS.Promise.timeout">Создает обещание, которое выполняется после завершения времени ожидания.</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">Значение времени ожидания в миллисекундах. Если это значение равно нулю или не указано, вызывается метод setImmediate, в противном случае вызывается метод setTimeout.</msg>
  <msg name="WinJS.Promise.timeout_p:promise">Обещание, которое будет отменено, если оно не завершается до истечения времени ожидания.</msg>
  <msg name="WinJS.Promise.timeout_returnValue">Обещание, асинхронно завершающееся после указанного времени ожидания.</msg>
  <msg name="WinJS.Promise.wrap">Заключает значение, не являющееся обещанием, в оболочку обещания. Эту функцию можно использовать, если нужно передать значение функции, требующей обещания.</msg>
  <msg name="WinJS.Promise.wrap_p:value">Некоторое значение, не являющееся обещанием, которое требуется упаковать в обещание.</msg>
  <msg name="WinJS.Promise.wrap_returnValue">Обещание, успешно выполненное с указанным значением</msg>
  <msg name="WinJS.Promise.wrapError">Заключает значение ошибки, не являющееся обещанием, в оболочку обещания. Эту функцию можно использовать, если нужно передать ошибку функции, требующей обещания.</msg>
  <msg name="WinJS.Promise.wrapError_p:error">Значение ошибки, не являющееся обещанием, которое требуется упаковать в обещание.</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">Обещание, находящееся в состоянии ошибки с указанным значением.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">Получает Значение, показывающее, выполнено ли задание. Это значение равно true, если задание выполнено до полного завершения, и значение false, если оно еще не выполнено или отменено.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">Возвращает уникальный идентификатор для этого задания.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">Возвращает или задает строку, определяющую диагностическое имя данного задания.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">Получает токен владельца для задания. Можно использовать метод cancelAll этого токена владельца для отмены соответствующих заданий.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">Возвращает или задает приоритет, при котором это задание выполняется планировщиком.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">Отменяет задание.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">Приостанавливает задание.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">Продолжает задание, если оно приостановлено.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">Экземпляр задания, для которого работа в настоящее время выполняется.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">Логическое значение, которое станет true, когда рабочий элемент запрашивается планировщиком для совместной передачи.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">Вызывается, когда рабочий элемент блокируется на асинхронной работе. Планировщик ожидает выполнения указанного Promise, прежде чем повторно ставить задание в очередь.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">Значение Promise, при завершении которого которое предоставляет функцию рабочего элемента для повторного планирования.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">Вызывается, когда рабочий элемент совместно передается планировщику и имеет работу для выполнения в будущем. Используйте этот метод для планирования дополнительной работы на момент, когда рабочий элемент должен быть передан.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">Рабочая функция, которая будет повторно запланирована.</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">Отменяет все задания, связанные с этим токеном владельца.</msg>
  <msg name="WinJS.ErrorFromName">Создает объект "Error" со свойствами заданного имени и сообщения.</msg>
  <msg name="WinJS.ErrorFromName_p:name">Имя данной ошибки. Это имя предназначено для программного использования и не должно локализовываться.</msg>
  <msg name="WinJS.ErrorFromName_p:message">Сообщение для этой ошибки. Это сообщение предназначено для чтения пользователями и должно быть локализовано.</msg>
  <msg name="WinJS.ErrorFromName_returnValue">Экземпляр ошибки с заполненными свойствами .name и .message</msg>
  <msg name="WinJS.Utilities.QueryCollection">Представляет результат селектора запроса, и предоставляет различные операции, которые выполняют действия над элементами коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">Элементы, полученные в результате запроса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">Выполняет действие для каждого элемента в QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">Действие, которое необходимо выполнить для каждого элемента.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">Аргумент, который требуется привязать к callbackFn</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">Возвращает коллекцию QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">Получает элемент из коллекции QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">Индекс возвращаемого элемента.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">Один элемент из коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">Задает значение атрибута для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">Имя задаваемого атрибута.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">Значение задаваемого атрибута.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">Этот объект QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">Получает значение атрибута из первого элемента в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">Имя атрибута.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">Значение атрибута.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">Добавляет указанный класс во все элементы в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">Имя добавляемого класса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">Определяет, существует ли указанный класс в первом элементе коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">Имя класса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">Значение true, если элемент имеет указанный класс; в противном случае — значение false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">Удаляет указанный класс из всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">Имя удаляемого класса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">Переключает (добавляет или удаляет) указанный класс для всех элементов в коллекции. Если класс присутствует, он удаляется; если он отсутствует, он добавляется.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">Имя переключаемого класса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">Регистрирует прослушиватель для указанного события для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">Имя события.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">Функция обработчика события, вызываемая при возникновении этого события.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">Значение true, если addEventListener требуется передать значение "capture == true"; в противном случае — значение false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">Отменяет регистрацию прослушивателя для указанного события для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">Функция обработчика события.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">Значение true, если "capture == true"; в противном случае — значение false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">Задает указанное свойство стиля для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">Имя свойства стиля.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">Значение для свойства.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">Очищает указанное свойство стиля для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">Имя очищаемого свойства стиля.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">Выполняет селектор запроса для всех элементов в коллекции и объединяет результат в коллекцию QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">Строка селектора запроса.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">Объект QueryCollection, содержащий объединенные результаты выполнения запроса для всех элементов в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">Добавляет набор элементов в данный объект QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">Элемент для добавления в объект QueryCollection. Это может быть объект, подобный массиву, фрагмент документа или один элемент.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">Создает элементы управления, присоединенные к элементам в данном объекте QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">Функция конструктора, которая используется для создания элементов управления, присоединенных к элементам.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">Параметры, передаваемые новым создаваемым элементам управления.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">Настраивает элементы управления, присоединенные к элементам в данном объекте QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">Параметры, передаваемые элементам управления.</msg>
  <msg name="WinJS.UI.HtmlControl">Позволяет динамически включать страницу HTML.</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">Инициализирует новый экземпляр HtmlControl для определения нового элемента управления страницы.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">Элемент, в котором размещен HtmlControl.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">Параметры для конфигурации страницы. Параметр URI требуется для указания исходного документа для содержимого страницы.</msg>
  <msg name="WinJS.UI.TabContainer.constructor">Создает TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">Элемент модели DOM, который должен быть сопоставлен с элементом TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">Набор параметров, который первоначально должен быть применен к элементу TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">Сконструированный элемент TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.dispose">Удаляет контейнер Tab.</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">Получает или задает дочерний элемент, имеющий фокус.</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">Возвращает или задает последовательность перехода элемента управления внутри контейнера.</msg>
  <msg name="WinJS.Application.IOHelper.exists">Определяет, существует ли указанный файл в контейнере.</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">Файл, который может существовать в этой папке</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">Обещание со значением true (файл существует) или false.</msg>
  <msg name="WinJS.Application.IOHelper.remove">Удаляет файл из контейнера</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">Удаляемый файл.</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">Обещание, которое выполняется, когда файл был удален</msg>
  <msg name="WinJS.Application.IOHelper.writeText">Записывает файл в контейнер с указанным текстом</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">Файл, в который осуществляется запись</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">Содержимое, которое необходимо записать в файл</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">Обещание с количеством записанных символов</msg>
  <msg name="WinJS.Application.IOHelper.readText">Считывает содержимое файла из контейнера, если файл не существует, возвращается значение по умолчанию.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">Файл, из которого требуется произвести чтение</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">Значение по умолчанию, возвращаемое, если файл не удалось открыть</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">Обещание с содержимым файла или значением по умолчанию.</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">Имя файла, который может существовать в этой папке</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">Удаляет файл из контейнера</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">Имя файла, в который осуществляется запись</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">Имя файла, из которого выполняется чтение</msg>
  <msg name="WinJS.Binding.observableMixin.bind">Связывает указанное действие со свойством, указанным в параметре имени. Эта функция вызывается, если значение свойства могло измениться. Не гарантируется, что действие вызывается только если значение фактически изменено, и не гарантируется, что это действие будет вызываться для каждого изменения значения. Реализация этой функции объединяет уведомления об изменениях, поэтому несколько обновлений значения свойства могут привести к созданию только одного вызова указанного действия.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">Имя свойства, которому требуется привязать действие.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">Функция, которая должна асинхронно вызываться, если значение свойства могло измениться.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">Этот объект возвращается.</msg>
  <msg name="WinJS.Binding.Template.constructor">Создает шаблон, который предоставляет элемент декларативной привязки с возможностью повторного использования.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">Элемент модели DOM для преобразования в шаблон.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">Если этот параметр указан, шаблон загружается из универсального кода ресурса (URI) и содержимое параметра элемента не обрабатывается.</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">Если указано, эта функция используется в качестве инициализатора по умолчанию для привязок данных, которые явно не задают инициализатор. Предоставленная Функция должна быть помечена как поддерживаемая для обработки.</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">Указывает, должны ли шаблоны останавливаться в отладчике при первой отрисовке</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">Задайте это свойство равным true для восстановления классической обработки шаблона и привязки данных и отключения компиляции шаблонов.</msg>
  <msg name="WinJS.Binding.Template.element">Получает DOM-элемент, используемый в качестве шаблона.</msg>
  <msg name="WinJS.Binding.Template.extractChild">Верните первый дочерний элемент шаблона вместо элемента оболочки, размещающей все содержимое шаблона.</msg>
  <msg name="WinJS.Binding.Template.processTimeout">Время (в миллисекундах), на которое требуется отложить создания декларативных элементов управления. Ноль (0) означает отсутствие задержки, любое отрицательное число приведет к задержке setImmediate, любое положительное число обрабатывается как количество миллисекунд.</msg>
  <msg name="WinJS.Binding.Template.render">Привязывает значения из указанного контекста данных к элементам, являющимся потомками указанного корневого элемента и имеющим атрибуты декларативной привязки (data-win-bind).</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">Объект, который следует использовать для привязки данных по умолчанию.</msg>
  <msg name="WinJS.Binding.Template.render_p:container">Элемент, к которому требуется добавить этот отрисованный шаблон. Если этот параметр опущен, то создается новый DIV.</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">Обещание, завершающееся после завершения привязки. Значением является либо элемент, указанный в параметре контейнера, либо созданный DIV.</msg>
  <msg name="WinJS.Binding.Template.renderItem">Отрисовывает экземпляр этого шаблона, привязанный к данным, содержащимся в элементе. Если присутствует повторно использованный параметр, а параметр enableRecycling имеет значение true, то шаблон попытается повторно использовать элементы DOM из повторно использованного параметра.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">Объект, содержащий данные, к которым требуется произвести привязку. Требуется только item.data.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">Ранее созданный экземпляр шаблона.</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">Элемент DOM.</msg>
  <msg name="WinJS.Binding.Template">Предоставляет элемент декларативной привязки с возможностью повторного использования.</msg>
  <msg name="WinJS.Binding.Template_name">Шаблон</msg>
  <msg name="WinJS.Binding.List.constructor">Создает объект WinJS.Binding.List.</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">Массив, содержащий элементы для инициализации списка.</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">Если options.binding имеет значение true, то список будет содержать результат вызова WinJS.Binding.as() для значений элементов. Если options.proxy имеет значение true, то в качестве хранилища для WinJS.Binding.List используется список, заданный как первый параметр. Этот параметр следует использовать с осторожностью, поскольку нескоординированные изменения в хранилище данных приводят к ошибкам.</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">Новый созданный экземпляр WinJS.Binding.List.</msg>
  <msg name="WinJS.Binding.List.length">Получает или задает длину списка, которая является целым значением, на единицу большее, чем наибольший индекс элемента в списке.</msg>
  <msg name="WinJS.Binding.List.getItem">Получает пару "ключ-данные" для указанного индекса списка.</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">Индекс значения, которое требуется извлечь.</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">Объект со свойствами .key и .data.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">Получает пару "ключ-данные" для указанного ключа элемента списка.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">Ключ извлекаемого значения.</msg>
  <msg name="WinJS.Binding.List.indexOfKey">Получает индекс первого вхождения ключа в списке.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">Ключ, который требуется найти в списке.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">Индекс первого вхождения ключа в списке или -1, если он не найден.</msg>
  <msg name="WinJS.Binding.List.move">Перемещает значение по индексу в указанную позицию.</msg>
  <msg name="WinJS.Binding.List.move_p:index">Исходный индекс значения.</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">Индекс значения после перемещения.</msg>
  <msg name="WinJS.Binding.List.notifyMutated">Заставляет список отправить уведомление itemmutated на все прослушиватели для значения по указанному индексу.</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">Индекс значение, которое было изменено.</msg>
  <msg name="WinJS.Binding.List.setAt">Заменяет значение по указанному индексу новым значением.</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">Индекс значения, которое было заменено.</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">Новое значение.</msg>
  <msg name="WinJS.Binding.List.reverse">Возвращает список с обратным порядком элементов. Этот метод размещает элементы объекта списка в обратном порядке. При выполнении этого метода новый объект списка не создается.</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">Обращенный список.</msg>
  <msg name="WinJS.Binding.List.sort">Возвращает список с сортированными элементами. Этот метод сортирует элементы объекта прямо в списке. При выполнении этого метода новый объект списка не создается.</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">Функция, применяемая для определения порядка элементов. Если этот аргумент опущен, элементы сортируются по возрастанию в порядке сортировки символов ASCII.</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">Сортируемый список.</msg>
  <msg name="WinJS.Binding.List.pop">Удаляет последний элемент из списка и возвращает его.</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">Последний элемент из списка.</msg>
  <msg name="WinJS.Binding.List.push">Добавляет новые элементы в список и возвращает новую длину списка.</msg>
  <msg name="WinJS.Binding.List.push_p:value">Элемент для вставки в конец списка.</msg>
  <msg name="WinJS.Binding.List.push_returnValue">Новая длина списка.</msg>
  <msg name="WinJS.Binding.List.shift">Удаляет первый элемент из списка и возвращает его.</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">Первый элемент из списка.</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">Элемент для вставки в начало списка.</msg>
  <msg name="WinJS.Binding.List.splice">Удаляет элементы из списка и, при необходимости, вставляет на их место новые элементы, возвращая удаленные элементы.</msg>
  <msg name="WinJS.Binding.List.splice_p:start">Позиция в списке, с которой начинается удаление элементов (индексация ведется с нуля).</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">Число удаляемых элементов.</msg>
  <msg name="WinJS.Binding.List.splice_p:item">Элементы, которые необходимо вставить в список вместо удаленных элементов.</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">Удаленные элементы.</msg>
  <msg name="WinJS.Namespace.defineWithParent">Определяет новое пространство имен с заданным именем в указанном родительском пространстве имен.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">Родительское пространство имен.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">Имя нового пространства имен.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">Члены нового пространства имен.</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">Новое определенное пространство имен.</msg>
  <msg name="WinJS.Namespace.define">Определяет новое пространство имен с заданным именем.</msg>
  <msg name="WinJS.Namespace.define_p:name">Имя пространства имен. Это может быть разделенное точками имя для вложенных пространств имен.</msg>
  <msg name="WinJS.Class.define">Определяет класс, используя указанный конструктор и указанных членов экземпляра.</msg>
  <msg name="WinJS.Class.define_p:constructor">Функция конструктора, которая используется для создания экземпляра этого класса.</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">Набор полей, свойств и методов экземпляра, доступных в классе.</msg>
  <msg name="WinJS.Class.define_p:staticMembers">Набор статических полей, свойств и методов, доступных в классе.</msg>
  <msg name="WinJS.Class.define_returnValue">Новый определенный класс.</msg>
  <msg name="WinJS.Class.derive">Создает подкласс на основе предоставленного параметра baseClass, используя наследование на основе прототипов.</msg>
  <msg name="WinJS.Class.derive_p:baseClass">Класс, от которого производится наследование.</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">Набор полей, свойств и методов экземпляра, которые следует сделать доступными в классе.</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">Набор статических полей, свойств и методов, которые следует сделать доступными в классе.</msg>
  <msg name="WinJS.Class.mix">Определяет класс, используя заданный конструктор и объединение набора членов экземпляра, заданное всеми смешиваемыми объектами. Список параметров смешивания имеет переменную длину.</msg>
  <msg name="WinJS.Utilities.hasWinRT">Определите, доступна ли среда WinRT в данном контексте скрипта.</msg>
  <msg name="WinJS.Utilities.getMember">Получает тип конечного уровня или пространство имен, заданное параметром имени.</msg>
  <msg name="WinJS.Utilities.getMember_p:name">Имя члена.</msg>
  <msg name="WinJS.Utilities.getMember_p:root">Корневой элемент, с которого требуется начать. Значения по умолчанию — глобальный объект.</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">Тип конечного уровня или пространство имен в указанном родительском пространстве имен.</msg>
  <msg name="WinJS.Utilities.ready">Гарантирует, что заданная функция выполняется только после возникновения события DOMContentLoaded для текущей страницы.</msg>
  <msg name="WinJS.Utilities.ready_returnValue">Обещание, завершающееся после того, как произошло событие DOMContentLoaded.</msg>
  <msg name="WinJS.Utilities.ready_p:callback">Функция, выполняющаяся после того, как произошло событие DOMContentLoaded.</msg>
  <msg name="WinJS.Utilities.ready_p:async">Если значение true, метод обратного вызова выполняется в асинхронном режиме.</msg>
  <msg name="WinJS.Utilities.strictProcessing">Определяет, включена ли строгая декларативная обработка в этом контексте скрипта.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">Помечает функцию как совместимую с декларативной обработкой, например WinJS.UI.processAll или WinJS.Binding.processAll.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">Функция, которая должна быть помечена как совместимая с декларативной обработкой.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">Входная функция.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">Утверждает, что значение совместимо с декларативной обработкой, например WinJS.UI.processAll или WinJS.Binding.processAll. В случае несовместимости создается исключение.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">Значение, проверяемое на совместимость с декларативной обработкой. Если значение является функцией, оно должно быть помечено свойством "supportedForProcessing" со значением true.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">Входное значение.</msg>
  <msg name="WinJS.strictProcessing">Всегда применяется строгая обработки, этот метод не имеет никакого эффекта.</msg>
  <msg name="WinJS.Utilities.formatLog">Добавляет теги и тип к сообщению ведения журнала.</msg>
  <msg name="WinJS.Utilities.startLog_p:message">Форматируемое сообщение.</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">Теги, которые следует применить к сообщению. Многочисленные теги разделяются пробелами.</msg>
  <msg name="WinJS.Utilities.startLog_p:type">Тип сообщения.</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">Форматированное сообщение.</msg>
  <msg name="WinJS.Utilities.startLog">Настраивает средство ведения журнала, которое записывает сообщения, содержащее указанные теги, из WinJS.log в console.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options">Теги для сообщений, которые требуется записывать в журнал. Многочисленные теги разделяются пробелами.</msg>
  <msg name="WinJS.Utilities.startLog2">Настройка средства ведения журнала для записи выходных данных WinJS.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">Может содержать свойства .type, .tags, .excludeTags и .action. - .type является обязательным тегом. - .excludeTags — это разделенный пробелами список тегов, при наличии любого из которых сообщение не будет записано в журнал. - .tags — это разделенный пробелами список тегов, при наличии любого из которых сообщение будет записано в журнал. - .action — это функция, которая, если она есть, будет вызвана с сообщением, тегами и типом журнала. Значение по умолчанию — запись журнала в консоль.</msg>
  <msg name="WinJS.Utilities.stopLog">Удаляет ранее настроенное средство ведения журнала.</msg>
  <msg name="WinJS.Utilities.createEventProperties">Создает объект, имеет одно свойство для каждого имени, переданного функции.</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">Переменный список имен свойств.</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">Объект с указанными свойствами. Имена свойств имеют префикс "on".</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">Если значение true, инициирует захват, в противном случае — значение false.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">Вызывает событие указанного типа и с указанными дополнительными свойствами.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">Набор дополнительных свойств, который требуется вложить в объект события при возникновении события.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">Значение true, если для события был вызван метод preventDefault.</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">Указывает, следует ли начать захват.</msg>
  <msg name="WinJS.Resources.addEventListener">Регистрирует обработчик событий для указанного события.</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">Имя события для обработки.</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">Прослушиватель, который требуется вызывать при возникновении события.</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">Установите в значение true, чтобы зарегистрировать обработчик событий для этапа захвата; установите значение false, чтобы зарегистрировать для этапа восходящей маршрутизации.</msg>
  <msg name="WinJS.Resources.getString">Извлекает строку ресурса, которая имеет указанный идентификатор ресурса.</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">Идентификатор ресурса извлекаемой строки.</msg>
  <msg name="WinJS.Resources.getString_returnValue">Объект, который может содержать следующие свойства: value: Значение затребованной строки. Это свойство всегда присутствует. empty: Значение, которое указывает, не найдена или найдена затребованная строка. Его значение true, то строка не найдена. Если значение false или не определено, запрошенная строка найдена. lang: Язык строки, если он указан. Это свойство присутствует только для многоязычных ресурсов.</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">Возвращает строковое представление состояния планировщика для диагностических целей. Задания и запросы утечки отображаются в том порядке, в котором они в настоящее время, как ожидается, будут обрабатываться. Текущее задание и запрос утечки помечаются звездочкой.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">Выполняет задания в планировщике без разделения выделенного времени, до тех пор, пока все задания заданного приоритета и выше не будет выполнены.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">Приоритет, к которому должен планировщик должен обеспечить утечку. По умолчанию — Priority.min, что выполняет утечку всех заданий в очередь.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">Необязательное описание запроса утечки для диагностики.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">Объявление, которое завершается, когда утечка завершена. Отмена этого обещания отменяет запрос утечки. Обещание никогда не войдет в состояние ошибки.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">Запускает заданный обратный вызов в контексте с высоким приоритетом.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">Обратный вызов для запуска в контексте с высоким приоритетом.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">Возвращаемое значение обратного вызова.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">Создает и возвращает токен нового владельца, которому можно задать значение свойства владельца одного или нескольких заданий. Затем его можно использовать для отмены заданий, которые ему "принадлежат".</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">Новый токен владельца. Можно использовать этот токен для управления заданиями, которые ему принадлежат.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">Планирует выполнение заданной функции асинхронно.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">Функция, которая представляет рабочий элемент для планирования. Когда Вызывается, рабочий элемент получит в качестве первого аргумента объект JobInfo, позволяющий рабочему элементу спросить планировщик, должен ли он выполнять совместную передачу, и если да, разрешающий рабочему элементу предоставить функцию, которая будет выполняться как продолжение или WinJS.Promise, который, когда завершится, будет предоставлять функцию, которая будет выполняться как продолжение.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">Приоритет, с которым следует планировать рабочий элемент. Значение по умолчанию — Priority.normal.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">Экземпляр 'this', который требуется связать в рабочий элемент. Значение по умолчанию — NULL.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">Описание рабочего элемента для диагностики. Значение по умолчанию — пустая строка.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">Экземпляр задания, представляющий этот рабочий элемент.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">Планирует задание для выполнения возвращенного Promise. Есть четыре Версии этого метода для различных часто используемых приоритетов: schedulePromiseHigh, schedulePromiseAboveNormal, schedulePromiseNormal, schedulePromiseBelowNormal и schedulePromiseIdle. Пример использования, в котором показано, как обеспечить, чтобы последняя ссылка в цепочке обещания выполнялась в планировщике с высоким приоритетом: asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">Значение, с которым возвращенное обещание завершится.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">Строку описания задания, предназначенная для диагностики.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">Объявление, которое выполняется внутри задания желаемого приоритета.</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">Возвращает текущий приоритет, с которым выполняется вызывающий.</msg>
  <msg name="WinJS.xhr">Заключает вызовы XMLHttpRequest в оболочку обещания.</msg>
  <msg name="WinJS.xhr_p:options">Параметры, которые применяются к объекту XMLHttpRequest. Это следующие параметры: тип, URL-адрес, пользователь, пароль, заголовки, responseType, данные и customRequestInitializer.</msg>
  <msg name="WinJS.xhr_returnValue">Обещание, которое при завершении возвращает объект XMLHttpRequest.</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">Задает указанный текст для свойства innerHTML указанного элемента.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">Элемент, для которого задается свойство innerHTML.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">Значение, задаваемое для свойства innerHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTML">Задает указанный текст для свойства outerHTML указанного элемента.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">Элемент, для которого задается свойство outerHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">Значение, задаваемое для свойства outerHTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">Вызывает функцию insertAdjacentHTML для указанного элемента.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">Элемент, для которого вызывается функция insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">Позиция относительно элемента, в которой требуется вставить код HTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">Значение, предоставляемое функции insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">Задает указанный текст для свойства outerHTML указанного элемента в контексте msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">Вызывает insertAdjacentHTML в указанном элементе в контексте msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">Значение, предоставляемое функции insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">Задает для свойства innerHTML элемента указанный текст, если он проходит проверку msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">Задает для свойства outerHTML элемента указанный текст, если он проходит проверку msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">Вызывает insertAdjacentHTML на элементе, если он проходит проверку msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.markDisposable">Добавляет указанную реализацию ликвидации в указанный элемент и отмечает как высвобождаемый.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">Элемент, который необходимо пометить как высвобождаемый.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">Функция, содержащая логику удаления для элемента, которая будет вызвана функцией удаления.</msg>
  <msg name="WinJS.Utilities.disposeSubTree">Удаляет все высвобождаемые элементы первого поколения, являющиеся дочерними относительно указанного элемента. Указанный элемент сам по себе не удаляется.</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">Корневой элемент, поддерево которого необходимо удалить.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">Добавляет набор декларативно указанных параметров (свойства и события) к элементу управления. Если имя свойства параметров начинается с "on", то значение свойства является функцией и этот элемент управления поддерживает метод addEventListener. Метод setOptions вызывает метод addEventListener для элемента управления.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">Элемент управления, к которому требуется применить свойства и события.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">Набор параметров, указанных декларативно.</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">значение true, чтобы инициировать захват; в противном случае — значение false.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">Вызывает событие указанного типа, добавляя указанные дополнительные свойства.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">значение true, если был вызван метод preventDefault для события; в противном случае — значение false.</msg>
  <msg name="WinJS.UI.select.createSelect">Обходит дерево объектной модели DOM с заданного элемента к корню документа, когда встречается область действия селектора, выбор выполняет в этой области действия поиск заданной строки селектора. Возвращается первый соответствующий элемент.</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">Строка селектора.</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">Целевой элемент, если найден.</msg>
  <msg name="WinJS.UI.processAll">Применяет декларативную привязку элемента управления ко всем элементам, начиная с указанного корневого элемента.</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">Элемент, с которого начинается привязка. Если этот параметр не указан, то привязка применяется ко всему документу.</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">Если имеет значение true, элементы, которые должны быть привязаны, пропускают указанный корневой элемент и включают только дочерние элементы.</msg>
  <msg name="WinJS.UI.processAll_returnValue">Обещание, которое выполняется, когда привязка применена ко всем элементам управления.</msg>
  <msg name="WinJS.UI.process">Применяет декларативную привязку элемента управления к указанному элементу.</msg>
  <msg name="WinJS.UI.process_p:element">Элемент для привязки.</msg>
  <msg name="WinJS.UI.process_returnValue">Обещание, которое выполняется после того, как элемент управления активирован. Значением обещания является элемент управления, присоединенный к элементу.</msg>
  <msg name="WinJS.Utilities.query">Выполняет селектор запроса в указанном элементе или всем документе.</msg>
  <msg name="WinJS.Utilities.query_p:query">Селектор запроса, который необходимо выполнить.</msg>
  <msg name="WinJS.Utilities.query_p:element">Элемент, в котором выполняется запрос. Если этот параметр не указан, запрос выполняется для всего документа.</msg>
  <msg name="WinJS.Utilities.query_returnValue">Объект QueryCollection, содержащий результаты запроса.</msg>
  <msg name="WinJS.Utilities.id">Ищет элемент по идентификатору и заключает результат в оболочку объекта QueryCollection.</msg>
  <msg name="WinJS.Utilities.id_p:id">Идентификатор элемента.</msg>
  <msg name="WinJS.Utilities.id_returnValue">Объект QueryCollection, содержащий элемент, если он найден.</msg>
  <msg name="WinJS.Utilities.children">Создает объект QueryCollection, содержащий дочерний элемент указанного родительского элемента.</msg>
  <msg name="WinJS.Utilities.children_p:element">Родительский элемент.</msg>
  <msg name="WinJS.Utilities.children_returnValue">Объект QueryCollection, содержащий дочерний элемент этого элемента.</msg>
  <msg name="WinJS.Utilities.Key">Определяет набор значений клавиатуры.</msg>
  <msg name="WinJS.Utilities.Key.backspace">Клавиша BACKSPACE.</msg>
  <msg name="WinJS.Utilities.Key.tab">Клавиша TAB.</msg>
  <msg name="WinJS.Utilities.Key.enter">Клавиша ВВОД.</msg>
  <msg name="WinJS.Utilities.Key.shift">Клавиша SHIFT.</msg>
  <msg name="WinJS.Utilities.Key.ctrl">Клавиша CTRL.</msg>
  <msg name="WinJS.Utilities.Key.alt">Клавиша ALT</msg>
  <msg name="WinJS.Utilities.Key.pause">Клавиша Пауза.</msg>
  <msg name="WinJS.Utilities.Key.capsLock">Клавиша CAPS LOCK.</msg>
  <msg name="WinJS.Utilities.Key.escape">Клавиша ESCAPE.</msg>
  <msg name="WinJS.Utilities.Key.space">Клавиша ПРОБЕЛ.</msg>
  <msg name="WinJS.Utilities.Key.pageUp">Клавиша PAGE UP.</msg>
  <msg name="WinJS.Utilities.Key.pageDown">Клавиша PAGE DOWN.</msg>
  <msg name="WinJS.Utilities.Key.end">Клавиша END.</msg>
  <msg name="WinJS.Utilities.Key.home">Клавиша HOME.</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">Клавиша СТРЕЛКА ВЛЕВО.</msg>
  <msg name="WinJS.Utilities.Key.upArrow">Клавиша СТРЕЛКА ВВЕРХ.</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">Клавиша СТРЕЛКА ВПРАВО.</msg>
  <msg name="WinJS.Utilities.Key.downArrow">Клавиша со стрелкой вниз.</msg>
  <msg name="WinJS.Utilities.Key.insert">Клавиша INSERT.</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">Клавиша DELETE.</msg>
  <msg name="WinJS.Utilities.Key.num0">Клавиша цифры 0.</msg>
  <msg name="WinJS.Utilities.Key.num1">Клавиша цифры 1.</msg>
  <msg name="WinJS.Utilities.Key.num2">Клавиша цифры 2.</msg>
  <msg name="WinJS.Utilities.Key.num3">Клавиша цифры 3.</msg>
  <msg name="WinJS.Utilities.Key.num4">Клавиша цифры 4.</msg>
  <msg name="WinJS.Utilities.Key.num5">Клавиша цифры 5.</msg>
  <msg name="WinJS.Utilities.Key.num6">Клавиша цифры 6.</msg>
  <msg name="WinJS.Utilities.Key.num7">Клавиша цифры 7.</msg>
  <msg name="WinJS.Utilities.Key.num8">Клавиша цифры 8.</msg>
  <msg name="WinJS.Utilities.Key.num9">Клавиша цифры 9.</msg>
  <msg name="WinJS.Utilities.Key.a">Клавиша A.</msg>
  <msg name="WinJS.Utilities.Key.b">Клавиша B.</msg>
  <msg name="WinJS.Utilities.Key.c">Клавиша C.</msg>
  <msg name="WinJS.Utilities.Key.d">Клавиша D.</msg>
  <msg name="WinJS.Utilities.Key.e">Клавиша E.</msg>
  <msg name="WinJS.Utilities.Key.f">Клавиша F.</msg>
  <msg name="WinJS.Utilities.Key.g">Клавиша G.</msg>
  <msg name="WinJS.Utilities.Key.h">Клавиша H.</msg>
  <msg name="WinJS.Utilities.Key.i">Клавиша I.</msg>
  <msg name="WinJS.Utilities.Key.j">Клавиша J.</msg>
  <msg name="WinJS.Utilities.Key.k">Клавиша K.</msg>
  <msg name="WinJS.Utilities.Key.l">Клавиша L.</msg>
  <msg name="WinJS.Utilities.Key.m">Клавиша M.</msg>
  <msg name="WinJS.Utilities.Key.n">Клавиша N.</msg>
  <msg name="WinJS.Utilities.Key.o">Клавиша O.</msg>
  <msg name="WinJS.Utilities.Key.p">Клавиша P.</msg>
  <msg name="WinJS.Utilities.Key.q">Клавиша Q.</msg>
  <msg name="WinJS.Utilities.Key.r">Клавиша R.</msg>
  <msg name="WinJS.Utilities.Key.s">Клавиша S.</msg>
  <msg name="WinJS.Utilities.Key.t">Клавиша T.</msg>
  <msg name="WinJS.Utilities.Key.u">Клавиша U.</msg>
  <msg name="WinJS.Utilities.Key.v">Клавиша V.</msg>
  <msg name="WinJS.Utilities.Key.w">Клавиша W.</msg>
  <msg name="WinJS.Utilities.Key.x">Клавиша X.</msg>
  <msg name="WinJS.Utilities.Key.y">Клавиша Y.</msg>
  <msg name="WinJS.Utilities.Key.z">Клавиша Z.</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">Левая клавиша Windows.</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">Правая клавиша Windows.</msg>
  <msg name="WinJS.Utilities.Key.menu">Клавиша меню.</msg>
  <msg name="WinJS.Utilities.Key.numPad0">Клавиша 0 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad1">Клавиша 1 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad2">Клавиша 2 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad3">Клавиша 3 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad4">Клавиша 4 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad5">Клавиша 5 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad6">Клавиша 6 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad7">Клавиша 7 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad8">Клавиша 8 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.numPad9">Клавиша 9 на цифровой клавиатуре.</msg>
  <msg name="WinJS.Utilities.Key.multiply">Клавиша умножения.</msg>
  <msg name="WinJS.Utilities.Key.add">Клавиша сложения.</msg>
  <msg name="WinJS.Utilities.Key.subtract">Клавиша вычитания.</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">Клавиша десятичного знака.</msg>
  <msg name="WinJS.Utilities.Key.divide">Клавиша деления.</msg>
  <msg name="WinJS.Utilities.Key.F1">Клавиша F1.</msg>
  <msg name="WinJS.Utilities.Key.F2">Клавиша F2.</msg>
  <msg name="WinJS.Utilities.Key.F3">Клавиша F3.</msg>
  <msg name="WinJS.Utilities.Key.F4">Клавиша F4.</msg>
  <msg name="WinJS.Utilities.Key.F5">Клавиша F5.</msg>
  <msg name="WinJS.Utilities.Key.F6">Клавиша F6.</msg>
  <msg name="WinJS.Utilities.Key.F7">Клавиша F7.</msg>
  <msg name="WinJS.Utilities.Key.F8">Клавиша F8.</msg>
  <msg name="WinJS.Utilities.Key.F9">Клавиша F9.</msg>
  <msg name="WinJS.Utilities.Key.F10">Клавиша F10.</msg>
  <msg name="WinJS.Utilities.Key.F11">Клавиша F11.</msg>
  <msg name="WinJS.Utilities.Key.F12">Клавиша F12.</msg>
  <msg name="WinJS.Utilities.Key.numLock">Клавиша NUMBER LOCK.</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">Клавиша SCROLL LOCK.</msg>
  <msg name="WinJS.Utilities.Key.browserBack">Клавиша браузера "Назад".</msg>
  <msg name="WinJS.Utilities.Key.browserForward">Клавиша браузера "Вперед".</msg>
  <msg name="WinJS.Utilities.Key.semicolon">Клавиша ТОЧКА С ЗАПЯТОЙ.</msg>
  <msg name="WinJS.Utilities.Key.equal">Клавиша РАВНО.</msg>
  <msg name="WinJS.Utilities.Key.comma">Клавиша ЗАПЯТАЯ.</msg>
  <msg name="WinJS.Utilities.Key.dash">Клавиша ТИРЕ.</msg>
  <msg name="WinJS.Utilities.Key.period">Клавиша ТОЧКА.</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">Клавиша КОСАЯ ЧЕРТА.</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">Клавиша знака грависа.</msg>
  <msg name="WinJS.Utilities.Key.openBracket">Клавиша ОТКРЫВАЮЩАЯ СКОБКА.</msg>
  <msg name="WinJS.Utilities.Key.backSlash">Клавиша ОБРАТНАЯ КОСАЯ ЧЕРТА.</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">Клавиша ЗАКРЫВАЮЩАЯ СКОБКА.</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">Клавиша ОДИНАРНАЯ КАВЫЧКА</msg>
  <msg name="WinJS.Utilities.data">Получает значение данных, связанное с указанным элементом.</msg>
  <msg name="WinJS.Utilities.data_p:element">Элемент.</msg>
  <msg name="WinJS.Utilities.data_returnValue">Значение, связанное с элементом.</msg>
  <msg name="WinJS.Utilities.hasClass">Определяет, имеет ли указанный элемент указанный класс.</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">Значение true, если указанный элемент содержит указанный класс; в противном случае — значение false.</msg>
  <msg name="WinJS.Utilities.addClass">Добавляет указанный класс или классы в указанный элемент. Несколько классов можно добавить, разделяя их имена пробелами.</msg>
  <msg name="WinJS.Utilities.addClass_p:e">Элемент, в который требуется добавить класс.</msg>
  <msg name="WinJS.Utilities.addClass_p:name">Имя добавляемого класса; можно добавить несколько классов, разделяя их имена пробелами</msg>
  <msg name="WinJS.Utilities.removeClass">Удаляет указанный класс из указанного элемента.</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">Элемент, из которого нужно удалить класс.</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">Имя удаляемого класса.</msg>
  <msg name="WinJS.Utilities.toggleClass">Переключает (добавляет или удаляет) указанный класс в указанном элементе. Если класс присутствует, он удаляется; если он отсутствует, он добавляется.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">Элемент, в котором требуется включить или выключить класс.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">Имя включаемого или выключаемого класса.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">Получает координату левого края указанного элемента относительно указанного родительского элемента.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">Относительная координата левого края.</msg>
  <msg name="WinJS.Utilities.getRelativeTop">Получает координату верхнего края элемента относительно указанного родительского элемента.</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">Относительная координата верхнего края.</msg>
  <msg name="WinJS.Utilities.empty">Удаляет все дочерние узлы из указанного элемента.</msg>
  <msg name="WinJS.Utilities.getContentWidth">Получает ширину содержимого указанного элемента. Ширина содержимого не включает границы или заполнение.</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">Ширина содержимого элемента.</msg>
  <msg name="WinJS.Utilities.getTotalWidth">Получает ширину элемента, включая поля.</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">Ширина элемента, включая поля.</msg>
  <msg name="WinJS.Utilities.getContentHeight">Получает высоту содержимого указанного элемента. Высота содержимого не включает границы или заполнение.</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">Высота содержимого элемента.</msg>
  <msg name="WinJS.Utilities.getTotalHeight">Получает высоту элемента, включая его поля.</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">Высота элемента, включая поля.</msg>
  <msg name="WinJS.Utilities.getPosition">Получает положение указанного элемента.</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">Объект, содержащий свойства координаты левого края, координаты верхнего края, ширины и высоты элемента.</msg>
  <msg name="WinJS.Utilities.convertToPixels">Преобразует строку размещения CSS для указанного элемента в пиксели.</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">Строка размещения CSS.</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">Количество пикселей.</msg>
  <msg name="WinJS.Utilities.eventWithinElement">Определяет, произошло ли указанное событие в указанном элементе.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">Событие.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">Значение true, если событие произошло в этом элементе; в противном случае — значение false.</msg>
  <msg name="WinJS.UI.Pages.dispose">Удаляет эту страницу.</msg>
  <msg name="WinJS.UI.Pages._mixin.load">Создает копию элементов DOM из указанного универсального кода ресурса (URI). Чтобы использовать это переопределение, перед вызовом функции WinJS.UI.Pages.render() страница, которая содержит переопределение загрузки, должна быть определена путем вызова функции WinJS.UI.Pages.define().</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">Универсальный код ресурса (URI), из которого требуется скопировать элементы DOM.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">Обещание, выполненное значение которого представляет собой набор элементов DOM, не имеющих родительских элементов, если требуется асинхронная обработка. В противном случае ничего не возвращается.</msg>
  <msg name="WinJS.UI.Pages._mixin.init">Инициализирует элемент управления перед заданием содержимого элемента управления. Используйте обработанный метод для любой инициализации, которая должна быть выполнена после задания содержимого элемента управления.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">Элемент DOM, который будет содержать все содержимое страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">Параметры, переданные в конструктор страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">Обещание, которое выполняется при завершении инициализации, если требуется асинхронная обработка. В противном случае ничего не возвращается.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">Инициализирует элемент управления после задания содержимого элемента управления.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">Параметры, которые требуется передать в конструктор страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.render">Выполняет отрисовку элемента управления, как правило путем добавления элементов, указанных в параметре loadResult, к заданному элементу.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">Параметры, переданные в конструктор страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">Элементы, возвращенные из метода загрузки.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">Обещание, которое выполняется при завершении отрисовки, если требуется асинхронная обработка. В противном случае ничего не возвращается.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">Вызывается после завершения всех операций инициализации и отрисовки. В этот момент элемент готов для использования.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">Элемент DOM, который содержит все содержимое страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">Параметры, переданные в конструктор страницы</msg>
  <msg name="WinJS.UI.Pages._mixin.error">Вызывается при возникновении любой ошибки во время обработки страницы.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">Произошедшая ошибка.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">Ничего, если ошибка была обработана, или ошибка обещания, если ошибка не была обработана.</msg>
  <msg name="WinJS.UI.Pages.define">Создает новый элемент управления страницы из указанного универсального кода ресурса (URI), содержащий указанные члены. Допускается несколько вызовов этого метода для одного универсального кода ресурса (URI), при этом все члены будут объединены.</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">Универсальный код ресурса (URI) для содержимого, определяющего страницу.</msg>
  <msg name="WinJS.UI.Pages.define_p:members">Дополнительные члены, которые будет иметь элемент управления.</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">Функция конструктора, которая создает страницу.</msg>
  <msg name="WinJS.UI.Pages.get">Получает уже определенный элемент управления страницы для указанного универсального кода ресурса (URI) или создает новый.</msg>
  <msg name="WinJS.UI.Pages.render">Создает элемент управления страницы из указанного универсального кода ресурса (URI) в пределах заданного элемента с указанными параметрами.</msg>
  <msg name="WinJS.UI.Pages.render_p:element">Элемент, который требуется заполнить этой страницей.</msg>
  <msg name="WinJS.UI.Pages.render_p:options">Параметры для конфигурации страницы.</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">Обещание, которое выполняется, если указанный элемент является потомком заключительного документа.</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">Обещание, которое выполняется по завершении отрисовки страницы.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">Копирует содержимое указанного универсального кода ресурса (URI) в указанный элемент.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">Универсальный код ресурса (URI), содержащий фрагмент, который требуется скопировать.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">Элемент, к которому добавляется фрагмент.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">Обещание, которое выполняется, когда был загружен фрагмент. Если целевой элемент не указан, то копируемый фрагмент является выполненным значением.</msg>
  <msg name="WinJS.UI.Fragments.cache">Начинает загрузку фрагмента в указанном расположении. Возвращаемое обещание завершается, когда фрагмент готов к копированию.</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">Универсальный код ресурса (URI), содержащий фрагмент, который требуется скопировать.</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">Обещание, которое выполняется, когда фрагмент подготовлен к копированию.</msg>
  <msg name="WinJS.UI.Fragments.clearCache">Удаляет все кэшированные данные об указанном фрагменте. Этот метод не выгружает никакие скрипты или стили, на которые ссылается фрагмент.</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">Универсальный код ресурса (URI), содержащий фрагмент, который требуется очистить. Если универсальный код ресурса (URI) не предоставлен, то очищается все содержимое кэша.</msg>
  <msg name="WinJS.UI.isAnimationEnabled">Определяет, будет ли библиотека анимации WinJS выполнять анимации.</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">Значение true, если анимации WinJS будут выполняться; значение false, если анимации WinJS отключены.</msg>
  <msg name="WinJS.UI.disableAnimations">Запрещает анимации в библиотеке анимации WinJS путем уменьшения счетчика разрешения анимации.</msg>
  <msg name="WinJS.UI.enableAnimations">Разрешает анимации в библиотеке анимации WinJS путем увеличения счетчика разрешения анимации.</msg>
  <msg name="WinJS.UI.executeAnimation">Выполняет анимацию CSS, которая может сосуществовать с другими анимациями библиотеки анимации. Не предполагается, что приложения будут вызывать эту функцию напрямую; они должны отдавать предпочтение использованию высокоуровневых анимаций из библиотеки анимации.</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">Один элемент или коллекция элементов, для которых требуется выполнение анимации CSS.</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">Одно описание анимации или массив описаний анимации.</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">Объект обещания, которое завершается при завершении анимации CSS.</msg>
  <msg name="WinJS.UI.executeTransition">Выполняет переход CSS, который может сосуществовать с другими анимациями библиотеки анимации. Не предполагается, что приложения будут вызывать эту функцию напрямую; они должны отдавать предпочтение использованию высокоуровневых анимаций из библиотеки анимации.</msg>
  <msg name="WinJS.UI.executeTransition_p:element">Один элемент или коллекция элементов, для которых требуется выполнение перехода CSS.</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">Одно описание перехода или массив описаний переходов.</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">Объект обещания, которое завершается при завершении перехода CSS.</msg>
  <msg name="WinJS.UI.eventHandler">Помечает функцию обработчика событий как совместимую с декларативной обработкой.</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">Обработчик, который должен быть помечен как совместимый с декларативной обработкой.</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">Входной обработчик.</msg>
  <msg name="WinJS.UI.Orientation">Параметры ориентации для свойства элемента управления</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">Вертикальный</msg>
  <msg name="WinJS.Application.event.setPromise">Используется для информирования объекта приложения, что выполняется асинхронная работа, и что этот обработчик события не должен считаться завершенным до тех пор, пока не завершится обещание.</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">Ожидаемое обещание.</msg>
  <msg name="WinJS.Application.queueEvent">Устанавливает событие в очередь для обработки очередью событий WinJS.Application.</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">Предполагается, что объект события имеет свойство типа, которое используется в качестве имени события при диспетчеризации в очереди событий WinJS.Application. Весь объект предоставляется прослушивателям событий в свойстве "detail" события.</msg>
  <msg name="WinJS.Application.stop">Останавливает обработку события приложения и сбрасывает WinJS.Application в первоначальное состояние.</msg>
  <msg name="WinJS.Application.checkpoint">Устанавливает в очередь событие контрольной точки.</msg>
  <msg name="WinJS.Application.start">Запускает обработку событий в очереди событий WinJS.Application.</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">Используется для информирования объекта ListView, что выполняется асинхронная работа, и что этот обработчик события не должен считаться завершенным до тех пор, пока не завершится обещание.</msg>
  <msg name="WinJS.Navigation.canGoForward">Определяет, возможен ли переход вперед.</msg>
  <msg name="WinJS.Navigation.canGoBack">Определяет, возможен ли переход назад.</msg>
  <msg name="WinJS.Navigation.location">Получает текущее расположение.</msg>
  <msg name="WinJS.Navigation.state">Получает или задает состояние навигации.</msg>
  <msg name="WinJS.Navigation.history">Получает или задает журнал навигации.</msg>
  <msg name="WinJS.Navigation.forward">Производит переход вперед.</msg>
  <msg name="WinJS.Navigation.forward_p:distance">Число записей для перехода вперед.</msg>
  <msg name="WinJS.Navigation.forward_returnValue">Обещание, которое завершается со значением, указывающим, был ли переход выполнен успешно.</msg>
  <msg name="WinJS.Navigation.back">Производит переход назад.</msg>
  <msg name="WinJS.Navigation.back_p:distance">Число записей для перехода назад в журнале.</msg>
  <msg name="WinJS.Navigation.navigate">Выполняет переход к расположению.</msg>
  <msg name="WinJS.Navigation.navigate_p:location">Расположение, в которое требуется перейти. Обычно расположение является строкой, но может быть чем угодно.</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">Состояние навигации, которое можно получить через WinJS.Navigation.state.</msg>
  <msg name="WinJS.Application.local">Разрешает доступ для создания файлов в локальном хранилище приложения, которое сохраняется между запусками приложения и не перемещается.</msg>
  <msg name="WinJS.Application.temp">Разрешает доступ для создания файлов во временном хранилище приложения, которые могут быть удалены системой между запусками приложения.</msg>
  <msg name="WinJS.Application.roaming">Разрешает доступ для создания файлов в перемещаемом хранилище приложения, которое сохраняется между запусками приложения и перемещается вместе с пользователем между несколькими компьютерами.</msg>
  <msg name="WinJS.Binding.observableMixin.notify">Уведомляет прослушиватели о том, что значение свойства обновлено.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">Имя свойства, которое обновляется в данный момент.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">Новое значение свойства.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">Старое значение свойства.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">Обещание, которое выполняется при завершении уведомлений.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">Удаляет один или несколько прослушивателей из списка уведомления для заданного свойства.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">Имя свойства, привязку которого требуется отменить. Если этот параметр опущен, удаляются все прослушиватели для всех событий.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">Функция, которую необходимо удалить из списка прослушивателей для указанного свойства. Если этот параметр опущен, удаляются все прослушиватели для этого конкретного свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">Получает значение свойства по имени.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">Имя искомого свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">Значение свойства как наблюдаемый объект.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">Обновляет значение свойства и уведомляет все прослушиватели.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">Имя обновляемого свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">Новое значение свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">Добавляет к этому объекту свойство с уведомлением об изменении, включая определение свойства ECMAScript5.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">Имя добавляемого свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">Значение свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">Обещание, которое выполняется после завершения обработки уведомлений об изменении этого свойства. Если несколько уведомлений объединяются, обещание может быть отменено или значение обещания может быть обновлено. Выполненное значение обещания — это новое значение свойства, для которого были завершены уведомления.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">Удаляет значение свойства.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">Имя удаляемого свойства.</msg>
  <msg name="WinJS.Binding.bind">Выполняет привязку к одному или нескольким свойствам наблюдаемого объекта или дочерних значений этого объекта.</msg>
  <msg name="WinJS.Binding.bind_p:observable">Объект, к которому требуется выполнить привязку.</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">Литерал объекта, содержащий объявления привязки. Объявления привязки имеют следующий вид: { propertyName: (function | bindingDeclaration), ... } Например, привязка к вложенному члену объекта объявляется следующим образом: bind(someObject, { address: { street: function(v) { ... } } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">Объект, содержащий по крайней мере поле "cancel", являющееся функцией, которая удаляет все привязки, связанные с данным запросом привязки.</msg>
  <msg name="WinJS.Binding.expandProperties">Создает оболочку указанного объекта, чтобы все его свойства были инструментированы для привязки. Это предназначено для использования совместно со смешиванием привязки.</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">Спецификация для объекта, допускающего привязку.</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">Объект с набором свойств, все из которых привязаны для привязки.</msg>
  <msg name="WinJS.Binding.define">Создает новую функцию конструктора, которая поддерживает наблюдаемость с указанным набором свойств.</msg>
  <msg name="WinJS.Binding.define_p:data">Объект, используемый в качестве шаблона для определения набора свойств, например: var MyPointClass = define({x:0,y:0});</msg>
  <msg name="WinJS.Binding.define_returnValue">Функция конструктора с 1 необязательным аргументом, представляющим собой начальное состояние свойств.</msg>
  <msg name="WinJS.Binding.define.return">Создает новый наблюдаемый объект.</msg>
  <msg name="WinJS.Binding.define.return_p:init">Начальные значения свойств.</msg>
  <msg name="WinJS.Binding.as">Возвращает наблюдаемый объект. Это может быть наблюдаемый прокси-сервер для указанного объекта, существующий прокси-сервер или сам указанный объект, если он непосредственно поддерживает наблюдаемость.</msg>
  <msg name="WinJS.Binding.as_p:data">Объект, для которого требуется обеспечить наблюдаемость.</msg>
  <msg name="WinJS.Binding.as_returnValue">Контролируемый объект.</msg>
  <msg name="WinJS.Binding.unwrap">Возвращает исходный (ненаблюдаемый) объект, если указанный объект является наблюдаемым прокси-сервером.</msg>
  <msg name="WinJS.Binding.unwrap_p:data">Объект, для которого требуется получить исходное значение.</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">Если указанный объект является наблюдаемым прокси-сервером, возвращается исходный объект, в противном случае возвращается тот же самый объект.</msg>
  <msg name="WinJS.Binding.Template.render.value">Отрисовывает шаблон на основе универсального кода ресурса (URI).</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">Универсальный код ресурса (URI), из которого требуется загрузить шаблон.</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">Обещание, завершающееся после завершения привязки. Значением является либо объект, указанный в параметре контейнера, либо созданный DIV.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">Отрисовывает шаблон, который привязан к заданным данным и является дочерним к элементам, включенным в объект QueryCollection. Если объект QueryCollection содержит несколько элементов, то шаблон будет отрисован несколько раз, по одному разу в каждом элементе объекта QueryCollection на элемент передаваемых данных.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">Элемент DOM, к которому присоединяется элемент управления шаблона.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">Данные для отрисовки. Если данные являются массивом (или любым другим объектом, имеющим метод forEach), шаблон отрисовывается несколько раз, по одному разу для каждого элемента в коллекции.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">Если предоставлена, эта функция вызывается при каждой отрисовке шаблона; ей передается обещание, которое выполняется при завершении отрисовки шаблона.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">Объект QueryCollection.</msg>
  <msg name="WinJS.Binding.declarativeBind">Привязывает значения из указанного контекста данных к элементам, являющимся потомками указанного корневого элемента и имеющим атрибуты декларативной привязки (data-win-bind).</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">Элемент, с которого начинается обход для поиска элементов для привязки. Если этот параметр опущен, поиск производится во всем документе.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">Кэшированные данные привязки.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">Инициализатор привязки, который будет использоваться, если другой не указан в выражении привязки. Если не предоставлено, поведение совпадает с WinJS.Binding.defaultBind.</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">Обещание, которое выполняется, когда каждый элемент, содержащий объявления привязки, был обработан и началось обновление.</msg>
  <msg name="WinJS.Binding.converter">Создает инициализатор привязки по умолчанию для привязки между свойством источника и свойством назначения, используя предоставленную функцию преобразователя, которая выполняется на значении свойства источника.</msg>
  <msg name="WinJS.Binding.converter_p:convert">Преобразование, которое выполняется над результатом свойства источника для создания значения, которое задается для свойства назначения.</msg>
  <msg name="WinJS.Binding.converter_returnValue">Инициализатор привязки.</msg>
  <msg name="WinJS.Binding.setAttribute">Создает одностороннюю привязку между исходным объектом и атрибутом на конечном элементе.</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">Объект-источник.</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">Путь в объекте-источнике к свойству источника.</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">Конечный объект (должен являться элементом DOM).</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">Путь в конечном объекте к конечному свойству, должен представлять собой одно имя.</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">Известное начальное значение цели, если значение источника совпадает с данным начальным значением (с использованием ===) затем цель не устанавливается в первый раз.</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">Объект с методом отмены, используемый для слияния привязок.</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">Задает значение исходного свойства для атрибута в конечном элементе.</msg>
  <msg name="WinJS.Binding.addClassOneTime">Добавляет класс целевого элемента для значения в исходном свойстве</msg>
  <msg name="WinJS.Binding.defaultBind">Создает одностороннюю привязку между объектом-источником и целевым объектом.</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">Объект назначения.</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">Путь в объекте назначения к свойству назначения.</msg>
  <msg name="WinJS.Binding.oneTime">Задает для свойства назначения значение свойства источника.</msg>
  <msg name="WinJS.Binding.initializer">Помечает функцию пользовательского инициализатора как совместимую с декларативной привязкой данных.</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">Пользовательский инициализатор, который требуется пометить как совместимый с декларативной привязкой данных.</msg>
  <msg name="WinJS.Binding.initializer_returnValue">Входной customInitializer.</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">Значение, заданное указанным ключом, было заменено другим значением.</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">Новое значение было добавлено в список.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">Значение, заданное указанным ключом, перемещено в списке из позиции с одним индексом в позицию с другим индексом.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">Значение, указанное заданным ключом, было изменено.</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">Значение, указанное заданным ключом, было удалено из списка.</msg>
  <msg name="WinJS.Binding.ListBase.onreload">Список обновлен. Все ссылки на элементы в списке могут быть неверны.</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">Заставляет список отправить уведомление перезагрузки всем прослушивателям.</msg>
  <msg name="WinJS.Binding.ListBase.getAt">Возвращает значение по указанному индексу.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">Индекс получаемого значения.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">Значение по указанному индексу.</msg>
  <msg name="WinJS.Binding.ListBase.concat">Возвращает новый список, состоящий из объединения двух массивов.</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">Массив, содержащий объединение списка и всех других предоставленных элементов.</msg>
  <msg name="WinJS.Binding.ListBase.join">Возвращает строку, состоящую из всех элементов списка, разделенных указанной строкой-разделителем.</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">Строка, используемая в качестве разделителя элементов списка. Если этот параметр опущен, то элементы списка разделяются запятыми.</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">Элементы списка отделяются друг от друга заданной строкой-разделителем.</msg>
  <msg name="WinJS.Binding.ListBase.slice">Извлекает раздел списка и возвращает новый список.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">Индекс, определяющий начало раздела.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">Индекс, определяющий конец раздела.</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">Возвращает фрагмент массива.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">Получает индекс первого вхождения указанного значения в списке.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">Значение, которое требуется найти в списке.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">Индекс, с которого необходимо начать поиск. Если параметр fromIndex опущен, то поиск начинается с индекса 0.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">Индекс первого вхождения значения в списке или -1, если это значение не найдено.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">Получает индекс последнего вхождения указанного значения в списке.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">Индекс, с которого необходимо начать поиск. Если параметр fromIndex опущен, то поиск начинается с последнего индекса в списке.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">Индекс последнего вхождения значения в списке или -1, если это значение не найдено.</msg>
  <msg name="WinJS.Binding.ListBase.every">Проверяет, возвращает ли указанная функция обратного вызова значение true для всех элементов в списке.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">Функция, которая принимает до 3 аргументов. Эта функция вызывается для каждого элемента в списке до тех пор, пока она не вернет значение false или не будет достигнут конец списка.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">Объект, на который может ссылаться данное ключевое слово в функции обратного вызова. Если параметр thisArg опущен, используется значение undefined.</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">Значение true, если обратный вызов возвращает значение true для всех элементов в списке.</msg>
  <msg name="WinJS.Binding.ListBase.filter">Возвращает элементы списка, удовлетворяющие условию, указанному в функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">Функция, которая принимает до 3 аргументов. Эта функция вызывается для каждого элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">Массив, содержащий элементы, удовлетворяющие условию, указанному в функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.forEach">Вызывает заданную функцию обратного вызова для каждого элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.map">Вызывает заданную функцию обратного вызова для каждого элемента списка, и возвращает массив, содержащий результаты.</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">Массив, содержащий результат вызова функции обратного вызова для каждого элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.some">Проверяет, возвращает ли указанная функция обратного вызова значение true для какого-либо элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">Функция, которая принимает до 3 аргументов. Эта функция вызывается для каждого элемента в списке до тех пор, пока она не вернет значение true или не будет достигнут конец списка.</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">Значение true, если обратный вызов возвращает значение true для какого-либо элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.reduce">Собирает один результат путем вызова заданной функции обратного вызова для всех элементов в списке. Возвращаемое значение функции обратного вызова представляет собой накопленный результат и предоставляется как аргумент в следующем вызове функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">Функция, которая принимает до четырех аргументов. Эта функция вызывается для каждого элемента в списке.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">Если значение initialValue указано, то оно используется в качестве значения, с которого начинается накопление. При первом вызове функции в качестве аргумента вместо значения из списка передается это значение.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">Возвращаемое значение из последнего вызова функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">Накапливает один результат путем вызова заданной функции обратного вызова для всех элементов в списке, в нисходящем порядке. Возвращаемое значение функции обратного вызова представляет собой накопленный результат и предоставляется как аргумент в следующем вызове функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">Если значение initialValue указано, то оно используется в качестве значения, с которого начинается накопление. При первом вызове функции callbackfn в качестве аргумента вместо значения из списка передается это значение.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">Возвращаемое значение из последнего вызова функции обратного вызова.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">Создает отфильтрованную проекцию в реальном времени для этого списка. При изменении списка отфильтрованная проекция реагирует на эти изменения и также может измениться.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">Функция, которая принимает один аргумент. Функция createFiltered вызывает функцию обратного вызова для каждого элемента списка. Если функция возвращает значение true, то этот элемент будет включен в отфильтрованный список.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">Отфильтрованная проекция для списка.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">Создает группированную проекцию в реальном времени для этого списка. При изменении списка группированная проекция реагирует на эти изменения и также может измениться. Группированная проекция сортирует все элементы списка, чтобы они располагались непрерывно внутри групп. Группированная проекция также содержит свойство .groups, являющееся объектом WinJS.Binding.List, представляющим группы, найденные в списке.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">Функция, которая принимает один аргумент. Эта функция вызывается для каждого элемента в списке, она должна возвращать строку, представляющую группу, содержащую данный элемент.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">Функция, которая принимает один аргумент. Эта функция вызывается для каждого элемента в списке для каждой группы. Она должна возвращать значение, которое должно быть задано как данные элемента списка .groups для этой группы.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">Функция, которая принимает два аргумента. Функция вызывается с ключом групп, найденных в списке. Она должна возвращать одно из следующих числовых значений: отрицательное значение, если первый аргумент меньше второго, нулевое значение, если два аргумента эквивалентны, положительное значение, если первый аргумент больше второго. Если этот аргумент опущен, группы сортируются по возрастанию в порядке сортировки символов ASCII.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">Группированная проекция для списка.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">Создает сортированную проекцию в реальном времени для этого списка. При изменении списка сортированная проекция реагирует на эти изменения и также может измениться.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">Функция, которая принимает два аргумента. Эта функция вызывается для элементов в списке. Она должна возвращать одно из следующих числовых значений: отрицательное значение, если первый аргумент меньше второго, нулевое значение, если два аргумента эквивалентны, положительное значение, если первый аргумент больше второго.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">Сортированная проекция для списка.</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">Отключает эту проекцию WinJS.Binding.List от его базового объекта WinJS.Binding.List. Это важно только в том случае, если они имеют различное время существования.</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">Получает пару "ключ-данные" для указанного ключа.</msg>
  <msg name="WinJS.Binding.ListProjection.move">Перемещает значение по индексу в позицию newIndex.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">Возвращает целочисленное значение, которое на единицу превышает наибольший элемент, определенный в списке.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">Возвращает пару "ключ-данные" для указанного индекса.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">Индекс извлекаемого значения.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">Возвращает индекс первого вхождения ключа в списке.</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">Возвращает или задает длину списка. Возвращает целочисленное значение, которое на единицу превышает наибольший элемент, определенный в списке.</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">Возвращает индекс первого вхождения ключа.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">Получает объект WinJS.Binding.List, являющийся проекцией групп, идентифицированных в данном списке.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">Получает пару "ключ-данные" для указанного ключа элемента.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">Получает длину списка. Возвращает целочисленное значение, которое на единицу превышает наибольший элемент, определенный в списке.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">Получает пару "ключ-данные" для указанного индекса.</msg>
  <msg name="WinJS.Resources.processAll">Обрабатывает тег ресурсов и заменяет строки локализованными строками.</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">Элемент DOM, с которого необходимо начать обработку. processAll означает обработку элемента и его дочерних элементов. Если корневой элемент не указан, processAll соответствует обработке всего документа.</msg>
</messagebundle>