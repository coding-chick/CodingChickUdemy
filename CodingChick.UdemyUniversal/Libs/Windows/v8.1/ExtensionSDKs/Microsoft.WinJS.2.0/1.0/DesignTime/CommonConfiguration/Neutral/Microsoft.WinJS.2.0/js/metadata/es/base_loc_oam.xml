<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">Intenta cancelar el cumplimiento de un valor comprometido. Si el compromiso no se cumple y se admite la cancelación, el compromiso entra en el estado de error con un valor de Error("Canceled").</msg>
  <msg name="WinJS.PromiseStateMachine.done">Permite especificar el trabajo que se realizará cuando se cumpla el valor comprometido, el control de errores que se efectuará si el compromiso no se cumple para un valor, y el control de las notificaciones de progreso a lo largo del proceso. Después de que los controladores terminen de ejecutarse, esta función desencadena cualquier error que se hubiera devuelto desde then() como compromiso en el estado de error.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">La función a la que se llama si el compromiso se cumple correctamente con un valor. El valor con el que se cumple se pasa como único argumento. Si el valor es NULL, se devuelve el valor con el que se cumple. El valor devuelto por la función se convierte en el valor con el que se cumple el compromiso devuelto por then(). Si se produce una excepción mientras se ejecuta la función, el compromiso devuelto por then() pasa al estado de error.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">La función a la que se llama si el compromiso se cumple con un error. El error se pasa como único argumento. Si es NULL, se reenvía el error. El valor devuelto por la función es el valor con el que se cumple el compromiso devuelto por then().</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">La función a la que se llama si el compromiso informa sobre el progreso. Los datos sobre el progreso se pasan como único argumento. No es obligatorio que los compromisos informen sobre el progreso.</msg>
  <msg name="WinJS.PromiseStateMachine.then">Permite especificar el trabajo que se realizará cuando se cumpla el valor comprometido, el control de errores que se efectuará si el compromiso no se cumple para un valor, y el control de las notificaciones de progreso a lo largo del proceso.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">La función a la que se llama si el compromiso se cumple correctamente con un valor. El valor se pasa como único argumento. Si el valor es NULL, se devuelve el valor. El valor devuelto por la función se convierte en el valor con el que se cumple el compromiso devuelto por then(). Si se produce una excepción mientras se está ejecutando esta función, el compromiso devuelto por then() pasa al estado de error.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">La función a la que se llama si el compromiso se cumple con un error. El error se pasa como único argumento. Si es NULL, se reenvía el error. El valor devuelto por la función se convierte en el valor con el que se cumple el compromiso devuelto por then().</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">La función a la que se llama si el compromiso informa sobre el progreso. Los datos sobre el progreso se pasan como único argumento. No es obligatorio que los compromisos informen sobre el progreso.</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">El compromiso cuyo valor es el resultado de ejecutar la función de finalización o de error.</msg>
  <msg name="WinJS.Promise">El compromiso proporciona un mecanismo para programar trabajo para que se realice en función de un valor que todavía no se ha calculado. Es una abstracción adecuada para administrar interacciones con las API asincrónicas.</msg>
  <msg name="WinJS.Promise_p:init">La función a la que se llama durante la construcción del compromiso. La función recibe tres argumentos (complete, error, progress). En esta función debe agregar los agentes de escucha de eventos para las notificaciones admitidas por este valor.</msg>
  <msg name="WinJS.Promise_p:oncancel">La función a que se debe llamar si un consumidor de este compromiso desea cancelar el trabajo sin deshacer. No es obligatorio que los compromisos admitan la cancelación.</msg>
  <msg name="WinJS.Promise.addEventListener">Agrega un agente de escucha de eventos al control.</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">El tipo (nombre) del evento.</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">El agente de escucha que se invocará cuando se genere el evento.</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">Especifica si se debe iniciar la captura.</msg>
  <msg name="WinJS.Promise.any">Devuelve un compromiso que se cumple cuando una de los compromisos de entrada se ha cumplido.</msg>
  <msg name="WinJS.Promise.any_p:values">Matriz que contiene objetos de compromiso u objetos cuyos valores de propiedad incluyen objetos de compromiso.</msg>
  <msg name="WinJS.Promise.any_returnValue">Compromiso que, al cumplirse, produce el valor de la entrada (complete o error).</msg>
  <msg name="WinJS.Promise.as">Devuelve un compromiso. Si el objeto ya es un compromiso, se devuelve; en caso contrario, el objeto se incluye en un compromiso.</msg>
  <msg name="WinJS.Promise.as_p:value">El valor que se tratará como un compromiso.</msg>
  <msg name="WinJS.Promise.as_returnValue">Un compromiso.</msg>
  <msg name="WinJS.Promise.cancel">El valor de un compromiso cancelada; lo puede devolver un controlador de finalización del compromiso para indicar la cancelación de la cadena del compromiso.</msg>
  <msg name="WinJS.Promise.dispatchEvent">Genera un evento con el tipo y las propiedades especificados.</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">El conjunto de propiedades adicionales que se van a adjuntar al objeto de evento.</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">Especifica si se llamó a preventDefault cuando se produjo el evento.</msg>
  <msg name="WinJS.Promise.is">Determina si un valor cumple el contrato del compromiso.</msg>
  <msg name="WinJS.Promise.is_p:value">Valor que puede ser un compromiso.</msg>
  <msg name="WinJS.Promise.is_returnValue">true si el valor especificado es un compromiso; en caso contrario, false.</msg>
  <msg name="WinJS.Promise.join">Crea un compromiso se cumple cuando se cumplen todos los valores.</msg>
  <msg name="WinJS.Promise.join_p:values">Objeto cuyos campos contienen valores, algunos de los cuales pueden ser compromisos.</msg>
  <msg name="WinJS.Promise.join_returnValue">Compromiso cuyo valor es un objeto con los mismos nombres de campo que el objeto del parámetro de valores, donde el valor de cada campo es el valor cumplido de un compromiso.</msg>
  <msg name="WinJS.Promise.removeEventListener">Quita un agente de escucha de eventos del control.</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">Agente de escucha que se va a quitar.</msg>
  <msg name="WinJS.Promise.then">Versión estática del método de instancia de compromiso then().</msg>
  <msg name="WinJS.Promise.then_p:value">el valor que se tratará como un compromiso.</msg>
  <msg name="WinJS.Promise.then_p:complete">La función a la que se llama si el compromiso se cumple con un valor. Si es NULL, el compromiso simplemente devuelve el valor. El valor se pasa como único argumento.</msg>
  <msg name="WinJS.Promise.then_p:error">La función a la que se llama si el compromiso se cumple con un error. El error se pasa como único argumento.</msg>
  <msg name="WinJS.Promise.then_returnValue">Compromiso cuyo valor es el resultado de ejecutar la función de finalización proporcionada.</msg>
  <msg name="WinJS.Promise.thenEach">Realiza una operación en todos los compromisos de entrada y devuelve un compromiso que tiene la forma de la entrada y contiene el resultado de la operación que se ha realizado en cada entrada.</msg>
  <msg name="WinJS.Promise.thenEach_p:values">Conjunto de valores (que podría ser una matriz o un objeto) algunos de cuyos elementos (o todos) son compromisos.</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">La función a la que se llama si el compromiso se cumple con un valor. Si el valor es NULL, el compromiso devuelve el valor. El valor se pasa como único argumento.</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">Un compromiso que es el resultado de llamar al método Promise.join en el parámetro de valores.</msg>
  <msg name="WinJS.Promise.timeout">Crea un compromiso que se cumple después de un tiempo de espera.</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">Tiempo de espera en milisegundos. Si este valor es cero o no se especifica, se llama a setImmediate; en caso contrario, se llama a setTimeout.</msg>
  <msg name="WinJS.Promise.timeout_p:promise">Compromiso que se cancelará si no completa antes de que expire el tiempo de espera.</msg>
  <msg name="WinJS.Promise.timeout_returnValue">Compromiso que se completa de forma asincrónica cuando transcurre el tiempo de espera especificado.</msg>
  <msg name="WinJS.Promise.wrap">Incluye un valor que no es de un compromiso en un compromiso. Esta función se puede utilizar si se necesita pasar un valor a una función que requiere un compromiso.</msg>
  <msg name="WinJS.Promise.wrap_p:value">Valor que no es de un compromiso que se incluirá en un compromiso.</msg>
  <msg name="WinJS.Promise.wrap_returnValue">Compromiso que se cumple correctamente con el valor especificado</msg>
  <msg name="WinJS.Promise.wrapError">Incluye un valor de error que no es de un compromiso en un compromiso. Esta función se puede utilizar si se necesita pasar un valor de error a una función que requiere un compromiso.</msg>
  <msg name="WinJS.Promise.wrapError_p:error">Valor de error que no es de un compromiso que se incluirá en un compromiso.</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">Compromiso que está en un estado de error con el valor especificado.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">Obtiene un valor que indica si el trabajo se completó. Este valor es true si el trabajo se ejecutó hasta finalizarse y false si aún no se ejecutó o si se canceló.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">Obtiene el identificador único para este trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">Obtiene o establece una cadena que especifica el nombre de diagnóstico para este trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">Obtiene un token de propietario del trabajo. Puede usar el método cancelAll del token de propietario para cancelar trabajos relacionados.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">Obtiene o establece la prioridad con la que el programador ejecuta este trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">Cancela el trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">Pone el trabajo en pausa.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">Reanuda el trabajo si se puso en pausa.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">Instancia del trabajo para el que se ejecuta el trabajo actualmente.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">Valor booleano que será true cuando el programador solicite al elemento de trabajo que ceda de forma cooperativa.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">Se llama cuando el elemento de trabajo está bloqueado en trabajo asincrónico. El programador espera que se complete el compromiso especificado antes de volver a programar el trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">Valor de compromiso que, al completarse, proporciona una función de elemento de trabajo que se reprogramará.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">Se llama cuando el elemento de trabajo cede de forma cooperativa al programador y tiene más trabajo para completar en el futuro. Use este método para programar trabajo adicional cuando el elemento de trabajo está a punto ceder.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">Función de trabajo que se volverá a programar.</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">Cancela todos los trabajos asociados a este token de propietario.</msg>
  <msg name="WinJS.ErrorFromName">Crea un objeto Error con las propiedades del nombre y del mensaje especificadas.</msg>
  <msg name="WinJS.ErrorFromName_p:name">El nombre de este error. El nombre está diseñado para utilizarlo mediante programación y no se debe localizar.</msg>
  <msg name="WinJS.ErrorFromName_p:message">El mensaje de este error. El mensaje está diseñado para que lo utilicen las personas y se debe localizar.</msg>
  <msg name="WinJS.ErrorFromName_returnValue">Instancia de error cuyas propiedades .name y .message se han rellenado</msg>
  <msg name="WinJS.Utilities.QueryCollection">Representa el resultado de un selector de consulta, y proporciona varias operaciones que realizan acciones con los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">Los elementos resultantes de la consulta.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">Realiza una acción en cada elemento del objeto QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">Acción que se debe realizar en cada elemento.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">Argumento que se debe enlazar a callbackFn</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">Devuelve el objeto QueryCollection</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">Obtiene un elemento del objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">Índice del elemento que se devolverá.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">Un solo elemento de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">Establece un valor de atributo en todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">Nombre del atributo que se va a establecer.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">El valor del atributo que se va a establecer.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">Este objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">Obtiene un valor de atributo del primer elemento de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">Nombre del atributo.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">Valor del atributo.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">Agrega la clase especificada a todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">El nombre de la clase que se debe agregar.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">Determina si la clase especificada existe en el primer elemento de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">Nombre de la clase.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">true si el elemento tiene la clase especificada; en caso contrario, false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">Quita la clase especificada de todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">El nombre de la clase que se va a quitar.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">Alterna (agrega o quita) la clase especificada de todos los elementos de la colección. Si la clase está presente, se quita; si no está presente, se agrega.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">El nombre de la clase que se va a alternar.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">Registra el agente de escucha para el evento especificado en todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">Nombre del evento.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">La función de controlador de eventos a la que se llamará cuando se produzca el evento.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">true si debe pasarse capture == true a addEventListener; en caso contrario, false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">Anula el registro del agente de escucha para el evento especificado en todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">La función de controlador de eventos.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">true si capture == true; en caso contrario, false.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">Establece la propiedad de estilo especificada para todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">Nombre de la propiedad de estilo.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">Valor de la propiedad.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">Borra la propiedad de estilo especificada de todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">El nombre de la propiedad de estilo que se va a borrar.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">Ejecuta un selector de consulta en todos los elementos de la colección y agrega el resultado en un objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">La cadena de selector de consulta.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">Objeto QueryCollection que contiene los resultados agregados procedentes de ejecutar la consulta en todos los elementos de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">Agrega un conjunto de elementos a este objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">Los elementos que se van a agregar al objeto QueryCollection. Puede ser un objeto de matriz, un fragmento de documento o un solo elemento.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">Crea los controles que se adjuntan a los elementos de este objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">Función constructora que se utiliza para crear controles para adjuntarlos a los elementos.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">Las opciones que se pasan a los controles recién creados.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">Configura los controles que se adjuntan a los elementos de este objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">Las opciones que se pasan a los controles.</msg>
  <msg name="WinJS.UI.HtmlControl">Permite incluir una página HTML dinámicamente.</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">Inicializa una nueva instancia de HtmlControl para definir un nuevo control de página.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">El elemento que hospeda el objeto HtmlControl.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">Las opciones para configurar la página. La opción uri es necesaria para especificar el documento de origen para el contenido de la página.</msg>
  <msg name="WinJS.UI.TabContainer.constructor">Construye el objeto TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">El elemento DOM que se va a asociar al objeto TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">El conjunto de opciones que se aplicarán inicialmente al objeto TabContainer.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">Objeto TabContainer construido.</msg>
  <msg name="WinJS.UI.TabContainer.dispose">Desecha el contenedor de pestaña.</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">Obtiene o establece el elemento secundario que tiene el foco.</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">Obtiene o establece el orden de tabulación del control en su contenedor.</msg>
  <msg name="WinJS.Application.IOHelper.exists">Determina si el archivo especificado existe en el contenedor</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">El archivo que puede existir dentro de esta carpeta</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">Objeto Promise con un valor true (el archivo existe) o false.</msg>
  <msg name="WinJS.Application.IOHelper.remove">Elimina un archivo del contenedor</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">El archivo que se va a eliminar.</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">Objeto Promise que se cumple al eliminar el archivo</msg>
  <msg name="WinJS.Application.IOHelper.writeText">Escribe un archivo en el contenedor con el texto especificado</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">El archivo en el que se va a escribir</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">Contenido que se va a escribir en el archivo</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">Objeto Promise con el número de caracteres escritos</msg>
  <msg name="WinJS.Application.IOHelper.readText">Lee el contenido de un archivo del contenedor; si el archivo no existe, se devuelve def.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">El archivo del que se va a leer</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">Valor predeterminado que se devolverá si no se puede abrir el archivo</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">Objeto Promise que incluye el contenido del archivo, o def.</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">El nombre de archivo que puede existir dentro de esta carpeta</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">Elimina un archivo del contenedor</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">El nombre del archivo en el que se va a escribir</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">El nombre del archivo desde el que se va a leer.</msg>
  <msg name="WinJS.Binding.observableMixin.bind">Vincula la acción especificada a la propiedad especificada en el parámetro de nombre. Se invoca esta función cuando es posible que haya cambiado el valor de la propiedad. No se garantiza que únicamente se llame a la acción cuando un valor haya cambiado realmente, ni tampoco que la acción se invoque para cada cambio de valor. La implementación de esta función combina notificaciones de cambios, de forma que varias actualizaciones de un valor de propiedad pueden producir una única llamada a la acción especificada.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">El nombre de la propiedad a la que se va a enlazar la acción.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">La función que se va a invocar de forma asincrónica cuando es posible que haya cambiado la propiedad.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">Se devuelve este objeto.</msg>
  <msg name="WinJS.Binding.Template.constructor">Crear una plantilla que proporciona un elemento de enlace declarativo reutilizable.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">El elemento DOM que se va a convertir en una plantilla.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">Si se proporciona este parámetro, la plantilla se carga desde la URI y se omite el contenido del parámetro de elemento.</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">Si se especifica, esta función se usa como inicializador predeterminado de enlaces de datos que no especifican ninguno. La función proporcionada debe marcarse como compatible para el procesamiento.</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">Indica si una plantilla debe interrumpir el depurador en la primera presentación.</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">Establezca esta propiedad en True para restablecer el procesamiento de plantillas clásico, el enlace de datos y para deshabilitar la compilación de la plantilla.</msg>
  <msg name="WinJS.Binding.Template.element">Obtiene el elemento DOM que se utiliza como plantilla.</msg>
  <msg name="WinJS.Binding.Template.extractChild">Devuelve el primer elemento secundario del elemento de la plantilla en lugar del elemento contenedor que hospeda todo el contenido de la plantilla.</msg>
  <msg name="WinJS.Binding.Template.processTimeout">Número de milisegundos de retraso cuando se crean instancias de controles declarativos. Cero (0) significa ausencia de retraso, un número negativo significa un retraso de setImmediate, cualquier número positivo se interpretará como el número de milisegundos.</msg>
  <msg name="WinJS.Binding.Template.render">Enlaza valores del contexto de datos especificado a elementos que son descendientes del elemento raíz especificado y tienen atributos de enlace declarativos (data-win-bind).</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">El objeto que va a utilizar para el enlace de datos predeterminado.</msg>
  <msg name="WinJS.Binding.Template.render_p:container">El elemento al que se va a agregar esta plantilla representada. Si se omite este parámetro, se crea un nuevo objeto DIV.</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">Compromiso que se cumple una vez finalizado el enlace. El valor es el elemento especificado en el parámetro de contenedor o el objeto DIV creado.</msg>
  <msg name="WinJS.Binding.Template.renderItem">Representa una instancia de esta plantilla enlazada a los datos contenidos en el elemento. Si el parámetro reciclado está presente, y enableRecycling es true, la plantilla intenta reutilizar los elementos DOM del parámetro reciclado.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">El objeto que contiene los datos que se van a enlazar. Solo se requiere item.data.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">Instancia de plantilla generada previamente.</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">Elemento DOM.</msg>
  <msg name="WinJS.Binding.Template">Proporciona un elemento de enlace declarativo reutilizable.</msg>
  <msg name="WinJS.Binding.Template_name">Plantilla</msg>
  <msg name="WinJS.Binding.List.constructor">Crea un objeto WinJS.Binding.List.</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">La matriz que contiene los elementos para inicializar la lista.</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">Si options.binding es true, la lista contendrá el resultado de llamar a WinJS.Binding.as() en los valores de elemento. Si options.proxy es true, la lista especificada como el primer parámetro se utiliza como almacenamiento para el objeto WinJS.Binding.List. Esta opción se debe utilizar con precaución, ya que las modificaciones no coordinadas que se realicen en el almacén de datos producirán errores.</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">La instancia de WinJS.Binding.List que se acaba de construir.</msg>
  <msg name="WinJS.Binding.List.length">Obtiene o establece la longitud de la lista, que es un valor entero que supera en uno al elemento mayor definido en la lista.</msg>
  <msg name="WinJS.Binding.List.getItem">Obtiene un par clave/datos para el índice de la lista especificado.</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">El índice del valor que se va a recuperar.</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">Objeto con propiedades .key y .data.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">Obtiene un par clave/datos para la clave del elemento de lista especificada.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">Clave del valor que se va a recuperar.</msg>
  <msg name="WinJS.Binding.List.indexOfKey">Obtiene el índice de la primera aparición de una clave en una lista.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">La clave que se buscará en la lista.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">El índice de la primera aparición de una clave en una lista, o -1 si no se encuentra.</msg>
  <msg name="WinJS.Binding.List.move">Mueve el valor en el índice a la posición especificada.</msg>
  <msg name="WinJS.Binding.List.move_p:index">El índice original del valor.</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">El índice del valor después del traslado.</msg>
  <msg name="WinJS.Binding.List.notifyMutated">Hace que la lista envíe una notificación itemmutated a los agentes de escucha para el valor situado en el índice especificado.</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">El índice del valor que se transformó.</msg>
  <msg name="WinJS.Binding.List.setAt">Reemplaza el valor situado en el índice especificado con un nuevo valor.</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">El índice del valor que se reemplazó.</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">Valor nuevo.</msg>
  <msg name="WinJS.Binding.List.reverse">Devuelve una lista con los elementos invertidos. Este método invierte los elementos de un objeto de lista en el contexto. No se crea un nuevo objeto de lista durante la ejecución.</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">Lista invertida.</msg>
  <msg name="WinJS.Binding.List.sort">Devuelve una lista con los elementos ordenados. Este método ordena los elementos de un objeto de lista en el contexto. No se crea un nuevo objeto de lista durante la ejecución.</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">La función utilizada para determinar el orden de los elementos. Si se omite, los elementos se ordenan de forma ascendente, siguiendo el orden del juego de caracteres ASCII.</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">Lista ordenada.</msg>
  <msg name="WinJS.Binding.List.pop">Quita el último elemento de una lista y lo devuelve.</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">El último elemento de la lista.</msg>
  <msg name="WinJS.Binding.List.push">Anexa nuevos elementos a una lista y devuelve la nueva longitud de esta.</msg>
  <msg name="WinJS.Binding.List.push_p:value">El elemento que se va a insertar al final de la lista.</msg>
  <msg name="WinJS.Binding.List.push_returnValue">La nueva longitud de la lista.</msg>
  <msg name="WinJS.Binding.List.shift">Quita el primer elemento de una lista y lo devuelve.</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">El primer elemento de la lista.</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">El elemento que se va a insertar al principio de la lista.</msg>
  <msg name="WinJS.Binding.List.splice">Quita elementos de una lista y, si fuera necesario, inserta nuevos elementos en su lugar si procede y devuelve los elementos eliminados.</msg>
  <msg name="WinJS.Binding.List.splice_p:start">La posición a partir de cero en la lista de la que se va a comenzar a quitar elementos.</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">Número de elementos que se va a quitar.</msg>
  <msg name="WinJS.Binding.List.splice_p:item">Los elementos que se van a insertar en la lista sustituyendo a los eliminados.</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">Los elementos eliminados.</msg>
  <msg name="WinJS.Namespace.defineWithParent">Define un nuevo espacio de nombres con el nombre especificado dentro del espacio de nombres primario especificado.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">El espacio de nombres primario.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">Nombre del nuevo espacio de nombres.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">Los miembros del nuevo espacio de nombres.</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">El espacio de nombres que se acaba de definir.</msg>
  <msg name="WinJS.Namespace.define">Define un nuevo espacio de nombres con el nombre especificado.</msg>
  <msg name="WinJS.Namespace.define_p:name">Nombre del espacio de nombres. Podría ser un nombre separado por puntos para los espacios de nombres anidados.</msg>
  <msg name="WinJS.Class.define">Define una clase utilizando el constructor y los miembros de instancia especificados.</msg>
  <msg name="WinJS.Class.define_p:constructor">Función constructora que se utiliza para crear instancias de esta clase.</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">El conjunto de campos, propiedades y métodos de instancia que han pasado a estar disponibles en la clase.</msg>
  <msg name="WinJS.Class.define_p:staticMembers">El conjunto de campos, propiedades y métodos estáticos que han pasado a estar disponibles en la clase.</msg>
  <msg name="WinJS.Class.define_returnValue">La clase que se acaba de definir.</msg>
  <msg name="WinJS.Class.derive">Crea una subclase basándose en el parámetro baseClass proporcionado y utilizando la herencia del prototipo.</msg>
  <msg name="WinJS.Class.derive_p:baseClass">La clase de la que se va a heredar.</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">El conjunto de campos, propiedades y métodos de instancia que pasarán a estar disponibles en la clase.</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">El conjunto de campos, propiedades y métodos estáticos que pasarán a estar disponibles en la clase.</msg>
  <msg name="WinJS.Class.mix">Define una clase utilizando el constructor especificado y la unión del conjunto de miembros de instancia especificados por todos los objetos mixin. La lista de parámetros mixin es de longitud variable.</msg>
  <msg name="WinJS.Utilities.hasWinRT">Determina si WinRT está disponible en este contexto de script.</msg>
  <msg name="WinJS.Utilities.getMember">Obtiene el tipo o el espacio de nombres en el nivel de hoja especificado por el parámetro name.</msg>
  <msg name="WinJS.Utilities.getMember_p:name">Nombre del miembro.</msg>
  <msg name="WinJS.Utilities.getMember_p:root">La raíz desde la que se comienza. El valor predeterminado es el objeto global.</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">El tipo o el espacio de nombres en el nivel de hoja del espacio de nombres primario especificado.</msg>
  <msg name="WinJS.Utilities.ready">Garantiza que la función especificada se ejecute únicamente después de que se haya desencadenado el evento DOMContentLoaded para la página actual.</msg>
  <msg name="WinJS.Utilities.ready_returnValue">Compromiso que se cumple después de que se haya producido DOMContentLoaded.</msg>
  <msg name="WinJS.Utilities.ready_p:callback">Función que se ejecuta después de que se haya producido DOMContentLoaded.</msg>
  <msg name="WinJS.Utilities.ready_p:async">Si es True, la devolución de llamada se ejecutará de forma asincrónica.</msg>
  <msg name="WinJS.Utilities.strictProcessing">Determina si el procesamiento declarativo estricto se habilita en este contexto de script.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">Marca una función como compatible con el procesamiento declarativo, como WinJS.UI.processAll o WinJS.Binding.processAll.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">La función que se va a marcar como compatible con el procesamiento declarativo.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">Función de entrada.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">Declara que el valor es compatible con el procesamiento declarativo, como WinJS.UI.processAll o WinJS.Binding.processAll. Si no es compatible, se iniciará una excepción.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">El valor cuya compatibilidad con el procesamiento declarativo se va a probar. Si el valor es una función, debe marcarse con una propiedad 'supportedForProcessing' que tenga el valor true.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">Valor de entrada.</msg>
  <msg name="WinJS.strictProcessing">Siempre se fuerza el procesamiento estricto; este método no tiene ningún efecto.</msg>
  <msg name="WinJS.Utilities.formatLog">Agrega etiquetas y el tipo a un mensaje de registro.</msg>
  <msg name="WinJS.Utilities.startLog_p:message">Mensaje al que se va a dar formato.</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">Etiquetas que se van a aplicar al mensaje. Separe las distintas etiquetas con espacios.</msg>
  <msg name="WinJS.Utilities.startLog_p:type">El tipo de mensaje.</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">El mensaje con formato.</msg>
  <msg name="WinJS.Utilities.startLog">Configura un registrador que escribe mensajes que contienen las etiquetas especificadas desde WinJS.log en console.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options">Las etiquetas de los mensajes que se van a registrar. Separe las distintas etiquetas con espacios.</msg>
  <msg name="WinJS.Utilities.startLog2">Configura un registrador para escribir el resultado de WinJS.log.</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">Puede contener las propiedades .type, .tags, .excludeTags y .action. - .type es etiqueta requerida. - .excludeTags es una lista de etiquetas separadas mediante espacios, cada una de las cuales impedirá que se registre un mensaje. - .tags es una lista de etiquetas separadas mediante espacios, cada una de las cuales hará que se registre un mensaje. - .action es una función a la que, si está presente, se llamará con el mensaje, las etiquetas y el tipo de registro. El valor predeterminado es realizar el registro en la consola.</msg>
  <msg name="WinJS.Utilities.stopLog">Quita el registrador previamente configurado.</msg>
  <msg name="WinJS.Utilities.createEventProperties">Crea un objeto que tiene una propiedad para cada nombre pasado a la función.</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">Lista de variables de nombres de propiedad.</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">El objeto con las propiedades especificadas. Los nombres de las propiedades llevan el prefijo 'on'.</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">Si es true, se inicia la captura; en caso contrario, false.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">Genera un evento del tipo especificado y con las propiedades adicionales especificadas.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">El conjunto de propiedades adicionales que se adjuntarán al objeto de evento cuando se genere el evento.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">true si se llamó a preventDefault cuando se produjo el evento.</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">Especifica si se debe iniciar la captura.</msg>
  <msg name="WinJS.Resources.addEventListener">Registra un controlador de eventos para el evento especificado.</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">Nombre del evento que se va a controlar.</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">El agente de escucha que se invocará cuando se genere el evento.</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">Establézcalo en true si desea registrar el controlador de eventos para la fase de captura; establézcalo en false si desea registrarlo para la fase de propagación.</msg>
  <msg name="WinJS.Resources.getString">Recupera la cadena de recursos que tiene el identificador de recurso especificado.</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">El identificador de recurso de la cadena que se va a recuperar.</msg>
  <msg name="WinJS.Resources.getString_returnValue">Objeto que puede contener estas propiedades: value: el valor de la cadena solicitada. Esta propiedad siempre está presente. empty: valor que especifica si la cadena solicitada no se encontró. Si es true, la cadena no se encontró. Si es false o está sin definir, la cadena solicitada se encontró. lang: el idioma de la cadena, si se especifica. Esta propiedad solo está presente en recursos multilingües.</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">Devuelve una representación de cadena del estado de programador para fines de diagnóstico. Los trabajos y solicitudes de purga se muestran en el orden en que se espera que se procesen actualmente. La solicitud actual de trabajo y de purga está marcada con un asterisco.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">Ejecuta trabajos en el programador sin tiempo asignado hasta que se hayan ejecutado todos los trabajos con la prioridad especificada o superior.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">Prioridad a la que el programador debe purgarse. El valor predeterminado es Priority.min, que purga todos los trabajos en cola.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">Descripción opcional de la solicitud de purga para el diagnóstico.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">Compromiso que se completa una vez finalizada la purga. La cancelación de este compromiso cancela la solicitud de purga. Este compromiso nunca entrará en estado de error.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">Ejecuta la devolución de llamada especificado en un contexto de alta prioridad.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">Devolución de llamada que se ejecutará en un contexto de elevada prioridad.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">El valor devuelto de devolución de llamada.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">Crea y devuelve un nuevo símbolo de propietario que se puede establecer en la propiedad de propietario de uno o varios trabajos. A continuación, puede usarse para cancelar todos los trabajos que "posee".</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">Nuevo token de propietario. Puede usar este token para controlar los trabajos que posee.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">Programa la función especificada para que se ejecute de forma asincrónica.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">Función que representa el elemento de trabajo que se va a programar. Cuando se llama esta función, el elemento de trabajo recibirá como primer argumento un objeto JobInfo que permite que el elemento de trabajo pregunte al programador si debe ceder de forma cooperativa y, en caso de hacerlo, proporciona una función que se ejecutará como continuación o un elemento WinJS.Promise que, una vez completado, proporcionará una función que se ejecutará como continuación.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">Prioridad con la que se debe programar el elemento de trabajo. El valor predeterminado es Priority.normal.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">Instancia “this” que se enlazará al elemento de trabajo. El valor predeterminado es null.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">Descripción del elemento de trabajo para el diagnóstico. El valor predeterminado es una cadena vacía.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">La instancia de trabajo que representa este elemento de trabajo.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">Programa un trabajo para completar un compromiso devuelto. Existen cuatro versiones de este método para las distintas prioridades que suelen usarse: schedulePromiseHigh, schedulePromiseAboveNormal, schedulePromiseNormal, schedulePromiseBelowNormal y schedulePromiseIdle. El uso de ejemplo que muestra cómo garantizar que el último vínculo de una cadena del compromiso se ejecute en el programador con prioridad elevada: asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">Valor con el que se completará el compromiso devuelto.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">Cadena que describe el trabajo con fines de diagnóstico.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">Compromiso que se completa en un trabajo de la prioridad deseada.</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">Obtiene la prioridad actual con la que se está ejecutando el llamador.</msg>
  <msg name="WinJS.xhr">Incluye las llamadas a XMLHttpRequest en un compromiso.</msg>
  <msg name="WinJS.xhr_p:options">Las opciones que se aplican al objeto XMLHttpRequest. Son: type, url, user, password, headers, responseType, data, and customRequestInitializer.</msg>
  <msg name="WinJS.xhr_returnValue">Compromiso que devuelve el objeto XMLHttpRequest cuando finaliza.</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">Establece la propiedad innerHTML del elemento especificado en el texto especificado.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">El elemento cuya propiedad innerHTML se va a establecer.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">El valor en el que se va a establecer la propiedad innerHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTML">Establece la propiedad outerHTML del elemento especificado en el texto especificado.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">El elemento cuya propiedad outerHTML se va a establecer.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">El valor en el que se va a establecer la propiedad outerHTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">Llama al método insertAdjacentHTML en el elemento especificado.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">El elemento en el que se va a llamar al método insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">La posición, en relación con el elemento, en la que se va a insertar el código HTML.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">El valor que se va a proporcionar a insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">Establece la propiedad outerHTML de elemento especificado en el texto especificado en el contexto de msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">Llama al método insertAdjacentHTML en el elemento especificado en el contexto de msWWA.execUnsafeLocalFunction.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">El valor que se va a proporcionar para insertAdjacentHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">Establece la propiedad innerHTML de un elemento en el texto especificado si pasa una comprobación msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">Establece la propiedad outerHTML de un elemento en el texto especificado si pasa una comprobación msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">Llama al método insertAdjacentHTML en el elemento si pasa una comprobación msIsStaticHTML.</msg>
  <msg name="WinJS.Utilities.markDisposable">Agrega la implementación de eliminación al elemento especificado y lo marca como desechable.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">Elemento que se va a marcar como desechable.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">Función que contiene la lógica de Dispose específica del elemento a la que llamará la función Dispose.</msg>
  <msg name="WinJS.Utilities.disposeSubTree">Desecha todos los elementos desechables de primera generación descendientes del elemento especificado. El elemento especificado en sí no se desecha.</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">Elemento raíz cuyo árbol secundario se va a desechar.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">Agrega el conjunto de opciones especificadas mediante declaración (propiedades y eventos) al control especificado. Si el nombre de la propiedad de las opciones comienza por "on", el valor de propiedad es una función y el control admite addEventListener. El método setOptions llama al método addEventListener en el control.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">El control en el que van a aplicar las propiedades y los eventos.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">El conjunto de opciones que se especifican mediante declaración.</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">true para iniciar la captura; en caso contrario, false.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">Genera un evento del tipo especificado y agrega las propiedades adicionales especificadas.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">true si se llamó a preventDefault cuando se produjo el evento; en caso contrario, false.</msg>
  <msg name="WinJS.UI.select.createSelect">Recorre el árbol DOM desde el elemento especificado hasta la raíz del documento; cada vez que se encuentra un ámbito de selector, select busca dentro de ese ámbito la cadena de selector especificada. Se devuelve el primer elemento coincidente.</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">La cadena de selector.</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">El elemento de destino, si se encuentra.</msg>
  <msg name="WinJS.UI.processAll">Aplica el enlace de control declarativo a todos los elementos, empezando por el elemento raíz especificado.</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">El elemento en el que se va a empezar a aplicar el enlace. Si no se especifica este parámetro, el enlace se aplica a todo el documento.</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">Si es true, los elementos a que se van a enlazar omiten el elemento raíz especificado e incluyen solo los elementos secundarios.</msg>
  <msg name="WinJS.UI.processAll_returnValue">Compromiso que se cumple cuando se ha aplicado el enlace a todos los controles.</msg>
  <msg name="WinJS.UI.process">Aplica el enlace de control declarativo al elemento especificado.</msg>
  <msg name="WinJS.UI.process_p:element">Elemento que se va a enlazar.</msg>
  <msg name="WinJS.UI.process_returnValue">Compromiso que se cumple después de que se activa el control. El valor del compromiso es el control que se adjunta al elemento.</msg>
  <msg name="WinJS.Utilities.query">Ejecuta un selector de consulta en el elemento especificado o en todo el documento.</msg>
  <msg name="WinJS.Utilities.query_p:query">El selector de consulta que se va a ejecutar.</msg>
  <msg name="WinJS.Utilities.query_p:element">El elemento en el que se va a ejecutar la consulta. Si este parámetro no se especifica, la consulta se ejecuta en todo el documento.</msg>
  <msg name="WinJS.Utilities.query_returnValue">El objeto QueryCollection que contiene los resultados de la operación de consulta.</msg>
  <msg name="WinJS.Utilities.id">Busca un elemento por su identificador y ajusta el resultado en un objeto QueryCollection.</msg>
  <msg name="WinJS.Utilities.id_p:id">Identificador del elemento.</msg>
  <msg name="WinJS.Utilities.id_returnValue">Objeto QueryCollection que contiene el elemento, si se encuentra.</msg>
  <msg name="WinJS.Utilities.children">Crea un objeto QueryCollection que contiene los elementos secundarios del elemento primario especificado.</msg>
  <msg name="WinJS.Utilities.children_p:element">Elemento primario.</msg>
  <msg name="WinJS.Utilities.children_returnValue">El objeto QueryCollection que contiene los elementos secundarios del elemento.</msg>
  <msg name="WinJS.Utilities.Key">Define un conjunto de valores de teclado.</msg>
  <msg name="WinJS.Utilities.Key.backspace">Tecla RETROCESO.</msg>
  <msg name="WinJS.Utilities.Key.tab">Tecla TAB.</msg>
  <msg name="WinJS.Utilities.Key.enter">Tecla ENTRAR.</msg>
  <msg name="WinJS.Utilities.Key.shift">Tecla Mayús.</msg>
  <msg name="WinJS.Utilities.Key.ctrl">Tecla CTRL.</msg>
  <msg name="WinJS.Utilities.Key.alt">Tecla ALT</msg>
  <msg name="WinJS.Utilities.Key.pause">Tecla Pausa.</msg>
  <msg name="WinJS.Utilities.Key.capsLock">Tecla Bloq Mayús.</msg>
  <msg name="WinJS.Utilities.Key.escape">Tecla ESCAPE.</msg>
  <msg name="WinJS.Utilities.Key.space">Tecla ESPACIO.</msg>
  <msg name="WinJS.Utilities.Key.pageUp">Tecla Retroceder Página.</msg>
  <msg name="WinJS.Utilities.Key.pageDown">Tecla Avanzar Página.</msg>
  <msg name="WinJS.Utilities.Key.end">Tecla FIN.</msg>
  <msg name="WinJS.Utilities.Key.home">Tecla Inicio.</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">Tecla de dirección izquierda.</msg>
  <msg name="WinJS.Utilities.Key.upArrow">Tecla de dirección arriba.</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">Tecla de dirección derecha.</msg>
  <msg name="WinJS.Utilities.Key.downArrow">Tecla de dirección abajo.</msg>
  <msg name="WinJS.Utilities.Key.insert">Tecla INSERTAR.</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">Tecla SUPRIMIR.</msg>
  <msg name="WinJS.Utilities.Key.num0">Tecla del número 0.</msg>
  <msg name="WinJS.Utilities.Key.num1">Tecla del número 1.</msg>
  <msg name="WinJS.Utilities.Key.num2">Tecla del número 2.</msg>
  <msg name="WinJS.Utilities.Key.num3">Tecla del número 3.</msg>
  <msg name="WinJS.Utilities.Key.num4">Tecla del número 4.</msg>
  <msg name="WinJS.Utilities.Key.num5">Tecla del número 5.</msg>
  <msg name="WinJS.Utilities.Key.num6">Tecla del número 6.</msg>
  <msg name="WinJS.Utilities.Key.num7">Tecla del número 7.</msg>
  <msg name="WinJS.Utilities.Key.num8">Tecla del número 8.</msg>
  <msg name="WinJS.Utilities.Key.num9">Tecla del número 9.</msg>
  <msg name="WinJS.Utilities.Key.a">Tecla A.</msg>
  <msg name="WinJS.Utilities.Key.b">Tecla B.</msg>
  <msg name="WinJS.Utilities.Key.c">Tecla C.</msg>
  <msg name="WinJS.Utilities.Key.d">Tecla D.</msg>
  <msg name="WinJS.Utilities.Key.e">Tecla E.</msg>
  <msg name="WinJS.Utilities.Key.f">Tecla F.</msg>
  <msg name="WinJS.Utilities.Key.g">Tecla G.</msg>
  <msg name="WinJS.Utilities.Key.h">Tecla H.</msg>
  <msg name="WinJS.Utilities.Key.i">Tecla I.</msg>
  <msg name="WinJS.Utilities.Key.j">Tecla J.</msg>
  <msg name="WinJS.Utilities.Key.k">Tecla K.</msg>
  <msg name="WinJS.Utilities.Key.l">Tecla L.</msg>
  <msg name="WinJS.Utilities.Key.m">Tecla M.</msg>
  <msg name="WinJS.Utilities.Key.n">Tecla N.</msg>
  <msg name="WinJS.Utilities.Key.o">Tecla O.</msg>
  <msg name="WinJS.Utilities.Key.p">Tecla P.</msg>
  <msg name="WinJS.Utilities.Key.q">Tecla Q.</msg>
  <msg name="WinJS.Utilities.Key.r">Tecla R.</msg>
  <msg name="WinJS.Utilities.Key.s">Tecla S.</msg>
  <msg name="WinJS.Utilities.Key.t">Tecla T.</msg>
  <msg name="WinJS.Utilities.Key.u">Tecla U.</msg>
  <msg name="WinJS.Utilities.Key.v">Tecla V.</msg>
  <msg name="WinJS.Utilities.Key.w">Tecla W.</msg>
  <msg name="WinJS.Utilities.Key.x">Tecla X.</msg>
  <msg name="WinJS.Utilities.Key.y">Tecla Y.</msg>
  <msg name="WinJS.Utilities.Key.z">Tecla Z.</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">Tecla Windows izquierda.</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">Tecla Windows derecha.</msg>
  <msg name="WinJS.Utilities.Key.menu">Tecla de menú.</msg>
  <msg name="WinJS.Utilities.Key.numPad0">Tecla 0 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad1">Tecla 1 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad2">Tecla 2 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad3">Tecla 3 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad4">Tecla 4 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad5">Tecla 5 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad6">Tecla 6 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad7">Tecla 7 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad8">Tecla 8 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.numPad9">Tecla 9 del teclado numérico.</msg>
  <msg name="WinJS.Utilities.Key.multiply">Tecla de multiplicación.</msg>
  <msg name="WinJS.Utilities.Key.add">Tecla de adición.</msg>
  <msg name="WinJS.Utilities.Key.subtract">Tecla de sustracción.</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">Tecla de separador decimal.</msg>
  <msg name="WinJS.Utilities.Key.divide">Tecla de división.</msg>
  <msg name="WinJS.Utilities.Key.F1">Tecla F1.</msg>
  <msg name="WinJS.Utilities.Key.F2">Tecla F2.</msg>
  <msg name="WinJS.Utilities.Key.F3">Tecla F3.</msg>
  <msg name="WinJS.Utilities.Key.F4">Tecla F4.</msg>
  <msg name="WinJS.Utilities.Key.F5">Tecla F5.</msg>
  <msg name="WinJS.Utilities.Key.F6">Tecla F6.</msg>
  <msg name="WinJS.Utilities.Key.F7">Tecla F7.</msg>
  <msg name="WinJS.Utilities.Key.F8">Tecla F8.</msg>
  <msg name="WinJS.Utilities.Key.F9">Tecla F9.</msg>
  <msg name="WinJS.Utilities.Key.F10">Tecla F10.</msg>
  <msg name="WinJS.Utilities.Key.F11">Tecla F11.</msg>
  <msg name="WinJS.Utilities.Key.F12">Tecla F12.</msg>
  <msg name="WinJS.Utilities.Key.numLock">Tecla BLOQ NUM.</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">Tecla BLOQ DESPL.</msg>
  <msg name="WinJS.Utilities.Key.browserBack">Tecla Atrás del explorador.</msg>
  <msg name="WinJS.Utilities.Key.browserForward">Tecla Adelante del explorador.</msg>
  <msg name="WinJS.Utilities.Key.semicolon">Tecla de punto y coma.</msg>
  <msg name="WinJS.Utilities.Key.equal">Tecla IGUAL.</msg>
  <msg name="WinJS.Utilities.Key.comma">Tecla de COMA.</msg>
  <msg name="WinJS.Utilities.Key.dash">Tecla de guión.</msg>
  <msg name="WinJS.Utilities.Key.period">Tecla de punto.</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">Tecla de barra diagonal.</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">Tecla de de acento grave.</msg>
  <msg name="WinJS.Utilities.Key.openBracket">Tecla de corchete de apertura.</msg>
  <msg name="WinJS.Utilities.Key.backSlash">Tecla de barra diagonal inversa.</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">Tecla de corchete de cierre.</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">Tecla de comillas simples.</msg>
  <msg name="WinJS.Utilities.data">Obtiene el valor de datos asociado al elemento especificado.</msg>
  <msg name="WinJS.Utilities.data_p:element">El elemento.</msg>
  <msg name="WinJS.Utilities.data_returnValue">El valor asociado al elemento.</msg>
  <msg name="WinJS.Utilities.hasClass">Determina si el elemento especificado tiene la clase especificada.</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">Es true si el elemento especificado contiene la clave especificada; en caso contrario, es false.</msg>
  <msg name="WinJS.Utilities.addClass">Agrega las clases especificadas al elemento especificado. Se pueden agregar varias clases utilizando nombres delimitados por espacios.</msg>
  <msg name="WinJS.Utilities.addClass_p:e">El elemento al que se va a agregar la clase.</msg>
  <msg name="WinJS.Utilities.addClass_p:name">El nombre de la clase que se va a agregar; se pueden agregar varias clases mediante nombres delimitados por espacios</msg>
  <msg name="WinJS.Utilities.removeClass">Quita la clase especificada del elemento especificado.</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">El elemento del que se va a quitar la clase.</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">El nombre de la clase que se quita.</msg>
  <msg name="WinJS.Utilities.toggleClass">Alterna (agrega o quita) la clase especificada del elemento especificado. Si la clase está presente, se quita; si no está presente, se agrega.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">El elemento en el que se se va a activar o desactivar la clase.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">El nombre de la clase que se activa o desactiva.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">Obtiene la coordenada izquierda del elemento especificado en relación con el elemento primario especificado.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">La coordenada izquierda relativa.</msg>
  <msg name="WinJS.Utilities.getRelativeTop">Obtiene la coordenada superior del elemento en relación con el elemento primario especificado.</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">La coordenada superior relativa.</msg>
  <msg name="WinJS.Utilities.empty">Quita todos los nodos secundarios del elemento especificado.</msg>
  <msg name="WinJS.Utilities.getContentWidth">Obtiene el ancho del contenido del elemento especificado. El ancho del contenido no incluye los bordes ni el relleno.</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">El ancho del contenido del elemento.</msg>
  <msg name="WinJS.Utilities.getTotalWidth">Obtiene o establece el ancho del elemento, incluidos los márgenes.</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">El ancho del elemento, incluidos los márgenes.</msg>
  <msg name="WinJS.Utilities.getContentHeight">Obtiene el alto del contenido del elemento especificado. El alto del contenido no incluye los bordes ni el relleno.</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">El alto del contenido del elemento.</msg>
  <msg name="WinJS.Utilities.getTotalHeight">Obtiene el alto del elemento, incluidos los márgenes.</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">El alto del elemento, incluidos márgenes.</msg>
  <msg name="WinJS.Utilities.getPosition">Obtiene la posición del elemento especificado.</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">Objeto que contiene las propiedades Top, Left, Width y Height del elemento.</msg>
  <msg name="WinJS.Utilities.convertToPixels">Convierte a píxeles una cadena de posicionamiento de CSS para el elemento especificado.</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">La cadena de posicionamiento de CSS.</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">El número de píxeles.</msg>
  <msg name="WinJS.Utilities.eventWithinElement">Determina si el evento especificado se produjo dentro del elemento especificado.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">Evento.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">Es true si el evento se produjo dentro del elemento; en caso contrario, false.</msg>
  <msg name="WinJS.UI.Pages.dispose">Desecha esta página.</msg>
  <msg name="WinJS.UI.Pages._mixin.load">Crea una copia de los elementos DOM a partir del URI especificado. Para que esta invalidación se utilice, la página que contiene la invalidación de carga debe definirse llamando a WinJS.UI.Pages.define() antes que a WinJS.UI.Pages.render().</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">El URI del que se van a copiar los elementos DOM.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">Compromiso cuyo valor con el que se cumple es el conjunto de elementos DOM sin elemento primario, si es necesario el procesamiento asincrónico. Si no, no devuelve nada.</msg>
  <msg name="WinJS.UI.Pages._mixin.init">Inicializa el control antes de que se establezca su contenido. Utilice el método procesado para cualquier inicialización que se deba realizar después de haber establecido el contenido del control.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">El elemento DOM que contendrá todo el contenido de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">Las opciones que se pasan al constructor de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">Compromiso que se cumple al completar la inicialización, si es necesario el procesamiento asincrónico. Si no, no devuelve nada.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">Inicializa el control después de que se establezca su contenido.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">Las opciones que se deben pasar al constructor de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.render">Representa el control, normalmente agregando los elementos especificados en el parámetro loadResult al elemento especificado.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">Las opciones que se pasan al constructor de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">Los elementos devueltos por el método de carga.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">Compromiso que se cumple al finalizar la representación, si es necesario el procesamiento asincrónico. Si no, no devuelve nada.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">Se llama después de completar toda la inicialización y la representación. En este momento el elemento está listo para su uso.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">El elemento DOM que contiene todo el contenido de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">Las opciones que se pasan al constructor de la página</msg>
  <msg name="WinJS.UI.Pages._mixin.error">Se llama si se produce algún error durante el procesamiento de la página.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">El error que se ha producido.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">Nada si el error se ha controlado, o un compromiso de error en caso contrario.</msg>
  <msg name="WinJS.UI.Pages.define">Crea un nuevo control de página a partir del URI especificado que contiene los miembros especificados. Se permiten varias llamadas a este método para el mismo URI, y se combinarán todos los miembros.</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">El URI para el contenido que define la página.</msg>
  <msg name="WinJS.UI.Pages.define_p:members">Miembros adicionales que tendrá el control.</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">Función constructora que crea la página.</msg>
  <msg name="WinJS.UI.Pages.get">Obtiene un control de página ya definido para el URI especificado, o crea uno nuevo.</msg>
  <msg name="WinJS.UI.Pages.render">Crea un control de página a partir del URI especificado dentro del elemento especificado con las opciones especificadas.</msg>
  <msg name="WinJS.UI.Pages.render_p:element">El elemento que se rellenará con la página.</msg>
  <msg name="WinJS.UI.Pages.render_p:options">Las opciones para configurar la página.</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">Compromiso que se cumple cuando el elemento especificado tiene como primario el documento final.</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">Un compromiso que se cumple cuando se realiza representación de la página.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">Copia el contenido del URI especificado en el elemento especificado.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">El URI que contiene el fragmento que se va a copiar.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">El elemento al que se adjunta el fragmento.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">Compromiso se cumple al cargar el fragmento. Si no se especifica un elemento de destino, el fragmento copiado es el valor completo.</msg>
  <msg name="WinJS.UI.Fragments.cache">Inicia la carga del fragmento en la ubicación especificada. El compromiso devuelto se completa cuando el fragmento está listo para copiarse.</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">El URI que contiene el fragmento que se va a copiar.</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">Compromiso que se cumple cuando se ha preparado el fragmento para la copia.</msg>
  <msg name="WinJS.UI.Fragments.clearCache">Quita cualquier información almacenada en caché sobre el fragmento especificado. Este método no descarga ningún script o estilo a los que hace referencia el fragmento.</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">El URI que contiene el fragmento que se va a borrar. Si no se proporciona ningún URI, se borra todo el contenido de la memoria caché.</msg>
  <msg name="WinJS.UI.isAnimationEnabled">Determina si la biblioteca de animaciones de WinJS realizará animaciones.</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">Es true si se realizan animaciones de WinJS. false en caso contrario.</msg>
  <msg name="WinJS.UI.disableAnimations">Deshabilita las animaciones de la biblioteca de animaciones de WinJS disminuyendo el recuento de animaciones habilitadas.</msg>
  <msg name="WinJS.UI.enableAnimations">Habilita las animaciones de la biblioteca de animaciones de WinJS incrementando el recuento de animaciones habilitadas.</msg>
  <msg name="WinJS.UI.executeAnimation">Realiza una animación de CSS que puede coexistir con otras animaciones de la biblioteca de animaciones. No se espera que las aplicaciones llamen directamente a esta función; en su lugar, deberían utilizar las animaciones de alto nivel de la biblioteca de animaciones.</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">Elemento único o colección de elementos en los que se va a realizar una animación de CSS.</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">Descripción de animación única o matriz de descripciones de animación.</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">Objeto Promise que se cumple cuando se completa la animación de CSS.</msg>
  <msg name="WinJS.UI.executeTransition">Realiza una transición de CSS que puede coexistir con otras animaciones de la biblioteca de animaciones. No se espera que las aplicaciones llamen directamente a esta función; en su lugar, deberían utilizar las animaciones de alto nivel de la biblioteca de animaciones.</msg>
  <msg name="WinJS.UI.executeTransition_p:element">Elemento único o colección de elementos en los que se va a realizar una transición de CSS.</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">Descripción de transición única o matriz de descripciones de transición.</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">Objeto Promise que se cumple al finalizar la transición de CSS.</msg>
  <msg name="WinJS.UI.eventHandler">Marca una función de controlador de eventos como compatible con el procesamiento declarativo.</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">El controlador que se va a marcar como compatible con el procesamiento declarativo.</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">El controlador de entrada.</msg>
  <msg name="WinJS.UI.Orientation">Opciones de orientación para la propiedad de un control</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">Vertical</msg>
  <msg name="WinJS.Application.event.setPromise">Se utiliza para informar al objeto de aplicación de que se está realizando el trabajo asincrónico, y de que este controlador de eventos no debe considerarse como completado hasta que se cumpla el compromiso.</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">El compromiso que se espera.</msg>
  <msg name="WinJS.Application.queueEvent">Pone en cola un evento para que lo procese la cola de eventos de WinJS.Application.</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">Se espera que el objeto de evento tenga una propiedad de tipo que se utilice como nombre de evento al enviarle a la cola de eventos de WinJS.Application. El objeto completo se proporciona a los agentes de escucha de eventos en la propiedad Detail del evento.</msg>
  <msg name="WinJS.Application.stop">Detiene el procesamiento de los eventos de la aplicación y restaura WinJS.Application a su estado inicial.</msg>
  <msg name="WinJS.Application.checkpoint">Pone en cola un evento de punto de control.</msg>
  <msg name="WinJS.Application.start">Inicia el procesamiento de eventos en la cola de eventos de WinJS.Application.</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">Se utiliza para informar a ListView de que se está realizando el trabajo asincrónico, y de que este controlador de eventos no debe considerarse como completado hasta que se cumpla el compromiso.</msg>
  <msg name="WinJS.Navigation.canGoForward">Determina si es posible navegar hacia delante.</msg>
  <msg name="WinJS.Navigation.canGoBack">Determina si es posible navegar hacia atrás.</msg>
  <msg name="WinJS.Navigation.location">Obtiene la ubicación actual.</msg>
  <msg name="WinJS.Navigation.state">Obtiene o establece el estado de navegación.</msg>
  <msg name="WinJS.Navigation.history">Obtiene o establece el historial de navegación.</msg>
  <msg name="WinJS.Navigation.forward">Navega hacia delante.</msg>
  <msg name="WinJS.Navigation.forward_p:distance">El número de entradas que se debe avanzar.</msg>
  <msg name="WinJS.Navigation.forward_returnValue">Compromiso que se cumple con un valor que indica si la navegación se realizó correctamente o no.</msg>
  <msg name="WinJS.Navigation.back">Navega hacia atrás.</msg>
  <msg name="WinJS.Navigation.back_p:distance">El número de entradas que se debe retroceder en el historial.</msg>
  <msg name="WinJS.Navigation.navigate">Navega hasta una ubicación.</msg>
  <msg name="WinJS.Navigation.navigate_p:location">La ubicación hasta la que se va a navegar. Normalmente, la ubicación es una cadena, pero puede ser cualquier cosa.</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">El estado de navegación al que puede tener acceso mediante WinJS.Navigation.state.</msg>
  <msg name="WinJS.Application.local">Permite el acceso para crear archivos en el almacenamiento local de la aplicación, que se conserva entre las ejecuciones de una aplicación y no se traslada.</msg>
  <msg name="WinJS.Application.temp">Permite el acceso para crear archivos en el almacenamiento temporal de la aplicación, que puede ser reclamado por el sistema entre ejecuciones de la aplicación.</msg>
  <msg name="WinJS.Application.roaming">Permite el acceso para crear archivos en el almacenamiento de movilidad de la aplicación, que se conserva entre ejecuciones de una aplicación y se traslada con el usuario a distintos equipos.</msg>
  <msg name="WinJS.Binding.observableMixin.notify">Notifica a los agentes de escucha que se actualizó un valor de propiedad.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">El nombre de la propiedad que se va a actualizar.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">Nuevo valor de la propiedad.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">El valor anterior de la propiedad.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">Compromiso que se cumple cuando se completan las notificaciones.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">Quita uno o más agentes de escucha de la lista de notificaciones para una propiedad determinada.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">El nombre de la propiedad que se va a desenlazar. Si se omite este parámetro, se quitan todos los agentes de escucha para todos los eventos.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">La función que se va a quitar de la lista de agentes de escucha para la propiedad especificada. Si se omite este parámetro, se quitan todos los agentes de escucha para la propiedad concreta.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">Obtiene un valor de propiedad por nombre.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">El nombre de la propiedad que se va a obtener.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">El valor de la propiedad como un objeto observable.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">Actualiza un valor de propiedad y notifica a los agentes de escucha.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">Nombre de la propiedad que se va a actualizar.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">Nuevo valor de la propiedad.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">Agrega una propiedad con notificación de cambios a este objeto, incluyendo una definición de propiedad ECMAScript5.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">Nombre de la propiedad que se va a agregar.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">El valor de la propiedad.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">Compromiso que se cumple cuando se han procesado las notificaciones para este cambio de propiedad. Si se combinan varias notificaciones, el compromiso se puede cancelar o se puede actualizar su valor. El valor con el que se cumple el compromiso es el nuevo valor de la propiedad para la que se han completado las notificaciones.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">Quitar un valor de propiedad.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">Nombre de la propiedad que se va a quitar.</msg>
  <msg name="WinJS.Binding.bind">Enlaza una o varias propiedades en el objeto observable o en los valores secundarios de ese objeto.</msg>
  <msg name="WinJS.Binding.bind_p:observable">El objeto que se va a enlazar.</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">Literal de objeto que contiene las declaraciones de enlace. Las declaraciones de enlace adoptan la forma: {nombreDePropiedad: (función | declaraciónDeEnlace),… } Por ejemplo, el enlace a un miembro anidado de un objeto se declara de esta forma: bind(Objeto, { dirección: { calle: function(v) { ... } } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">Objeto que contiene al menos un campo de cancelación, que es una función que quita todos los enlaces asociados a esta solicitud de enlace.</msg>
  <msg name="WinJS.Binding.expandProperties">Ajusta el objeto especificado de forma que todas sus propiedades se instrumentan para el enlace. Esto está pensado para utilizarse junto con el mixin de enlace.</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">La especificación para el objeto enlazable.</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">Objeto con un conjunto de propiedades que se conectan para el enlace.</msg>
  <msg name="WinJS.Binding.define">Crea una nueva función constructora que admite la observación con el conjunto de propiedades especificado.</msg>
  <msg name="WinJS.Binding.define_p:data">El objeto que va a utilizar como modelo para definir el conjunto de propiedades, por ejemplo: var MyPointClass = define({x: 0, y: 0});</msg>
  <msg name="WinJS.Binding.define_returnValue">Función constructora con 1 argumento opcional que es el estado inicial de las propiedades.</msg>
  <msg name="WinJS.Binding.define.return">Crea un nuevo objeto observable.</msg>
  <msg name="WinJS.Binding.define.return_p:init">Los valores iniciales de las propiedades.</msg>
  <msg name="WinJS.Binding.as">Devuelve un objeto observable. Este puede ser un proxy observable para el objeto especificado, un proxy existente o el propio objeto especificado si admite directamente la observación.</msg>
  <msg name="WinJS.Binding.as_p:data">Objeto para el que se debe proporcionar observación.</msg>
  <msg name="WinJS.Binding.as_returnValue">El objeto perceptible.</msg>
  <msg name="WinJS.Binding.unwrap">Devuelve el objeto (no observable) original si el objeto especificado es un proxy observable.</msg>
  <msg name="WinJS.Binding.unwrap_p:data">El objeto del que se va a recuperar el valor original.</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">Si el objeto especificado es un proxy observable, se devuelve el objeto original; en caso contrario, se devuelve el mismo objeto.</msg>
  <msg name="WinJS.Binding.Template.render.value">Representa una plantilla basada en un URI.</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">EL URI desde el que se va cargar la plantilla.</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">Compromiso que se cumple una vez finalizado el enlace. El valor es el objeto del parámetro de contenedor o el objeto DIV creado.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">Representa una plantilla que está enlazada a los datos especificados y que tiene como primarios los elementos incluidos en el objeto QueryCollection. Si el objeto QueryCollection contiene varios elementos, la plantilla se representa varias veces, una vez en cada elemento del objeto QueryCollection para cada elemento o dato pasado.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">El elemento DOM al que se adjunta el control de plantilla.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">Los datos que se van a representar. Si los datos son una matriz (o cualquier otro objeto que tenga un método forEach), la plantilla se representa varias veces, una para cada elemento de la colección.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">Si se proporciona, se llama a esta función cada vez que se representa la plantilla, y se le pasa un compromiso que se cumple cuando se completa la representación de la plantilla.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">El objeto QueryCollection.</msg>
  <msg name="WinJS.Binding.declarativeBind">Enlaza valores del contexto de datos especificado a elementos que son descendientes del elemento raíz especificado y tienen atributos de enlace declarativos (data-win-bind).</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">El elemento en el que se va a empezar el recorrido en busca de elementos con los que enlazar. Si se omite este parámetro, se busca en todo el documento.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">Los datos de enlace almacenados en memoria caché.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">Inicializador de enlace que se va a usar en caso de que no se especifique ninguno en una expresión de enlace. Si no se proporciona, el comportamiento es el mismo que el de WinJS.Binding.defaultBind.</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">Compromiso que se cumple cuando se han procesado los elementos que contienen declaraciones de enlace y se ha iniciado la actualización.</msg>
  <msg name="WinJS.Binding.converter">Crea un inicializador de enlace predeterminado para enlazar una propiedad de origen y una propiedad de destino mediante una función de conversión proporcionada que se ejecuta en el valor de la propiedad de origen.</msg>
  <msg name="WinJS.Binding.converter_p:convert">La conversión que se aplica sobre el resultado de la propiedad de origen para generar un valor que se establece en la propiedad de destino.</msg>
  <msg name="WinJS.Binding.converter_returnValue">El inicializador de enlace.</msg>
  <msg name="WinJS.Binding.setAttribute">Crea un enlace unidireccional entre el objeto de origen y un atributo en el elemento de destino.</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">Objeto de origen.</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">La ruta de acceso del objeto de origen a la propiedad de origen.</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">El objeto de destino (debe ser un elemento de DOM).</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">La ruta de acceso del objeto de destino a la propiedad de destino, tiene que tener un nombre único.</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">Valor inicial conocido del destino, si el valor de origen es igual que este valor inicial (mediante ===) el destino no se establecerá la primera vez.</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">Objeto con un método de cancelación que se utiliza para combinar enlaces.</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">Establece un atributo en el elemento de destino para el valor de la propiedad de origen</msg>
  <msg name="WinJS.Binding.addClassOneTime">Agrega una clase en el elemento de destino al valor de la propiedad de origen</msg>
  <msg name="WinJS.Binding.defaultBind">Crea un enlace unidireccional entre el objeto de origen y el objeto de destino.</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">El objeto de destino.</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">La ruta de acceso del objeto de destino a la propiedad de destino.</msg>
  <msg name="WinJS.Binding.oneTime">Establece la propiedad de destino en el valor de la propiedad de origen.</msg>
  <msg name="WinJS.Binding.initializer">Marca una función del inicializador personalizada como compatible con el enlace de datos declarativo.</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">El inicializador personalizado que se va a marcar como compatible con el enlace de datos declarativo.</msg>
  <msg name="WinJS.Binding.initializer_returnValue">El inicializador personalizado de entrada.</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">El valor identificado por la clave especificada se ha reemplazado por un valor diferente.</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">Se ha insertado un nuevo valor en la lista.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">El valor identificado por la clave especificada se ha movido desde un índice de la lista a otro.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">El valor identificado por la clave especificada se ha transformado.</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">El valor identificado por la clave especificada se ha quitado de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.onreload">La lista se ha actualizado. Las referencias a elementos de la lista pueden ser incorrectas.</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">Hace que la lista envíe una notificación de recarga a los agentes de escucha.</msg>
  <msg name="WinJS.Binding.ListBase.getAt">Obtiene el valor en el índice especificado.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">El índice del valor que se va a obtener.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">Valor en el índice especificado.</msg>
  <msg name="WinJS.Binding.ListBase.concat">Devuelve una lista nueva que se compone de una combinación de dos matrices.</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">Matriz que contiene la concatenación de la lista y otros elementos proporcionados.</msg>
  <msg name="WinJS.Binding.ListBase.join">Devuelve una cadena que consta de todos los elementos de una lista separados por la cadena separadora especificada.</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">Cadena utilizada para separar los elementos de una lista. Si se omite este parámetro, los elementos de la lista se separan mediante comas.</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">Los elementos de una lista separados por la cadena separadora especificada.</msg>
  <msg name="WinJS.Binding.ListBase.slice">Extrae una sección de una lista y devuelve una lista nueva.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">El índice que especifica el principio de la sección.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">El índice que especifica el fin de la sección.</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">Devuelve una sección de una matriz.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">Obtiene el índice de la primera aparición del valor especificado en una lista.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">Valor que va a buscarse en la lista.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">El índice en el que se va a comenzar la búsqueda. Si se omite fromIndex, la búsqueda comienza en el índice 0.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">Índice de la primera aparición de un valor en una lista o -1 si no se encuentra.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">Obtiene el índice de la última aparición del valor especificado en una lista.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">El índice en el que se va a comenzar la búsqueda. Si se omite fromIndex, la búsqueda comienza en el último índice de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">El índice de la última aparición de un valor en una lista, o -1 si no se encuentra.</msg>
  <msg name="WinJS.Binding.ListBase.every">Comprueba si la función de devolución de llamada especificada devuelve true para todos los elementos de una lista.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">Función que acepta un máximo de tres argumentos. Se llama a esta función para cada elemento de la lista hasta que devuelve false o se alcanza el final de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">Objeto al que puede hacer referencia esta palabra clave en la función de devolución de llamada. Si se omite thisArg, se utiliza indefinido.</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">True si la devolución de llamada devuelve true para todos los elementos de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.filter">Devuelve los elementos de una lista que cumplen la condición especificada en una función de devolución de llamada.</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">Función que acepta un máximo de tres argumentos. Se llama a la función para cada elemento de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">Matriz que contiene los elementos que cumplen la condición especificada en la función de devolución de llamada.</msg>
  <msg name="WinJS.Binding.ListBase.forEach">Llama a la función de devolución de llamada especificada para cada elemento de una lista.</msg>
  <msg name="WinJS.Binding.ListBase.map">Llama a la función de devolución de llamada especificada en cada elemento de una lista, y devuelve una matriz que contiene los resultados.</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">Matriz que contiene el resultado de llamar a la función de devolución de llamada en cada elemento de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.some">Comprueba si la función de devolución de llamada especificada devuelve true para algún elemento de una lista.</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">Función que acepta un máximo de tres argumentos. Se llama a la función para cada elemento de la lista hasta que devuelve true, o hasta que se alcanza el final de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">Es true si la devolución de llamada devuelve true para algún elemento de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.reduce">Acumula un solo resultado llamando a la función de devolución de llamada especificada para todos los elementos de una lista. El valor devuelto de la función de devolución de llamada es el resultado acumulado, y se proporciona como argumento en la siguiente llamada a dicha función.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">Función que acepta un máximo de cuatro argumentos. Se llama a la función para cada elemento de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">Si se especifica initialValue, este se utiliza como el valor con el que iniciar la acumulación. La primera llamada a la función proporciona este valor como argumento en lugar de un valor de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">El valor devuelto de la última llamada a la función de devolución de llamada.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">Acumula un solo resultado llamando a la función de devolución de llamada especificada para todos los elementos de una lista, en orden descendente. El valor devuelto de la función de devolución de llamada es el resultado acumulado, y se proporciona como argumento en la siguiente llamada a dicha función.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">Si se especifica initialValue, este se utiliza como el valor con el que iniciar la acumulación. La primera llamada a la función callbackfn proporciona este valor como argumento en lugar de un valor de la lista.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">El valor devuelto de la última llamada a la función de devolución de llamada.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">Crea una proyección filtrada activa sobre esta lista. A media que la lista cambia, la proyección filtrada reacciona a esos cambios y también cambia.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">Función que acepta un argumento único. La función createFiltered llama a la devolución de llamada con cada elemento de la lista. Si la función devuelve true, ese elemento se incluirá en la lista filtrada.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">Proyección filtrada sobre la lista.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">Crea una proyección agrupada activa sobre esta lista. A media que la lista cambia, la proyección agrupada reacciona a esos cambios y también cambia. La proyección agrupada ordena todos los elementos de la lista para que estén ordenados por grupos contiguos. La proyección agrupada también contiene una propiedad .groups que es un objeto WinJS.Binding.List que representa los grupos encontrados en la lista.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">Función que acepta un argumento único. Se llama a la función con cada elemento de la lista, y debe devolver una cadena que representa el grupo que contiene el elemento.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">Función que acepta un argumento único. Se llama a la función en un elemento de la lista para cada grupo. Debe devolver el valor que se debe establecer como los datos del elemento de lista .groups para este grupo.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">Función que acepta dos argumentos. Se llama a la función con la clave de los grupos encontrados en la lista. Debe devolver uno de los valores numéricos siguientes: negativo si el primer argumento es menor que el segundo, cero si los dos argumentos son equivalentes y positivo si el primer argumento es mayor que el segundo. Si se omite, los grupos se ordenan de forma ascendente, siguiendo el orden del juego de caracteres ASCII.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">Proyección agrupada sobre la lista.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">Crea una proyección ordenada activa sobre esta lista. A media que la lista cambia, la proyección ordenada reacciona a esos cambios y también cambia.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">Función que acepta dos argumentos. Se llama a la función con los elementos de la lista. Debe devolver uno de los valores numéricos siguientes: negativo si el primer argumento es menor que el segundo, cero si los dos argumentos son equivalentes y positivo si el primer argumento es mayor que el segundo.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">Proyección ordenada sobre la lista.</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">Desconecta esta proyección del objeto WinJS.Binding.List de su objeto WinJS.Binding.List subyacente. Esto solo es importante si tienen diferente duración.</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">Obtiene un par clave/datos para la clave especificada.</msg>
  <msg name="WinJS.Binding.ListProjection.move">Mueve el valor situado en el índice a la posición newIndex.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">Devuelve un valor entero que supera en uno al elemento mayor definido en una lista.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">Devuelve un par clave/datos para el índice especificado.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">El índice del valor que se va a recuperar.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">Devuelve el índice de la primera aparición de una clave en una lista.</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">Obtiene o establece la longitud de la lista. Devuelve un valor entero que supera en uno al elemento mayor definido en una lista.</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">Devuelve el índice de la primera aparición de una clave.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">Obtiene un objeto WinJS.Binding.List, que es una proyección de los grupos que se identificaron en esta lista.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">Obtiene un par clave/datos para la clave de elemento especificada.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">Obtiene la longitud de la lista. Devuelve un valor entero que supera en uno al elemento mayor definido en una lista.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">Obtiene un par clave/datos para el índice especificado.</msg>
  <msg name="WinJS.Resources.processAll">Procesa la etiqueta de recursos y reemplaza las cadenas con cadenas localizadas.</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">El elemento DOM en el que se debe iniciar el procesamiento. processAll procesa el elemento y sus elementos secundarios. Si no especifica el elemento raíz, processAll procesa todo el documento.</msg>
</messagebundle>