<?xml version="1.0" encoding="utf-8"?>
<messagebundle>
  <msg name="WinJS.PromiseStateMachine.cancel">약속된 값의 충족을 취소하려고 시도합니다. 약속이 이미 충족되지 않고 취소가 지원되지 않을 경우 Error("Canceled") 값의 오류 상태를 입력합니다.</msg>
  <msg name="WinJS.PromiseStateMachine.done">약속 값 및 진행률 알림 과정 처리를 행하지 못할 경우 수행해야 하는 행에서 작업을 지정할 수 있습니다. 처리기 실행을 완료한 후 이 함수에서 then() 오류 상태에 대한 약속으로 반환된 모든 오류를 throw합니다.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onComplete">값을 사용하여 약속을 성공적으로 수행하면 호출되는 함수입니다. 충족된 값이 하나의 인수로 전달됩니다. 값이 null일 경우 충족된 값은 반환됩니다. Then()에 의해 반환되는 약속을 충족된 값 함수에서 반환되는 값이 됩니다. 함수를 실행하는 동안 예외가 throw되면 약속 then()에 의해 반환되는 오류 상태로 이동합니다.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onError">약속이 오류로 충족되어 있을 경우 호출되는 함수입니다. 오류가 하나의 인수로 전달됩니다. 이 값이 null 이면 오류가 전달됩니다. Then()에 의해 반환되는 약속을 충족된 값 함수에서 반환되는 값이 됩니다.</msg>
  <msg name="WinJS.PromiseStateMachine.done_p:onProgress">진행 중인 약속을 보고하는 경우 호출되는 함수입니다. 진행 중인 데이터가 하나의 인수로 전달됩니다. 약속 진행률을 지원할 필요가 없습니다.</msg>
  <msg name="WinJS.PromiseStateMachine.then">약속 값 및 진행률 알림 과정 처리를 행하지 못할 경우 수행해야 하는 행에서 작업을 지정할 수 있습니다.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onComplete">값을 사용하여 약속을 성공적으로 수행하면 호출되는 함수입니다. 값이 하나의 인수로 전달됩니다. 값이 null일 경우 값은 반환됩니다. Then()에 의해 반환되는 약속을 충족된 값 함수에서 반환되는 값이 됩니다. 함수를 실행하는 동안 예외가 throw되면 약속 then()에 의해 반환되는 오류 상태로 이동합니다.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onError">약속이 오류로 충족되어 있을 경우 호출되는 함수입니다. 오류가 하나의 인수로 전달됩니다. 이 값이 null 이면 오류가 전달됩니다. Then()에 의해 반환되는 약속을 충족된 값 함수에서 반환되는 값이 됩니다.</msg>
  <msg name="WinJS.PromiseStateMachine.then_p:onProgress">진행 중인 약속을 보고하는 경우 호출되는 함수입니다. 진행 중인 데이터가 하나의 인수로 전달됩니다. 약속 진행률을 지원할 필요가 없습니다.</msg>
  <msg name="WinJS.PromiseStateMachine.then_returnValue">약속 또는 오류 함수를 실행한 결과 값입니다.</msg>
  <msg name="WinJS.Promise">아직 계산된 값에 수행해야 하는 작업을 예약하는 메커니즘에 대한 약속을 제공합니다. 이 비동기 API와 상호 작용을 관리하는 편리한 추상화입니다.</msg>
  <msg name="WinJS.Promise_p:init">약속을 생성하는 동안 호출되는 함수입니다. 함수의 세 가지 인수(완료, 오류, 진행)가 주어집니다. 이 함수 안에서 이 값에 의해 지원되는 알림에 대한 이벤트 수신기를 추가해야 합니다.</msg>
  <msg name="WinJS.Promise_p:oncancel">이 약속의 소비자 실행 취소 작업을 취소하려는 경우 호출되는 함수입니다. 약속 취소를 지원할 필요가 없습니다.</msg>
  <msg name="WinJS.Promise.addEventListener">컨트롤에 이벤트 수신기를 추가합니다.</msg>
  <msg name="WinJS.Promise.addEventListener_p:eventType">이벤트의 형식(이름)입니다.</msg>
  <msg name="WinJS.Promise.addEventListener_p:listener">이벤트가 발생할 때 호출하는 수신기입니다.</msg>
  <msg name="WinJS.Promise.addEventListener_p:capture">캡처를 시작할 것인지 여부를 지정합니다.</msg>
  <msg name="WinJS.Promise.any">입력된 약속 중 하나가 충족되면 충족된 약속을 반환합니다.</msg>
  <msg name="WinJS.Promise.any_p:values">약속 개체 또는 약속 개체 속성 값을 포함하는 개체를 포함하는 배열입니다.</msg>
  <msg name="WinJS.Promise.any_returnValue">행에 입력 값을 생성하는 약속(완전 또는 오류)입니다.</msg>
  <msg name="WinJS.Promise.as">약속을 반환합니다. 개체에 대한 약속이 이미 있는 경우 반환됩니다. 그렇지 않으면 개체에 대한 약속에 래핑됩니다.</msg>
  <msg name="WinJS.Promise.as_p:value">약속으로 처리될 값입니다.</msg>
  <msg name="WinJS.Promise.as_returnValue">약속입니다.</msg>
  <msg name="WinJS.Promise.cancel">취소된 약속 값은 약속 완료 처리기에서 반환되어 약속 체인 취소를 나타낼 수 있습니다.</msg>
  <msg name="WinJS.Promise.dispatchEvent">지정된 형식과 속성의 이벤트를 발생합니다.</msg>
  <msg name="WinJS.Promise.dispatchEvent_p:details">이벤트 개체에 첨부하는 추가 속성 집합이 있습니다.</msg>
  <msg name="WinJS.Promise.dispatchEvent_returnValue">preventDefault가 이벤트로 호출되는지 여부를 지정합니다.</msg>
  <msg name="WinJS.Promise.is">값이 약속 계약을 충족하는지 여부를 결정합니다.</msg>
  <msg name="WinJS.Promise.is_p:value">값은 약속일 수 있습니다.</msg>
  <msg name="WinJS.Promise.is_returnValue">지정한 값에 대한 약속일 경우 true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Promise.join">값을 모두 충족하는 경우 처리에 대한 약속을 만듭니다.</msg>
  <msg name="WinJS.Promise.join_p:values">해당 필드 중 일부는 약속 수 값이 들어있는 개체입니다.</msg>
  <msg name="WinJS.Promise.join_returnValue">값 개체가 값 매게 변수에 있는 개체와 똑같은 필드 이름인 약속은 약속의 충족된 값입니다.</msg>
  <msg name="WinJS.Promise.removeEventListener">컨트롤에서 이벤트 수신기를 제거합니다.</msg>
  <msg name="WinJS.Promise.removeEventListener_listener">제거할 수신기입니다.</msg>
  <msg name="WinJS.Promise.then">약속 인스턴스 메서드 then()의 정적 버전입니다.</msg>
  <msg name="WinJS.Promise.then_p:value">약속으로 처리될 값입니다.</msg>
  <msg name="WinJS.Promise.then_p:complete">값을 사용하여 약속을 수행하면 호출되는 함수입니다. 이 값이 null이면 약속은 단순히 값을 반환합니다. 값이 하나의 인수로 전달됩니다.</msg>
  <msg name="WinJS.Promise.then_p:error">약속이 오류로 충족되어 있을 경우 호출되는 함수입니다. 오류가 하나의 인수로 전달됩니다.</msg>
  <msg name="WinJS.Promise.then_returnValue">제공된 완료 함수를 실행한 결과 값입니다.</msg>
  <msg name="WinJS.Promise.thenEach">모든 입력을 약속하고 입력의 모양을 가지며 각각의 입력에서 수행한 연산의 결과 포함에 대한 약속을 반환에 대해 작업을 수행합니다.</msg>
  <msg name="WinJS.Promise.thenEach_p:values">값의 집합(배열이나 객체일 수 있음)은 일부 또는 모든 약속입니다.</msg>
  <msg name="WinJS.Promise.thenEach_p:complete">값을 사용하여 약속을 수행하면 호출되는 함수입니다. 값이 null이면 약속은 값을 반환합니다. 값이 하나의 인수로 전달됩니다.</msg>
  <msg name="WinJS.Promise.thenEach_returnValue">값 매개 변수에서 호출하는 Promise.join의 결과에 대한 약속입니다.</msg>
  <msg name="WinJS.Promise.timeout">시간 제한 이후에 충족되는 약속을 만듭니다.</msg>
  <msg name="WinJS.Promise.timeout_p:timeout">밀리초 단위의 제한 시간입니다. 그렇지 않으면 이 값이 0이거나 지정되지 않은 setImmediate이라고 하면 setTimeout이 호출됩니다.</msg>
  <msg name="WinJS.Promise.timeout_p:promise">제한 시간이 만료되기 전에 완료되지 않는 경우 약속 값이 취소됩니다.</msg>
  <msg name="WinJS.Promise.timeout_returnValue">비동기적으로 지정된 제한 시간 후 완료에 대한 약속입니다.</msg>
  <msg name="WinJS.Promise.wrap">약속 아닌 값에 대한 약속에 래핑합니다. 값에 대한 약속을 필요로 하는 함수에 전달해야 할 경우 이 함수를 사용할 수 있습니다.</msg>
  <msg name="WinJS.Promise.wrap_p:value">일부 약속이 아닌 약속에서 래핑될 값입니다.</msg>
  <msg name="WinJS.Promise.wrap_returnValue">지정된 값을 성공적으로 충족하는 약속입니다.</msg>
  <msg name="WinJS.Promise.wrapError">약속 아닌 오류 값에 대한 약속에 래핑합니다. 오류에 대한 약속을 필요로 하는 함수에 전달해야 할 경우 이 함수를 사용할 수 있습니다.</msg>
  <msg name="WinJS.Promise.wrapError_p:error">일부 약속이 아닌 약속에서 래핑될 오류 값입니다.</msg>
  <msg name="WinJS.Promise.wrapError_returnValue">지정된 값과 함께 오류 상태에 있는 약속입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.completed">작업이 완료되었는지 여부를 나타내는 값을 가져옵니다. 이 값은 작업이 실행되어 완료된 경우 true이고, 실행되지 않았거나 취소된 경우 false입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.id">이 작업의 고유 식별자를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.name">이 작업의 진단 이름을 지정하는 문자열을 가져오거나 설정합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.owner">작업의 소유자 토큰을 가져옵니다. 이 소유자 토큰의 cancelAll 메서드를 사용하여 관련 작업을 취소할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.priority">작업 스케줄러에서 이 작업이 실행되는 우선 순위를 가져오거나 설정합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.cancel">작업을 취소합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.pause">작업을 일시 중지합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobNode.resume">일시 중지된 작업을 다시 시작합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.job">현재 작업을 실행 중인 작업 인스턴스입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.shouldYield">스케줄러에서 작업 항목이 협조적으로 양보하도록 요청한 경우 true가 되는 부울입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise">비동기 작업에서 작업 항목이 차단될 경우 호출됩니다. 스케줄러는 작업 일정을 재조정하기 전 지정된 약속이 완료될 때까지 기다립니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setPromise_p:promise">완료 시 일정을 재조정해야 하는 작업 항목 함수를 제공하는 약속 값입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork">작업 항목이 스케줄러에 협조적으로 양보하고 나중에 완료할 작업이 더 많을 경우 호출됩니다. 작업 항목이 양보하려고 할 때 이 메서드를 사용하여 추가 작업의 일정을 조정합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._JobInfo.setWork_p:work">일정을 재조정할 작업 함수입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler._OwnerToken.cancelAll">이 소유자 토큰에 연결된 모든 작업을 취소합니다.</msg>
  <msg name="WinJS.ErrorFromName">지정된 이름 및 메시지 속성 오류 개체를 만듭니다.</msg>
  <msg name="WinJS.ErrorFromName_p:name">이 오류의 이름입니다. 이름은 프로그래밍 방식으로 제작되며 지역화 되어서는 안 됩니다.</msg>
  <msg name="WinJS.ErrorFromName_p:message">이 오류의 메시지입니다. 메시지는 사람이 제작하며 지역화 되어서는 안 됩니다.</msg>
  <msg name="WinJS.ErrorFromName_returnValue">이름 및 메시지 속성으로 채워진 오류 인스턴스</msg>
  <msg name="WinJS.Utilities.QueryCollection">쿼리 선택기의 결과를 나타내며 컬렉션의 요소를 통해 작업을 수행하는 다양한 작업을 제공합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection_p:items">쿼리에서 발생한 항목입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach">각 항목에 QueryCollection 작업을 수행합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:callbackFn">각 항목에 대해 수행할 작업입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_p:thisArg">callbackFn에 바인딩할 인수</msg>
  <msg name="WinJS.Utilities.QueryCollection.forEach_returnValue">QueryCollection을 반환합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get">QueryCollection에서 항목을 가져옵니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_p:index">반환할 항목의 인덱스입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.get_returnValue">컬렉션에서 단일 항목을 제거합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute">컬렉션에 있는 모든 항목의 특성 값을 설정합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:name">설정할 특성의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_p:value">설정할 특성의 값입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setAttribute_returnValue">이 QueryCollection 개체입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute">컬렉션의 첫 번째 요소에서 특성 값을 가져옵니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_p:name">특성의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.getAttribute_returnValue">특성 값입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass">지정된 클래스를 컬렉션에 있는 모든 요소에 추가합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.addClass_p:name">추가할 클래스 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass">지정된 이름의 차트 요소가 컬렉션의 첫 번째 요소에 있는지 여부를 결정합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_p:name">클래스의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.hasClass_returnValue">요소가 지정된 클래스면 true이고, 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass">컬렉션에 있는 모든 요소에서 지정된 클래스를 제거합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeClass_p:name">제거될 클래스의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass">컬렉션에 있는 모든 요소에서 지정된 클래스를 토글(추가 또는 제거)합니다. 클래스에 있으면 제거됩니다. 하나라도 없으면 추가됩니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.toggleClass_p:name">토글할 클래스의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen">컬렉션의 모든 요소에 지정된 이벤트에 대한 수신기를 등록합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:eventType">이벤트의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:listener">이벤트가 발생할 때 호출할 이벤트 처리기 함수입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.listen_p:capture">true이면 캡처 = addEventListener에 전달되면 true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener">컬렉션의 모든 요소에 지정된 이벤트에 대한 수신기를 등록 취소합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:listener">이벤트 처리기 함수입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.removeEventListener_p:capture">true이면 캡처 == true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle">컬렉션의 모든 요소가 지정된 스타일 속성을 설정합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:name">스타일 속성 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.setStyle_p:value">속성 값입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle">컬렉션의 모든 요소가 지정된 스타일 속성을 지웁니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.clearStyle_p:name">삭제할 스타일 속성의 이름입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query">컬렉션의 모든 요소에 쿼리 선택기를 실행하고 결과 QueryCollection으로 집계합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_p:query">쿼리 선택기 문자열입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.query_returnValue">QueryCollection 개체는 컬렉션에 있는 모든 요소에 쿼리를 실행하는 집계 결과를 포함합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include">항목 집합을 이 QueryCollection에 추가합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.include_p:items">QueryCollection에 추가할 항목입니다. 배열과 유사한 개체, 문서 조각 또는 단일 항목일 수 있습니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control">이 QueryCollection의 요소에 연결된 컨트롤을 만듭니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor">요소에 첨부할 수 있는 컨트롤을 만드는 데 사용되는 생성자 함수입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:options">새로 만드는 컨트롤에 전달할 옵션입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control2">이 QueryCollection의 요소에 연결된 컨트롤을 구성합니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.control_p:ctor2">컨트롤에 전달할 옵션입니다.</msg>
  <msg name="WinJS.UI.HtmlControl">동적으로 HTML 페이지를 포함할 수 있습니다.</msg>
  <msg name="WinJS.UI.HtmlControl_name">HtmlControl</msg>
  <msg name="WinJS.UI.HtmlControl.constructor">새 페이지 컨트롤을 정의하는 HtmlControl의 새 인스턴스를 초기화합니다.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:element">HtmlControl을 호스팅하는 요소입니다.</msg>
  <msg name="WinJS.UI.HtmlControl.constructor_p:options">페이지를 구성하는 옵션입니다. Uri 옵션은 페이지의 콘텐츠에 대한 소스 문서를 지정하기 위해 필요합니다.</msg>
  <msg name="WinJS.UI.TabContainer.constructor">TabContainer를 생성합니다.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:element">TabContainer에 연결할 DOM 요소입니다.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_p:options">TabContainer에 처음 적용할 옵션의 집합입니다.</msg>
  <msg name="WinJS.UI.TabContainer.constructor_returnValue">생성된 TabContainer입니다.</msg>
  <msg name="WinJS.UI.TabContainer.dispose">탭 컨테이너를 삭제합니다.</msg>
  <msg name="WinJS.UI.TabContainer.childFocus">포커스가 있는 자식 요소를 가져오거나 설정합니다.</msg>
  <msg name="WinJS.UI.TabContainer.tabIndex">컨트롤 컨테이너 내의 컨트롤 탭 순서를 가져오거나 설정합니다.</msg>
  <msg name="WinJS.Application.IOHelper.exists">지정된 파일이 컨테이너에 있는지 여부를 확인합니다.</msg>
  <msg name="WinJS.Application.IOHelper.exists_p:fileName">이 폴더 내에서 존재하는 파일입니다.</msg>
  <msg name="WinJS.Application.IOHelper.exists_returnValue">true(파일이 존재) 또는 false인지의 약속입니다.</msg>
  <msg name="WinJS.Application.IOHelper.remove">컨테이너에 있는 파일을 삭제합니다.</msg>
  <msg name="WinJS.Application.IOHelper.remove_p:fileName">삭제할 파일입니다.</msg>
  <msg name="WinJS.Application.IOHelper.remove_returnValue">파일이 삭제된 경우 충족되는 약속입니다.</msg>
  <msg name="WinJS.Application.IOHelper.writeText">특정 텍스트로 파일을 컨테이너에 작성합니다.</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:fileName">작성할 파일입니다.</msg>
  <msg name="WinJS.Application.IOHelper.writeText_p:str">파일에 쓸 콘텐츠입니다.</msg>
  <msg name="WinJS.Application.IOHelper.writeText_returnValue">작성한 문자 수의 약속입니다.</msg>
  <msg name="WinJS.Application.IOHelper.readText">파일이 존재하지 않는 경우 컨테이너에서 파일의 내용을 읽어 def가 반환됩니다.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:fileName">읽을 파일입니다.</msg>
  <msg name="WinJS.Application.IOHelper.readText_p:def">파일을 여는데 실패할 경우 기본값이 반환됩니다.</msg>
  <msg name="WinJS.Application.IOHelper.readText_returnValue">파일 또는 def 내용을 포함하는 약속입니다.</msg>
  <msg name="WinJS.Application.InMemoryHelper.exists_p:fileName">이 폴더 내에서 존재하는 파일 이름입니다.</msg>
  <msg name="WinJS.Application.InMemoryHelper.remove">컨테이너에 있는 파일을 삭제합니다.</msg>
  <msg name="WinJS.Application.InMemoryHelper.writeText_p:fileName">작성할 파일 이름입니다.</msg>
  <msg name="WinJS.Application.InMemoryHelper.readText_p:fileName">읽을 파일 이름입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.bind">이름 매개 변수에서 지정한 속성에 지정된 작업을 연결합니다. 속성 값이 변경된 경우 이 함수가 호출됩니다. 값이 실제로 변경되었을 경우 작업이 호출되거나 모든 값의 변경에 대해 작업이 호출되는 것은 보장되지 않습니다. 이 함수의 구현은 변경 알림과 결합하며 속성 값에 다중 업데이트는 지정한 작업에 하나의 호출만 발생할 수 있습니다.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:name">동작을 바인딩할 속성의 이름입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_p:action">속성 값이 변경된 경우 비동기적으로 호출할 함수입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.bind_returnValue">이 개체는 반환됩니다.</msg>
  <msg name="WinJS.Binding.Template.constructor">다시 사용할 수 있는 선언적 바인딩 요소를 제공하는 템플릿을 만듭니다.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:element">템플릿으로 변환할 DOM 요소입니다.</msg>
  <msg name="WinJS.Binding.Template.constructor_p:options">이 매개 변수를 제공하면 템플릿이 URI에서 로드되고 요소 매개 변수 내용이 무시됩니다.</msg>
  <msg name="WinJS.Binding.Template.bindingInitializer">이 항목을 지정하는 경우 이 함수는 데이터 바인딩을 명시적으로 지정하지 않는 기본 이니셜라이저로 사용됩니다. 제공된 함수는 처리가 지원되는 것으로 표시해야 합니다.</msg>
  <msg name="WinJS.Binding.Template.debugBreakOnRender">처음 렌더링할 때 템플릿이 디버거를 중단해야 하는지 여부를 나타냅니다.</msg>
  <msg name="WinJS.Binding.Template.disableOptimizedProcessing">클래식 템플릿 처리 및 데이터 바인딩을 복원하고 템플릿 컴파일을 비활성화하려면 이 속성을 true로 설정합니다.</msg>
  <msg name="WinJS.Binding.Template.element">템플릿에 사용되는 DOM 요소를 가져옵니다.</msg>
  <msg name="WinJS.Binding.Template.extractChild">모든 템플릿 콘텐츠를 호스팅하는 래퍼 요소 대신 템플릿의 첫 번째 요소 자식을 반환합니다.</msg>
  <msg name="WinJS.Binding.Template.processTimeout">선언적 컨트롤 인스턴스화를 연기하는 밀리초 수입니다. 영(0)은 지연이 발생하지 않으며 모든 음수는 setImmediate 지연이 이루어지며 양수는 밀리초 수로 처리됩니다.</msg>
  <msg name="WinJS.Binding.Template.render">지정된 데이터 컨텍스트에서 지정된 루트의 후손이며 선언적 바인딩 특성(데이터-win-바인딩)을 갖는 요소에 값을 바인딩합니다.</msg>
  <msg name="WinJS.Binding.Template.render_p:dataContext">기본 데이터 바인딩에 사용되는 개체입니다.</msg>
  <msg name="WinJS.Binding.Template.render_p:container">렌더링된 템플릿에 추가할 수 있는 요소입니다. 이 매개 변수를 생략하면 새 DIV가 만들어집니다.</msg>
  <msg name="WinJS.Binding.Template.render_returnValue">바인딩 후에 완료되는 목표를 달성했습니다. 컨테이너 매개 변수나 만들어진 DIV에 지정된 요소의 값입니다.</msg>
  <msg name="WinJS.Binding.Template.renderItem">항목에 포함된 데이터 바인딩이 템플릿의 인스턴스를 렌더링합니다. 재활용된 매개 변수가 있고, enableRecycling이 true인 경우 재생된 매개 변수에서 DOM 요소를 다시 사용하려고 합니다.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:item">바인딩할 데이터를 포함하는 개체입니다. Item.data만 필수 요소입니다.</msg>
  <msg name="WinJS.Binding.Template.renderItem_p:recycled">이전에 생성된 템플릿 인스턴스입니다.</msg>
  <msg name="WinJS.Binding.Template.renderItem_returnValue">DOM 요소입니다.</msg>
  <msg name="WinJS.Binding.Template">다시 사용할 수 있는 선언적 바인딩 요소를 제공합니다.</msg>
  <msg name="WinJS.Binding.Template_name">템플릿</msg>
  <msg name="WinJS.Binding.List.constructor">WinJS.Binding.List 개체를 만듭니다.</msg>
  <msg name="WinJS.Binding.List.constructor_p:list">목록을 초기화하는 요소가 들어 있는 배열입니다.</msg>
  <msg name="WinJS.Binding.List.constructor_p:options">Options.binding이 true인 경우 목록은 요소 값에서 WinJS.Binding.as()를 호출한 결과를 포함합니다. Options.proxy가 true인 경우 첫 번째 매개 변수로 지정된 목록은 WinJS.Binding.List에 대한 저장소로 사용됩니다. 이 옵션은 편집 데이터 저장소에 오류가 발생할 수 있으므로 신중하게 사용해야 합니다.</msg>
  <msg name="WinJS.Binding.List.constructor_returnValue">새로 생성된 WinJS.Binding.List 인스턴스입니다.</msg>
  <msg name="WinJS.Binding.List.length">목록에 정의된 최고값보다 높은 정수인 목록 길이를 설정하거나 가져옵니다.</msg>
  <msg name="WinJS.Binding.List.getItem">지정된 목록에 대한 인덱스 키/데이터 쌍을 가져옵니다.</msg>
  <msg name="WinJS.Binding.List.getItem_p:index">검색할 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.getItem_returnValue">.key 및 .data 속성이 있는 개체입니다.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey">지정된 목록 항목 키에 대한 인덱스 키/데이터 쌍을 가져옵니다.</msg>
  <msg name="WinJS.Binding.List.getItemFromKey_p:key">검색할 값의 키입니다.</msg>
  <msg name="WinJS.Binding.List.indexOfKey">목록에서 키가 처음으로 나오는 경우의 인덱스를 가져옵니다.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_p:key">목록에서 찾을 키입니다.</msg>
  <msg name="WinJS.Binding.List.indexOfKey_returnValue">목록에 있는 지정된 키가 맨 처음 발견되거나 찾을 수 없을 경우 -1인 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.move">지정된 위치에 있는 인덱스의 값으로 이동합니다.</msg>
  <msg name="WinJS.Binding.List.move_p:index">값의 원래 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.move_p:newIndex">이동한 후의 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.notifyMutated">목록이 지정된 인덱스에서 값에 대한 모든 수신기에게 itemmutated 알림을 강제로 전송합니다.</msg>
  <msg name="WinJS.Binding.List.notifyMutated_p:index">변경된 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.setAt">지정된 인덱스에 있는 값을 새 값으로 바꿉니다.</msg>
  <msg name="WinJS.Binding.List.setAt_p:index">대체된 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.List.setAt_p:newValue">새 값입니다.</msg>
  <msg name="WinJS.Binding.List.reverse">요소들이 역으로 나열된 목록을 반환합니다. 이 메서드는 목록 개체 요소를 역으로 나열합니다. 실행 도중 새 목록 개체를 만들지 않습니다.</msg>
  <msg name="WinJS.Binding.List.reverse_returnValue">역순 목록입니다.</msg>
  <msg name="WinJS.Binding.List.sort">요소들이 정렬된 목록을 반환합니다. 이 메서드는 목록 개체 요소를 정렬합니다. 실행 도중 새 목록 개체를 만들지 않습니다.</msg>
  <msg name="WinJS.Binding.List.sort_p:sortFunction">요소 순서를 결정하는 데 사용되는 함수입니다. 인수를 생략하면 요소가 오름차순, ASCII 문자 순서로 정렬됩니다.</msg>
  <msg name="WinJS.Binding.List.sort_returnValue">정렬된 목록입니다.</msg>
  <msg name="WinJS.Binding.List.pop">목록의 마지막 요소를 제거하여 반환합니다.</msg>
  <msg name="WinJS.Binding.List.pop_returnValue">목록의 마지막 요소입니다.</msg>
  <msg name="WinJS.Binding.List.push">목록에 새 요소를 추가하고 목록의 새 길이를 반환합니다.</msg>
  <msg name="WinJS.Binding.List.push_p:value">목록 끝에 삽입할 요소입니다.</msg>
  <msg name="WinJS.Binding.List.push_returnValue">목록의 새 길이입니다.</msg>
  <msg name="WinJS.Binding.List.shift">목록에서 첫 번째 요소를 제거하여 반환합니다.</msg>
  <msg name="WinJS.Binding.List.shift_returnValue">목록의 첫 번째 요소입니다.</msg>
  <msg name="WinJS.Binding.List.unshift_p:value">목록 처음에 삽입할 요소입니다.</msg>
  <msg name="WinJS.Binding.List.splice">목록에서 첫 번째 요소를 제거하고, 필요하면 그 자리에 새 요소를 삽입한 다음 삭제된 요소를 반환합니다.</msg>
  <msg name="WinJS.Binding.List.splice_p:start">목록에서 요소를 제거할 위치이며 0부터 시작하는 위치입니다.</msg>
  <msg name="WinJS.Binding.List.splice_p:howMany">제거할 요소의 수입니다.</msg>
  <msg name="WinJS.Binding.List.splice_p:item">삭제된 요소 대신 목록에 삽입할 요소입니다.</msg>
  <msg name="WinJS.Binding.List.splice_returnValue">삭제된 요소입니다.</msg>
  <msg name="WinJS.Namespace.defineWithParent">지정된 부모 네임 스페이스에서 지정한 이름을 가진 새 네임 스페이스를 정의합니다.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:parentNamespace">부모 네임 스페이스입니다.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:name">새 네임스페이스의 이름입니다.</msg>
  <msg name="WinJS.Namespace.defineWithParent_p:members">새 네임 스페이스의 멤버입니다.</msg>
  <msg name="WinJS.Namespace.defineWithParent_returnValue">새로 정의된 네임 스페이스입니다.</msg>
  <msg name="WinJS.Namespace.define">지정된 이름이 있는 새 네임 스페이스를 정의합니다.</msg>
  <msg name="WinJS.Namespace.define_p:name">네임스페이스의 이름입니다. 점으로 구분된 중첩된 네임 스페이스 이름일 수 있습니다.</msg>
  <msg name="WinJS.Class.define">주어진 생성자와 지정된 인스턴스 멤버를 사용하여 클래스를 정의합니다.</msg>
  <msg name="WinJS.Class.define_p:constructor">이 클래스를 인스턴스화하는 데 사용되는 생성자 함수입니다.</msg>
  <msg name="WinJS.Class.define_p:instanceMembers">인스턴스 필드, 속성 및 메서드 집합을 클래스에서 사용할 수 있습니다.</msg>
  <msg name="WinJS.Class.define_p:staticMembers">정적 필드, 속성 및 메서드 집합을 클래스에서 사용할 수 있습니다.</msg>
  <msg name="WinJS.Class.define_returnValue">새로 정의된 클래스입니다.</msg>
  <msg name="WinJS.Class.derive">Prototypal 상속을 사용하여 제공된 baseClass 매개 변수를 기반으로 하는 하위 클래스를 만듭니다.</msg>
  <msg name="WinJS.Class.derive_p:baseClass">상속되는 클래스입니다.</msg>
  <msg name="WinJS.Class.derive_p:instanceMembers">인스턴스 필드, 속성 및 메서드 집합을 클래스에서 사용할 수 있습니다.</msg>
  <msg name="WinJS.Class.derive_p:staticMembers">정적 필드, 속성 및 메서드 집합을 클래스에서 사용할 수 있습니다.</msg>
  <msg name="WinJS.Class.mix">주어진 생성자와 인스턴스 멤버를 모두 mixin 개체에 의해 지정된 집합의 합집합을 사용하여 클래스를 정의합니다. Mixin 매개 변수 목록은 변수 길이입니다.</msg>
  <msg name="WinJS.Utilities.hasWinRT">WinRT가 스크립트의 컨텍스트에서 액세스할 수 있는지 확인합니다.</msg>
  <msg name="WinJS.Utilities.getMember">리프 수준 형식 또는 name 매개 변수에 의해 지정된 네임 스페이스를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getMember_p:name">멤버의 이름입니다.</msg>
  <msg name="WinJS.Utilities.getMember_p:root">시작하려는 루트입니다. 기본값은 전역 개체입니다.</msg>
  <msg name="WinJS.Utilities.getMember_returnValue">리프 수준 형식 또는 name 매개 변수에 의해 지정된 네임 스페이스를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.ready">현재 페이지에 대한 DOMContentLoaded 이벤트를 발생한 후에만 지정된 함수를 실행할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.ready_returnValue">DOMContentLoaded가 발생한 후에 완료에 대한 약속입니다.</msg>
  <msg name="WinJS.Utilities.ready_p:callback">DOMContentLoaded가 발생한 후에 실행하는 함수입니다.</msg>
  <msg name="WinJS.Utilities.ready_p:async">true이면 콜백이 비동기적으로 실행됩니다.</msg>
  <msg name="WinJS.Utilities.strictProcessing">엄격한 선언적 처리가 스크립트의 컨텍스트에서 사용할 수 있는지를 결정합니다.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing">WinJS.UI.processAll 또는 WinJS.Binding.processAll과 같은 선언적 처리와 호환되는 함수를 표시합니다.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_p:func">선언적 처리와 호환되는 함수로 표시합니다.</msg>
  <msg name="WinJS.Utilities.markSupportedForProcessing_returnValue">입력 함수입니다.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing">WinJS.UI.processAll 또는 WinJS.Binding.processAll과 같은 선언적 처리와 호환되는 값을 어설션합니다. 호환되지 않으면 예외가 throw됩니다.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_p:value">선언적 처리와의 호환성을 테스트하는 값입니다. 값이 함수인 경우 속성 'supportedForProcessing'이 true 값으로 표시되어야 합니다.</msg>
  <msg name="WinJS.Utilities.requireSupportedForProcessing_returnValue">입력 값입니다.</msg>
  <msg name="WinJS.strictProcessing">엄격한 처리는 항상 적용되며 이 메서드는 효과가 없습니다.</msg>
  <msg name="WinJS.Utilities.isPhone">현재 Phone에서 실행 중인지 확인합니다.</msg>
  <msg name="WinJS.Utilities.formatLog">태그 및 형식 로깅 메시지를 추가합니다.</msg>
  <msg name="WinJS.Utilities.startLog_p:message">형식을 지정할 메시지입니다.</msg>
  <msg name="WinJS.Utilities.startLog_p:tag">메시지에 적용할 태그입니다. 태그가 여러 개인 경우 공백을 사용하여 구분합니다.</msg>
  <msg name="WinJS.Utilities.startLog_p:type">메시지의 형식입니다.</msg>
  <msg name="WinJS.Utilities.startLog_returnValue">서식이 지정된 메시지입니다.</msg>
  <msg name="WinJS.Utilities.startLog">Console.log에 WinJS.log에서 지정된 태그를 포함하는 메시지 작성을 구성합니다.</msg>
  <msg name="WinJS.Utilities.startLog_p:options">로그 메시지에 대한 태그입니다. 태그가 여러 개인 경우 공백을 사용하여 구분합니다.</msg>
  <msg name="WinJS.Utilities.startLog2">WinJS.log 출력 작성을 구성합니다.</msg>
  <msg name="WinJS.Utilities.startLog_p:options2">.type, .tags, .excludeTags 및 .action 속성이 포함될 수 있습니다. - .type은 필수 태그입니다. - .excludeTags는 공백으로 구분된 태그 목록이며 아무런 메시지가 기록되지 않습니다. - .tags는 공백으로 구분된 태그 목록이며 메시지가 기록됩니다. - .action은 있을 경우 로그 메시지, 태그 및 형식으로 호출되는 함수입니다. 기본값은 콘솔에 기록하는 것입니다.</msg>
  <msg name="WinJS.Utilities.stopLog">이전에 설정한 로거를 제거합니다.</msg>
  <msg name="WinJS.Utilities.createEventProperties">함수에 전달된 각 이름에 대한 속성을 가진 개체를 만듭니다.</msg>
  <msg name="WinJS.Utilities.createEventProperties_p:events">속성 이름의 변수 목록입니다.</msg>
  <msg name="WinJS.Utilities.createEventProperties_returnValue">지정된 속성이 있는 개체입니다. 속성의 이름은 'on'에서 접두사로 지정됩니다.</msg>
  <msg name="WinJS.Utilities.eventMixin.addEventListener_p:useCapture">true이면 캡처를 초기화하고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent">지정된 형식과 지정된 추가 속성의 이벤트를 발생합니다.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_p:details">이벤트가 발생하면 이벤트 개체에 첨부하는 추가 속성 집합이 있습니다.</msg>
  <msg name="WinJS.Utilities.eventMixin.dispatchEvent_returnValue">preventDefault가 이벤트로 호출될 경우 true입니다.</msg>
  <msg name="WinJS.Utilities.eventMixin.removeEventListener_p:useCapture">캡처를 시작할 것인지 여부를 지정합니다.</msg>
  <msg name="WinJS.Resources.addEventListener">지정된 이벤트에 대한 이벤트 처리기를 등록합니다.</msg>
  <msg name="WinJS.Resources.addEventListener_p:type">처리할 이벤트 이름입니다.</msg>
  <msg name="WinJS.Resources.addEventListener_p:listener">이벤트가 발생할 때 호출하는 수신기입니다.</msg>
  <msg name="WinJS.Resources.addEventListener_p:useCapture">캡처 단계에 대한 이벤트 처리기를 등록하려면 true로 설정 합니다. 버블링 단계에 대한 등록은 false로 설정합니다.</msg>
  <msg name="WinJS.Resources.getString">지정된 리소스 ID가 리소스 문자열을 검색합니다.</msg>
  <msg name="WinJS.Resources.getString._p:resourceId">검색할 문자열의 리소스 ID입니다.</msg>
  <msg name="WinJS.Resources.getString_returnValue">이러한 속성을 포함할 수 있는 개체: 값: 요청된 문자열 값입니다. 이 속성은 항상 존재합니다. 비어 있음: 요청한 문자열을 찾을 수 없을지의 여부를 지정하는 값입니다. True일 경우 문자열을 찾을 수 없습니다. False이거나 지정되지 않을 경우 요청한 문자열을 찾을 수 없습니다. lang: 지정될 경우 문자열 언어입니다. 이 속성은 다국어 리소스에만 있습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.retrieveState">스케줄러의 진단 목적 상태의 문자열 표현을 반환합니다. 작업 및 드레이닝 요청이 현재 처리되어야 하는 순서대로 표시됩니다. 현재 작업 및 드레이닝 요청에 별표가 표시됩니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain">지정된 우선 순위 및 그 이상에 있는 모든 작업이 실행될 때까지 시간 간격 없이 스케줄러의 작업을 실행합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:priority">스케줄러를 드레이닝해야 하는 우선 순위입니다. 기본값은 큐에 있는 모든 작업을 드레이닝하는 Priority.min입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_p:name">진단에 대한 드레이닝 요청의 선택적 설명입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.requestDrain_returnValue">드레이닝이 끝나면 완료되는 약속입니다. 이 약속을 취소하면 드레이닝 요청이 취소됩니다. 이 약속은 오류 상태가 발생하지 않습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh">우선 순위가 높은 컨텍스트에서 지정된 콜백을 실행합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_p:callback">우선 순위가 높은 컨텍스트에서 실행할 콜백입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.execHigh_returnValue">콜백의 반환 값입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken">하나 이상의 작업의 소유자 속성으로 설정할 수 있는 새 소유자 토큰을 만들고 반환합니다. 그런 다음 "소유하는" 모든 작업을 취소하는 데 사용할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.createOwnerToken_returnValue">새 소유자 토큰입니다. 이 토큰을 사용하여 소유하는 작업을 제어할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule">지정된 함수가 비동기적으로 실행되도록 예약합니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:work">예약해야 하는 작업 항목을 나타내는 함수입니다. 작업 항목을 호출하면 작업 항목이 스케줄러에 협조적으로 양보해야 하는지를 물을 수 있는 JobInfo 개체를 첫 번째 인수로 받습니다. 이 경우 작업 항목은 연속 작업으로 실행될 함수를 제공하거나 완료 시 연속 작업으로 실행될 함수를 제공하는 WinJS.Promise를 제공할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:priority">작업 항목을 예약할 우선 순위입니다. 기본값은 Priority.normal입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:thisArg">작업 항목에 바인딩해야 할 '이' 인스턴스입니다. 기본값은 null입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_p:name">진단용 작업 항목에 대한 설명입니다. 기본값은 빈 문자열입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedule_returnValue">이 작업 항목을 나타내는 작업 인스턴스입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise">반환되는 약속을 완료할 작업을 예약합니다. 이 메서드는 일반적으로 사용되는 우선 순위에 대해 네 가지 버전, 즉, schedulePromiseAboveNormal, schedulePromiseNormal, schedulePromiseBelowNormal 및 schedulePromiseIdle이 있습니다. 약속 체인의 마지막 링크가 높은 우선 순위의 스케줄러, asyncOp().then(Scheduler.schedulePromiseHigh).then(function (valueOfAsyncOp) { });에서 실행되도록 보장하는 방법을 보여 주는 예제 사용법입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:promiseValue">반환된 약속이 완료되는 값입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_p:jobName">진단 목적을 위해 작업을 설명하는 문자열입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.schedulePromise_returnValue">원하는 우선 순위의 작업 안에서 완료되는 약속입니다.</msg>
  <msg name="WinJS.Utilities.Scheduler.currentPriority">호출자가 실행 중인 현재 우선 순위 가져옵니다.</msg>
  <msg name="WinJS.xhr">XMLHttpRequest 호출에 대한 약속에 호출을 래핑합니다.</msg>
  <msg name="WinJS.xhr_p:options">XMLHttpRequest 개체에 적용되는 옵션입니다. 이는 형식, url, 사용자, 암호, 헤더, responseType, 데이터 및 customRequestInitializer입니다.</msg>
  <msg name="WinJS.xhr_returnValue">완료되면 XMLHttpRequest 개체를 반환하는 약속입니다.</msg>
  <msg name="WinJS.xhr.constructor._returnValue"></msg>
  <msg name="WinJS.Utilities.setInnerHTML">지정된 요소의 innerHTML 속성을 지정된 텍스트에 설정합니다.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:element">innerHTML 속성이 설정될 요소입니다.</msg>
  <msg name="WinJS.Utilities.setInnerHTML_p:text">innerHTML 속성에 설정될 값입니다.</msg>
  <msg name="WinJS.Utilities.setOuterHTML">지정된 요소의 outerHTML 속성을 지정된 텍스트에 설정합니다.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:element">outerHTML 속성이 설정될 요소입니다.</msg>
  <msg name="WinJS.Utilities.setOuterHTML_p:text">outerHTML 속성에 설정될 값입니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML">insertAdjacentHTML에서 지정된 요소를 호출합니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:element">어떤 insertAdjacentHTML 요소는 호출할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:position">삽입할 HTML 요소에 상대적인 위치입니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTML_p:text">insertAdjacentHTML에서 제공되는 값입니다.</msg>
  <msg name="WinJS.Utilities.setOuterHTMLUnsafe">msWWA.execUnsafeLocalFunction의 컨텍스트에서 지정된 텍스트에 지정된 요소의 outerHTML 속성을 설정합니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe">InsertAdjacentHTML Mswwa.execUnsafeLocalFunction의 컨텍스트에서 지정 된 요소는 호출합니다.</msg>
  <msg name="WinJS.Utilities.insertAdjacentHTMLUnsafe_p:text">insertAdjacentHTML에 제공된 값입니다.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setInnerHTML">msIsStaticHTML 검사를 통과하면 요소의 innerHTML 속성에 지정된 텍스트를 설정합니다.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.setOuterHTML">msIsStaticHTML 검사를 통과하면 요소의 outerHTML 속성에 지정된 텍스트를 설정합니다.</msg>
  <msg name="WinJS.Utilities.msIsStaticHTML.insertAdjacentHTML">msIsStaticHTML 검사를 통과하면 insertAdjacentHTML 요소를 호출합니다.</msg>
  <msg name="WinJS.Utilities.markDisposable">지정된 dispose 구현을 지정된 요소에 추가하고 삭제 가능으로 표시합니다.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:element">삭제 가능으로 표시할 요소입니다.</msg>
  <msg name="WinJS.Utilities.markDisposable_p:disposeImpl">dispose 함수에서 호출할 요소별 dispose 논리가 포함된 함수입니다.</msg>
  <msg name="WinJS.Utilities.disposeSubTree">지정된 요소의 하위 항목인 1세대 삭제 가능 요소를 모두 삭제합니다. 지정된 요소 자체는 삭제할 수 없습니다.</msg>
  <msg name="WinJS.Utilities.disposeSubTree_p:element">하위 트리를 삭제해야 하는 루트 요소입니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions">지정된 컨트롤 집합에 선언적으로 지정된 옵션(속성 및 이벤트)을 추가합니다. 옵션 속성의 이름이 "on"으로 시작하는 경우 속성 값 함수이며 addEventListener 컨트롤을 지원합니다. setOptions 메서드는 컨트롤에 addEventListener 메서드를 호출합니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:control">속성 및 이벤트가 적용되는 컨트롤입니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.setOptions_p:options">선언적으로 지정하는 옵션의 집합입니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.addEventListener_p:useCapture">true이면 캡처를 시작하고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent">지정된 형식과 지정된 추가 속성을 추가하는 이벤트를 발생합니다.</msg>
  <msg name="WinJS.UI.DOMEventMixin.dispatchEvent_returnValue">preventDefault가 이벤트로 호출될 경우 true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.UI.select.createSelect">문서의 루트 요소에서 지정된 DOM 트리를 안내하고, 선택 범위 선택기를 발견할 때마다 선택기를 지정된 문자열에 대한 해당 범위 내에서 조회합니다. 일치하는 첫 번째 요소를 반환합니다.</msg>
  <msg name="WinJS.UI.select.createSelect_p:selector">선택기 문자열입니다.</msg>
  <msg name="WinJS.UI.select.createSelect_returnValue">있을 경우 대상 요소입니다.</msg>
  <msg name="WinJS.UI.processAll">지정한 루트 요소부터 출발하는 모든 요소를 선언적 컨트롤 바인딩에 적용합니다.</msg>
  <msg name="WinJS.UI.processAll_p:rootElement">바인딩을 적용하기 시작하는 요소입니다. 이 매개 변수를 지정하지 않으면 바인딩은 전체 문서에 적용됩니다.</msg>
  <msg name="WinJS.UI.processAll_p:skipRoot">True이면 요소에 지정한 루트 요소를 생략하고 자식만 포함합니다.</msg>
  <msg name="WinJS.UI.processAll_returnValue">약속을 바인딩할 때 수행되는 모든 컨트롤에 적용되었습니다.</msg>
  <msg name="WinJS.UI.process">선언적 컨트롤 바인딩을 지정된 요소에 적용합니다.</msg>
  <msg name="WinJS.UI.process_p:element">바인딩할 요소입니다.</msg>
  <msg name="WinJS.UI.process_returnValue">컨트롤이 활성화된 후에 수행되는 약속입니다. 약속 값은 요소에 연결된 컨트롤입니다.</msg>
  <msg name="WinJS.Utilities.query">지정한 요소나 전체 문서의 쿼리 선택기를 실행합니다.</msg>
  <msg name="WinJS.Utilities.query_p:query">실행할 쿼리 선택기입니다.</msg>
  <msg name="WinJS.Utilities.query_p:element">쿼리를 실행할 요소입니다. 이 매개 변수를 지정하지 않으면 쿼리는 전체 문서에 실행됩니다.</msg>
  <msg name="WinJS.Utilities.query_returnValue">쿼리 작업 결과를 포함하는 QueryCollection입니다.</msg>
  <msg name="WinJS.Utilities.id">요소 ID별로 조회하고 QueryCollection 결과를 래핑합니다.</msg>
  <msg name="WinJS.Utilities.id_p:id">요소 ID입니다.</msg>
  <msg name="WinJS.Utilities.id_returnValue">발견되면 QueryCollection은 요소를 포함합니다.</msg>
  <msg name="WinJS.Utilities.children">지정된 부모 요소의 자식을 포함하 QueryCollection을 만듭니다.</msg>
  <msg name="WinJS.Utilities.children_p:element">부모 요소입니다.</msg>
  <msg name="WinJS.Utilities.children_returnValue">요소의 자식을 포함하는 QueryCollection입니다.</msg>
  <msg name="WinJS.Utilities.Key">키보드 값 집합을 정의합니다.</msg>
  <msg name="WinJS.Utilities.Key.backspace">BACKSPACE 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.tab">TAB 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.enter">ENTER 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.shift">Shift 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.ctrl">CTRL 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.alt">ALT 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.pause">일시 중지 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.capsLock">CAPS LOCK 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.escape">ESCAPE 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.space">SPACE 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.pageUp">PAGE UP 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.pageDown">PAGE DOWN 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.end">END 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.home">HOME 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.leftArrow">왼쪽 화살표 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.upArrow">위쪽 화살표 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.rightArrow">오른쪽 화살표 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.downArrow">아래쪽 화살표 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.insert">INSERT 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.deleteKey">DELETE 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num0">0 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num1">1 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num2">2 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num3">3 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num4">4 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num5">5 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num6">6 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num7">7 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num8">8 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.num9">9 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.a">A 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.b">B 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.c">C 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.d">D 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.e">E 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.f">F 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.g">G 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.h">H 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.i">I 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.j">J 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.k">K 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.l">L 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.m">M 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.n">N 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.o">O 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.p">P 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.q">Q 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.r">R 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.s">S 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.t">T 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.u">U 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.v">V 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.w">W 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.x">X 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.y">Y 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.z">Z 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.leftWindows">왼쪽 Windows 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.rightWindows">오른쪽 Windows 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.menu">메뉴 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad0">숫자 패드의 0 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad1">숫자 패드의 1 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad2">숫자 패드의 2 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad3">숫자 패드의 3 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad4">숫자 패드의 4 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad5">숫자 패드의 5 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad6">숫자 패드의 6 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad7">숫자 패드의 7 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad8">숫자 패드의 8 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numPad9">숫자 패드의 9 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.multiply">곱하기 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.add">더하기 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.subtract">빼기 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.decimalPoint">소수점 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.divide">나누기 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F1">F1 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F2">F2 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F3">F3 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F4">F4 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F5">F5 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F6">F6 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F7">F7 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F8">F8 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F9">F9 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F10">F10 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F11">F11 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.F12">F12 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.numLock">NUMBER LOCK 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.scrollLock">SCROLL LOCK 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.browserBack">브라우저의 뒤로 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.browserForward">브라우저의 앞으로 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.semicolon">SEMICOLON 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.equal">EQUAL 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.comma">COMMA 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.dash">DASH 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.period">PERIOD 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.forwardSlash">FORWARD SLASH 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.graveAccent">억음 악센트 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.openBracket">OPEN BRACKET 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.backSlash">BACKSLASH 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.closeBracket">CLOSE BRACKET 키입니다.</msg>
  <msg name="WinJS.Utilities.Key.singleQuote">SINGLE QUOTE 키입니다.</msg>
  <msg name="WinJS.Utilities.data">지정된 요소와 관련된 데이터 값을 가져옵니다.</msg>
  <msg name="WinJS.Utilities.data_p:element">요소입니다.</msg>
  <msg name="WinJS.Utilities.data_returnValue">요소와 연결된 값입니다.</msg>
  <msg name="WinJS.Utilities.hasClass">지정된 요소가 지정된 클래스가 있는지 여부를 결정합니다.</msg>
  <msg name="WinJS.Utilities.hasClass_returnValue">지정된 요소가 클래스를 포함하고 있으면 true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.Utilities.addClass">지정된 요소를 지정된 클래스에 추가합니다. 공백으로 구분된 이름을 사용하여 여러 클래스를 추가할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.addClass_p:e">클래스에 추가할 요소입니다.</msg>
  <msg name="WinJS.Utilities.addClass_p:name">추가할 클래스 이름은 공백으로 구분된 이름을 사용하여 여러 클래스를 추가할 수 있습니다.</msg>
  <msg name="WinJS.Utilities.removeClass">지정된 요소에서 지정된 클래스를 제거합니다.</msg>
  <msg name="WinJS.Utilities.removeClass_p:e">클래스를 제거할 요소입니다.</msg>
  <msg name="WinJS.Utilities.removeClass_p:name">제거할 클래스의 이름입니다.</msg>
  <msg name="WinJS.Utilities.toggleClass">지정된 요소에서 지정된 클래스를 토글(추가 또는 제거)합니다. 클래스에 있으면 제거됩니다. 하나라도 없으면 추가됩니다.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:e">클래스를 토글할 요소입니다.</msg>
  <msg name="WinJS.Utilities.toggleClass_p:name">토글할 클래스 이름입니다.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft">지정된 부모를 기준으로 지정된 요소의 왼쪽 좌표를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getRelativeLeft_returnValue">상대적 왼쪽 좌표입니다.</msg>
  <msg name="WinJS.Utilities.getRelativeTop">지정된 부모를 기준으로 지정된 요소의 위쪽 좌표를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getRelativeTop_returnValue">상대적 위쪽 좌표입니다.</msg>
  <msg name="WinJS.Utilities.empty">지정된 요소에서 모든 자식 노드를 제거합니다.</msg>
  <msg name="WinJS.Utilities.getContentWidth">지정된 요소의 내용의 너비를 가져옵니다. 콘텐츠 너비는 테두리 또는 패딩을 포함하지 않습니다.</msg>
  <msg name="WinJS.Utilities.getContentWidth_returnValue">요소의 콘텐츠 너비입니다.</msg>
  <msg name="WinJS.Utilities.getTotalWidth">여백을 포함한 요소의 너비를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getTotalWidth_returnValue">요소의 너비는 여백을 포함합니다.</msg>
  <msg name="WinJS.Utilities.getContentHeight">지정된 요소의 내용의 높이를 가져옵니다. 콘텐츠 높이는 테두리 또는 패딩을 포함하지 않습니다.</msg>
  <msg name="WinJS.Utilities.getContentHeight_returnValue">요소의 콘텐츠 높이입니다.</msg>
  <msg name="WinJS.Utilities.getTotalHeight">여백을 포함한 요소의 높이를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getTotalHeight_returnValue">여백을 포함한 요소의 높이입니다.</msg>
  <msg name="WinJS.Utilities.getPosition">지정된 요소의 위치를 가져옵니다.</msg>
  <msg name="WinJS.Utilities.getPosition_returnValue">요소의 왼쪽, 위쪽, 너비 및 높이 속성을 포함하는 개체입니다.</msg>
  <msg name="WinJS.Utilities.convertToPixels">CSS 위치에 지정된 요소에 대한 문자열을 변환합니다.</msg>
  <msg name="WinJS.Utilities.convertToPixels_p:value">CSS 위치 문자열입니다.</msg>
  <msg name="WinJS.Utilities.convertToPixels_returnValue">픽셀 수입니다.</msg>
  <msg name="WinJS.Utilities.eventWithinElement">지정된 요소 내에 지정된 클래스가 있는지 여부를 결정합니다.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_p:event">이벤트입니다.</msg>
  <msg name="WinJS.Utilities.eventWithinElement_returnValue">이벤트가 요소 내에 나타나면 true이고 그렇지 않으면 false입니다.</msg>
  <msg name="WinJS.UI.Pages.dispose">이 페이지를 삭제합니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.load">지정된 URI에서 DOM 요소의 복사본을 만듭니다. 로드가 있는 페이지 데이를 재정의하려면 WinJS.UI.Pages.render()를 호출하기 전에 WinJS.UI.Pages.define()을 호출하여 정의해야 하는 요구를 재정의합니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_p:uri">DOM 요소를 복사할 URI입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.load_returnValue">비동기 처리가 필요할 경우 충족된 값의 약속은 부모가 아닌 DOM 요소의 집합입니다. 그렇지 않으면 아무 것도 반환하지 않습니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.init">컨트롤의 내용을 설정하기 전에 컨트롤을 초기화합니다. 모든 초기화에 대한 진행된 메서드 사용은 컨트롤의 콘텐츠가 설정된 후에 완료되어야 합니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:element">페이지의 모든 내용을 포함하는 DOM 요소입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_p:options">페이지 생성자로 전달되는 옵션입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.init_returnValue">비동기 처리해야 하는 경우 초기화가 완료될 때 수행되는 약속입니다. 그렇지 않으면 아무 것도 반환하지 않습니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed">컨트롤의 내용을 설정한 후에 컨트롤을 초기화합니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.processed_p:options">페이지 생성자로 전달되는 옵션입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.render">일반적으로 컨트롤을 loadResult 매개 변수에 지정된 요소에 지정된 요소를 추가하여 렌더링합니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:options">페이지 생성자로 전달되는 옵션입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_p:loadResult">요소가 로드 메서드에서 반환됩니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.render_returnValue">비동기 처리해야 하는 경우 렌더링이 완료될 때 수행되는 약속입니다. 그렇지 않으면 아무 것도 반환하지 않습니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready">모든 초기화 및 렌더링이 완료된 후에 호출됩니다. 지금 요소를 사용할 수 있습니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:element">페이지의 모든 내용을 포함하는 DOM 요소입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.ready_p:options">페이지 생성자로 전달되는 옵션입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.error">페이지를 처리하는 동안 오류가 발생하면 호출됩니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_p:err">발생한 오류입니다.</msg>
  <msg name="WinJS.UI.Pages._mixin.error_returnValue">오류가 처리될 경우 아무 것도 반환하지 않고 처리되지 않을 경우 오류 약속을 반환합니다.</msg>
  <msg name="WinJS.UI.Pages.define">지정된 멤버를 포함하는 지정된 URI에서 새 페이지 컨트롤을 만듭니다. 여러 호출에 동일한 URI에 대해 이 메서드를 사용할 수 있으며 모든 구성원이 병합됩니다.</msg>
  <msg name="WinJS.UI.Pages.define_p:uri">페이지를 정의하는 내용에 대한 URI입니다.</msg>
  <msg name="WinJS.UI.Pages.define_p:members">컨트롤이 있는 추가 멤버입니다.</msg>
  <msg name="WinJS.UI.Pages.define_returnValue">생성자 함수는 페이지를 만듭니다.</msg>
  <msg name="WinJS.UI.Pages.get">지정된 URI에 대한 미리 정의된 페이지 컨트롤을 가져오거나 새 페이지를 만듭니다.</msg>
  <msg name="WinJS.UI.Pages.render">지정된 옵션과 함께 지정된 요소 안에 있는 지정된 URI에서 페이지 컨트롤을 만듭니다.</msg>
  <msg name="WinJS.UI.Pages.render_p:element">페이지와 함께 채울 요소입니다.</msg>
  <msg name="WinJS.UI.Pages.render_p:options">페이지를 구성하는 옵션입니다.</msg>
  <msg name="WinJS.UI.Pages.render_p:parentedPromise">최종 문서에 지정된 요소가 부모로 지정되면 약속이 충족됩니다.</msg>
  <msg name="WinJS.UI.Pages.render_returnValue">페이지에서 렌더링이 완료된 경우 약속이 충족됩니다.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy">지정된 URI 내용을 지정된 요소에 복사합니다.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:href">URI에는 복사할 조각이 포함되어 있습니다.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_p:target">조각이 추가된 요소입니다.</msg>
  <msg name="WinJS.UI.Fragments.renderCopy_returnValue">조각이 로드된 경우 약속이 충족됩니다. 대상 요소를 지정하지 않으면 복사한 조각은 완성된 값이 됩니다.</msg>
  <msg name="WinJS.UI.Fragments.cache">지정된 위치에 조각 로드를 시작합니다. 조각을 복사할 준비가 되면 반환된 약속을 완료합니다.</msg>
  <msg name="WinJS.UI.Fragments.cache_p:href">복사할 조각이 포함된 URI입니다.</msg>
  <msg name="WinJS.UI.Fragments.cache_returnValue">조각이 복사할 준비가 되었을 경우 약속이 충족됩니다.</msg>
  <msg name="WinJS.UI.Fragments.clearCache">지정된 조각에 대한 캐시된 정보를 제거합니다. 이 메서드는 조각에서 참조하는 스크립트 또는 조각에서 언로드되지 않습니다.</msg>
  <msg name="WinJS.UI.Fragments.clearCache_p:href">제거할 조각이 포함된 URI입니다. URI가 제공되지 않을 경우 모든 캐시 내용이 제거됩니다.</msg>
  <msg name="WinJS.UI.isAnimationEnabled">WinJS 애니메이션 라이브러리 애니메이션을 수행하는지 여부를 결정합니다.</msg>
  <msg name="WinJS.UI.isAnimationEnabled_returnValue">WinJS 애니메이션을 수행하는 경우 true입니다. WinJS 애니메이션을 억제하는 경우 false입니다.</msg>
  <msg name="WinJS.UI.disableAnimations">애니메이션 활성 개수를 감소시켜 WinJS 애니메이션 라이브러리에 있는 애니메이션을 불가능하게 합니다.</msg>
  <msg name="WinJS.UI.enableAnimations">애니메이션 활성 개수를 증가시켜 WinJS 애니메이션 라이브러리에 있는 애니메이션을 가능하게 합니다.</msg>
  <msg name="WinJS.UI.executeAnimation">다른 애니메이션 라이브러리 애니메이션과 함께 사용할 수 있는 CSS 애니메이션을 수행합니다. 이 기능을 직접 호출할 수 없는 응용 프로그램은 애니메이션 라이브러리에 있는 고급 애니메이션을 사용해야 합니다.</msg>
  <msg name="WinJS.UI.executeAnimation_p:element">단일 요소 또는 CSS 애니메이션을 수행하는 요소의 컬렉션입니다.</msg>
  <msg name="WinJS.UI.executeAnimation_p:animation">단일 애니메이션 설명 또는 애니메이션 설명의 배열입니다.</msg>
  <msg name="WinJS.UI.executeAnimation_returnValue">CSS 애니메이션이 완료되면 완료된 약속 개체입니다.</msg>
  <msg name="WinJS.UI.executeTransition">다른 애니메이션 라이브러리 애니메이션과 함께 사용할 수 있는 CSS 전환을 수행합니다. 이 기능을 직접 호출할 수 없는 응용 프로그램은 애니메이션 라이브러리에 있는 고급 애니메이션을 사용해야 합니다.</msg>
  <msg name="WinJS.UI.executeTransition_p:element">단일 요소 또는 CSS 전환을 수행하는 요소의 컬렉션입니다.</msg>
  <msg name="WinJS.UI.executeTransition_p:transition">단일 전환 설명 또는 전환 설명의 배열입니다.</msg>
  <msg name="WinJS.UI.executeTransition_returnValue">CSS 전환이 완료되면 완료된 약속 개체입니다.</msg>
  <msg name="WinJS.UI.eventHandler">선언적 처리와 호환되는 이벤트 처리기 함수를 표시합니다.</msg>
  <msg name="WinJS.UI.eventHandler_p:handler">선언적 처리와 호환되는 처리기로 표시합니다.</msg>
  <msg name="WinJS.UI.eventHandler_returnValue">입력 처리기입니다.</msg>
  <msg name="WinJS.UI.Orientation">컨트롤의 속성에 대한 방향 옵션입니다.</msg>
  <msg name="WinJS.UI.Orientation.horizontal">Horizontal</msg>
  <msg name="WinJS.UI.Orientation.vertical">세로</msg>
  <msg name="WinJS.Application.event.setPromise">응용 프로그램 개체는 비동기 작업을 수행하고 있고 이 이벤트 처리기는 약속이 완료될 때까지 완료로 간주해서는 안 됩니다.</msg>
  <msg name="WinJS.Application.eventRecord.setPromise_p:promise">대기할 약속입니다.</msg>
  <msg name="WinJS.Application.queueEvent">이벤트 WinJS.Application 이벤트 큐에서 처리되기 위해 큐에 넣습니다.</msg>
  <msg name="WinJS.Application.queueEvent_p:eventRecord">Event 개체를 이벤트 이름으로 WinJS.Application 이벤트 큐에 디스패치할 때 사용되는 형식 속성을 가질 예정입니다. 전체 개체는 이벤트의 detail 속성에 있는 이벤트 수신기에게 제공됩니다.</msg>
  <msg name="WinJS.Application.stop">응용 프로그램 이벤트 처리를 중지하고 WinJS.Application을 초기 상태로 다시 설정합니다.</msg>
  <msg name="WinJS.Application.checkpoint">검사점 이벤트 큐에 넣습니다.</msg>
  <msg name="WinJS.Application.start">WinJS.Application 이벤트 큐에 이벤트 처리를 시작합니다.</msg>
  <msg name="WinJS.Navigation.beforenavigate.setPromise">ListView는 비동기 작업을 수행하고 있고 이 이벤트 처리기는 약속이 완료될 때까지 완료로 간주해서는 안 됩니다.</msg>
  <msg name="WinJS.Navigation.canGoForward">이동 가능한지 여부를 결정합니다.</msg>
  <msg name="WinJS.Navigation.canGoBack">뒤로 이동 가능한지 여부를 결정합니다.</msg>
  <msg name="WinJS.Navigation.location">현재 위치를 가져옵니다.</msg>
  <msg name="WinJS.Navigation.state">탐색 설정을 가져오거나 설정합니다.</msg>
  <msg name="WinJS.Navigation.history">탐색 기록을 가져오거나 설정합니다.</msg>
  <msg name="WinJS.Navigation.forward">앞으로 탐색합니다.</msg>
  <msg name="WinJS.Navigation.forward_p:distance">앞으로 이동할 항목 개수입니다.</msg>
  <msg name="WinJS.Navigation.forward_returnValue">탐색의 성공 여부를 나타내는 값으로 완료에 대한 약속입니다.</msg>
  <msg name="WinJS.Navigation.back">뒤로 탐색합니다.</msg>
  <msg name="WinJS.Navigation.back_p:distance">기록으로 돌아갈 항목 개수입니다.</msg>
  <msg name="WinJS.Navigation.navigate">위치를 탐색합니다.</msg>
  <msg name="WinJS.Navigation.navigate_p:location">탐색할 위치입니다. 일반적으로 위치 문자열이지만 모든 것일 수 있습니다.</msg>
  <msg name="WinJS.Navigation.navigate_p:initialState">탐색 상태는 WinJS.Navigation.state를 통해 액세스할 수 있습니다.</msg>
  <msg name="WinJS.Application.local">액세스는 응용 프로그램 실행 간에 유지되며 로밍하지 않습니다. 응용 프로그램 로컬 저장소에서 파일을 만들 수 있습니다.</msg>
  <msg name="WinJS.Application.temp">파일을 만들려면 응용 프로그램 실행 사이의 시스템에서 확보할 수 있으며 응용 프로그램 임시 저장소에 액세스할 수 있습니다.</msg>
  <msg name="WinJS.Application.roaming">액세스는 응용 프로그램 실행 간에 유지되며 다중 컴퓨터 간의 사용자와 로밍할 수 있습니다. 응용 프로그램 로밍 저장소에서 파일을 만들 수 있습니다.</msg>
  <msg name="WinJS.Binding.observableMixin.notify">속성 값이 업데이트 되었음을 수신기에 알립니다.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:name">업데이트되는 속성 이름입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:newValue">속성의 새 값입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_p:oldValue">속성에 대한 이전 값입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.notify_returnValue">알림이 완료되면 완료되는 약속입니다.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind">지정된 속성에 대한 알림 목록에서 하나 이상의 수신기를 제거합니다.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:name">바인딩 해제할 속성의 이름입니다. 이 매개 변수를 생략하면 모든 이벤트에 대해 모든 수신기가 제거됩니다.</msg>
  <msg name="WinJS.Binding.observableMixin.unbind_p:action">지정된 속성에 대한 수신기 목록에서 제거하는 함수입니다. 이 매개 변수를 생략하면 특정 속성에 대해 모든 수신기가 제거됩니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty">이름으로 속성 값을 가져옵니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_p:name">가져오려는 속성의 이름입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.getProperty_returnValue">관찰 가능한 개체의 속성 값입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty">속성 값이 업데이트되고 수신기에 알립니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:name">업데이트할 속성의 이름입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.setProperty_p:value">속성의 새 값입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty">속성 변경 알림을 ECMAScript5 속성 정의를 포함하여 이 개체에 추가합니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:name">추가할 속성의 이름입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.addProperty_p:value">속성의 값입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.updateProperty_returnValue">이 속성 변경 알림이 처리되면 완료를 약속합니다. 여러 개의 알림을 세그먼트로 결합하면 약속이 취소되거나 약속의 값을 업데이트할 수 있습니다. 약속의 충족된 값은 알림이 완료된 속성의 새 값입니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty">속성 값을 제거합니다.</msg>
  <msg name="WinJS.Binding.dynamicObservableMixin.removeProperty_p:name">제거할 속성의 이름입니다.</msg>
  <msg name="WinJS.Binding.bind">관찰 가능한 개체에서 하나 이상의 속성이나 해당 개체의 자식 값을 바인딩합니다.</msg>
  <msg name="WinJS.Binding.bind_p:observable">바인딩할 개체입니다.</msg>
  <msg name="WinJS.Binding.bind_p:bindingDescriptor">바인딩 선언을 포함하는 개체 리터럴입니다. 바인딩 선언의 형태를 취하합니다: {propertyName: (function | bindingDeclaration), ... } 바인딩 개체의 중첩된 멤버를 다음과 같이 선언합니다. 예를 들어 바인딩(someObject, { address: { street: function(v) {... } } });</msg>
  <msg name="WinJS.Binding.bind_returnValue">최소한 "취소"를 포함하는 개체 필드 함수는 이 바인딩 요청과 관련된 모든 바인딩을 제거합니다.</msg>
  <msg name="WinJS.Binding.expandProperties">모든 속성에 대한 바인딩이 계측되지 않도록 지정한 개체를 래핑합니다. 바인딩 mixin에서 사용할 것입니다.</msg>
  <msg name="WinJS.Binding.expandProperties_p:shape">바인딩할 수 있는 개체에 대한 사양입니다.</msg>
  <msg name="WinJS.Binding.expandProperties_returnValue">개체 바인딩에 대한 유선되는 모든 속성의 집합입니다.</msg>
  <msg name="WinJS.Binding.define">관찰성 지정한 집합의 속성을 지원하는 새 생성자 함수를 만듭니다.</msg>
  <msg name="WinJS.Binding.define_p:data">예를 들어, 속성 집합을 정의하는 패턴으로 사용할 개체: var MyPointClass = define({x:0,y:0});</msg>
  <msg name="WinJS.Binding.define_returnValue">속성의 초기 상태는 선택적 인수를 1로 사용하는 생성자 함수입니다.</msg>
  <msg name="WinJS.Binding.define.return">관찰 가능한 새 개체를 만듭니다.</msg>
  <msg name="WinJS.Binding.define.return_p:init">속성의 초기 값입니다.</msg>
  <msg name="WinJS.Binding.as">관찰 가능한 개체를 반환합니다. 관찰성을 직접 지원하는 경우 이는 기존 프록시인 지정된 개체에 대한 눈에 띄는 프록시이거나 지정된 개체일 수 있습니다.</msg>
  <msg name="WinJS.Binding.as_p:data">개체에 대한 관찰성을 제공합니다.</msg>
  <msg name="WinJS.Binding.as_returnValue">예측 가능한 개체입니다.</msg>
  <msg name="WinJS.Binding.unwrap">지정한 개체가 눈에 띄는 프록시인 경우 원본 개체(관찰이 불가능한)가 반환됩니다.</msg>
  <msg name="WinJS.Binding.unwrap_p:data">원본 값을 검색할 개체입니다.</msg>
  <msg name="WinJS.Binding.unwrap_returnValue">지정한 개체가 눈에 띄는 프록시인 경우 원본 개체가 반환되며 그렇지 않으면 같은 개체가 반환됩니다.</msg>
  <msg name="WinJS.Binding.Template.render.value">URI에 따라 템플릿을 렌더링합니다.</msg>
  <msg name="WinJS.Binding.Template.render.value_p:href">템플릿을 로드할 URI입니다.</msg>
  <msg name="WinJS.Binding.Template.render.value_returnValue">바인딩 후에 완료되는 목표를 달성했습니다. 컨테이너 매개 변수나 만들어진 DIV에 지정된 개체입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template">지정된 데이터에 연결하고 QueryCollection에 포함된 요소에 부모가 템플릿을 렌더링합니다. QueryCollection에 여러 요소가 포함되어 있으면 서식 파일의 각 요소에는 QueryCollection에 전달된 데이터 항목마다 한 번에 여러 번 렌더링됩니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:templateElement">템플릿 컨트롤이 연결된 DOM 요소입니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:data">렌더링할 데이터입니다. 다음 데이터 배열(또는 forEach 메서드를 가진 개체)이면 서식 파일 컬렉션에 있는 각 항목마다 여러 번 렌더링됩니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_p:renderDonePromiseCallback">제공하는 경우 이 함수는 렌더링될 템플릿과 템플릿 렌더링이 완료되면 충족된 약속이 전달될 때마다 호출됩니다.</msg>
  <msg name="WinJS.Utilities.QueryCollection.template_returnValue">QueryCollection입니다.</msg>
  <msg name="WinJS.Binding.declarativeBind">지정된 데이터 컨텍스트에서 지정된 루트의 후손이며 선언적 바인딩 특성(데이터-win-바인딩)을 갖는 요소에 값을 바인딩합니다.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:rootElement">바인딩할 요소를 찾으려면 검색을 시작할 요소입니다. 이 매개 변수가 생략된 경우 전체 문서가 검색됩니다.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:bindingCache">캐시된 바인딩 데이터입니다.</msg>
  <msg name="WinJS.Binding.declarativeBind_p:defaultInitializer">바인딩 식에 바인딩 이니셜라이저가 지정되어 있지 않은 경우 사용할 바인딩 이니셜라이저입니다. 제공되지 않은 경우 동작은 WinJS.Binding.defaultBind와 동일합니다.</msg>
  <msg name="WinJS.Binding.declarativeBind_returnValue">바인딩 선언에 포함된 각 항목이 처리되고 업데이트를 시작할 때 완료하는 약속입니다.</msg>
  <msg name="WinJS.Binding.converter">Source 속성의 값에서 실행되는 제공된 변환기 함수 바인딩 소스 속성에서 대상 속성 사이의 기본 바인딩 이니셜라이저를 만듭니다.</msg>
  <msg name="WinJS.Binding.converter_p:convert">변환 소스 속성에서 대상 속성에 설정된 값을 생성하는 결과를 통해 작동합니다.</msg>
  <msg name="WinJS.Binding.converter_returnValue">바인딩 이니셜라이저입니다.</msg>
  <msg name="WinJS.Binding.setAttribute">소스 개체와 대상 요소의 특성 간의 단방향 바인딩을 만듭니다.</msg>
  <msg name="WinJS.Binding.setAttribute_p:source">소스 개체입니다.</msg>
  <msg name="WinJS.Binding.setAttribute_p:sourceProperties">소스 속성의 소스 개체에 대한 경로입니다.</msg>
  <msg name="WinJS.Binding.setAttribute_p:dest">대상 개체는 DOM 요소여야 합니다.</msg>
  <msg name="WinJS.Binding.setAttribute_p:destProperties">대상 속성의 대상 개체에 대한 경로입니다. 이는 단일 이름이어야 합니다.</msg>
  <msg name="WinJS.Binding.setAttribute_p:initialValue">대상의 알려진 초기 값이며, 소스 값이 이 초기 값과 동일할 경우(=== 사용) 대상이 가장 먼저 설정되지 않습니다.</msg>
  <msg name="WinJS.Binding.setAttribute_returnValue">취소 메서드 바인딩을 결합하는 데 사용되는 개체입니다.</msg>
  <msg name="WinJS.Binding.setAttributeOneTime">대상 요소의 특성을 소스 속성 값으로 설정합니다.</msg>
  <msg name="WinJS.Binding.addClassOneTime">대상 요소의 클래스를 소스 속성 값으로 추가합니다.</msg>
  <msg name="WinJS.Binding.defaultBind">소스 개체와 대상 개체 간의 단방향 바인딩을 만듭니다.</msg>
  <msg name="WinJS.Binding.defaultBind_p:dest">대상 개체입니다.</msg>
  <msg name="WinJS.Binding.defaultBind_p:destProperties">대상 속성의 대상 개체에 대한 경로입니다.</msg>
  <msg name="WinJS.Binding.oneTime">대상 속성을 소스 속성 값으로 설정합니다.</msg>
  <msg name="WinJS.Binding.initializer">선언적 데이터 바인딩과 호환되는 것으로 사용자 정의 이니셜라이저 함수를 표시합니다.</msg>
  <msg name="WinJS.Binding.initializer_p:customInitializer">선언적 데이터 바인딩과 호환되는 것으로 사용자 정의 이니셜라이저 함수를 표시합니다.</msg>
  <msg name="WinJS.Binding.initializer_returnValue">입력된 customInitializer입니다.</msg>
  <msg name="WinJS.Binding.ListBase.onitemchanged">지정된 키로 식별하는 값을 다른 값으로 대체합니다.</msg>
  <msg name="WinJS.Binding.ListBase.oniteminserted">새 값이 목록에 삽입되었습니다.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmoved">지정된 키로 식별하는 값에 다른 인덱스 목록을 이동했습니다.</msg>
  <msg name="WinJS.Binding.ListBase.onitemmutated">지정된 키로 식별되는 값이 변경되었습니다.</msg>
  <msg name="WinJS.Binding.ListBase.onitemremoved">지정된 키로 식별되는 값이 목록에서 제거되었습니다.</msg>
  <msg name="WinJS.Binding.ListBase.onreload">목록이 새로 고침되었습니다. 목록에 있는 항목에 대한 참조가 올바르지 않을 수 있습니다.</msg>
  <msg name="WinJS.Binding.ListBase.notifyReload">모든 수신기에 다시 알림을 보내도록 목록을 강제화합니다.</msg>
  <msg name="WinJS.Binding.ListBase.getAt">지정한 인덱스의 값을 가져옵니다.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_p:index">가져올 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.ListBase.getAt_returnValue">지정한 인덱스의 값입니다.</msg>
  <msg name="WinJS.Binding.ListBase.concat">두 배열의 조합으로 구성된 새 목록을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.concat_returnValue">목록 및 기타의 연결을 포함하는 배열 항목을 제공합니다.</msg>
  <msg name="WinJS.Binding.ListBase.join">배열에서 연결되고 지정된 구분 문자열로 구분되는 모든 요소로 구성된 문자열 목록을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.join_p:separator">목록 요소를 구분하는 데 사용할 문자열입니다. 이 매개 변수를 생략하면 목록 요소는 쉼표로 구분됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.join_returnValue">지정된 구분 문자열로 구분되는 목록 요소입니다.</msg>
  <msg name="WinJS.Binding.ListBase.slice">목록 부분을 추출하고 새 목록을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:begin">섹션의 시작 부분을 지정하는 인덱스입니다.</msg>
  <msg name="WinJS.Binding.ListBase.slice_p:end">섹션의 끝 부분을 지정하는 인덱스입니다.</msg>
  <msg name="WinJS.Binding.ListBase.slice_returnValue">배열의 일정 부분을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf">목록에 있는 지정된 값이 맨 처음 발견되는 인덱스를 가져옵니다.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:searchElement">목록에서 찾을 값입니다.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_p:fromIndex">검색을 시작할 인덱스입니다. FromIndex가 생략된 경우 인덱스 0부터 검색을 시작합니다.</msg>
  <msg name="WinJS.Binding.ListBase.indexOf_returnValue">목록에 있는 지정된 값이 맨 처음 발견되거나 찾을 수 없을 경우 -1인 인덱스입니다.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf">목록에 있는 지정된 값이 맨 마지막으로 발견되는 인덱스를 가져옵니다.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_p:fromIndex">검색을 시작할 인덱스입니다. FromIndex가 생략된 경우 목록에 있는 마지막 인덱스부터 검색을 시작합니다.</msg>
  <msg name="WinJS.Binding.ListBase.lastIndexOf_returnValue">목록에 있는 지정된 값이 맨 마지막 발견되거나 찾을 수 없을 경우 -1인 인덱스입니다.</msg>
  <msg name="WinJS.Binding.ListBase.every">지정한 콜백 함수 목록의 모든 요소에 대해 true를 반환하는지 여부를 확인합니다.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:callback">최대 3개의 인수를 받아들이는 함수입니다. 이 함수가 false 반환 또는 목록 끝에 도달할때까지 목록의 각 요소에 대해 호출합니다.</msg>
  <msg name="WinJS.Binding.ListBase.every_p:thisArg">개체에는 이 키워드의 콜백 함수를 참조할 수 있습니다. ThisArg를 생략하면 정의되지 않음이 사용됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.every_returnValue">콜백 목록에서 모든 요소에 대해 반환하면 true입니다.</msg>
  <msg name="WinJS.Binding.ListBase.filter">콜백 함수에 지정된 조건에 맞는 요소 목록을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.filter_p:callback">최대 3개의 인수를 받아들이는 함수입니다. 목록의 각 요소에 대해 함수를 호출합니다.</msg>
  <msg name="WinJS.Binding.ListBase.filter_returnValue">배열에는 콜백 함수에 지정된 조건에 맞는 요소가 포함되어 있습니다.</msg>
  <msg name="WinJS.Binding.ListBase.forEach">목록의 각 요소에 대해 지정된 콜백 함수를 호출합니다.</msg>
  <msg name="WinJS.Binding.ListBase.map">목록의 각 요소에서 지정한 콜백 함수를 호출하고 결과를 포함하는 배열을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.map_returnValue">콜백 함수를 호출하여 목록의 각 요소에서 결과를 포함하는 배열입니다.</msg>
  <msg name="WinJS.Binding.ListBase.some">지정한 콜백 함수 목록의 모든 요소에 대해 true를 반환하는지 여부를 확인합니다.</msg>
  <msg name="WinJS.Binding.ListBase.some_p:callback">최대 3개의 인수를 받아들이는 함수입니다. 이 함수가 true 반환 또는 목록 끝에 도달할때까지 목록의 각 요소에 대해 호출합니다.</msg>
  <msg name="WinJS.Binding.ListBase.some_returnValue">콜백 목록에서 모든 요소에 대해 반환하면 true입니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduce">목록에 있는 모든 요소에 대한 지정된 콜백 함수를 호출하여 단일 결과를 누적합니다. 콜백 함수의 반환 값은 누적된 결과이며 다음 콜백 함수 호출에서 인수로 제공됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:callback">최대 4개의 인수를 받아들이는 함수입니다. 목록의 각 요소에 대해 함수를 호출합니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_p:initialValue">initialValue를 지정하지 않으면 누적 시작 값으로 사용됩니다. 첫 번째 호출은 함수에 인수로 목록 값 대신 이 값을 제공합니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduce_returnValue">마지막으로 콜백 함수 호출에서 반환하는 값입니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight">내림차순으로 목록에 있는 모든 요소에 대한 지정된 콜백 함수를 호출하여 단일 결과를 누적합니다. 콜백 함수의 반환 값은 누적된 결과이며 다음 콜백 함수 호출에서 인수로 제공됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_p:initialValue">initialValue를 지정하지 않으면 누적 시작 값으로 사용됩니다. 첫 번째 호출은 callbackfn 함수에 인수로 목록 값 대신 이 값을 제공합니다.</msg>
  <msg name="WinJS.Binding.ListBase.reduceRight_returnValue">콜백 함수 호출에서 마지막으로 호출하는 반환 값입니다.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered">이 목록을 통해 라이브 필터링된 예측을 만듭니다. 목록이 변경되면 필터링된 프로젝션은 변경 사항에 반응하며 변경될 수 있습니다.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_p:predicate">하나의 인수를 받아들이는 함수입니다. 목록에서 각 콜백 요소와 createFiltered 함수를 호출합니다. 함수가 true를 반환하면 필터링된 목록에서 해당 요소가 포함됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.createFiltered_returnValue">목록에 있는 필터링된 프로젝션입니다.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped">이 목록을 통해 라이브 구분된 예측을 만듭니다. 목록이 변경되면 구분된 프로젝트는 변경 사항에 반응하며 변경될 수 있습니다. 그룹화된 프로젝션은 투영 그룹 연속적인 순서로 목록의 모든 요소를 정렬합니다. 그룹화된 프로젝션은 목록에 있는 그룹을 나타내는 WinJS.Binding.List인 .groups 속성을 포함합니다.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupKey">하나의 인수를 받아들이는 함수입니다. 함수 목록의 각 요소를 호출할 때는 함수 요소를 포함하는 그룹을 나타내는 문자열을 반환합니다.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupData">하나의 인수를 받아들이는 함수입니다. 그룹에 대해 목록에 있는 요소에 대해 함수를 호출합니다. 이 .groups 목록 요소가 그룹에 대한 데이터를 설정해야 하는 값을 반환해야 합니다.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_p:groupSorter">2개의 인수를 받아들이는 함수입니다. 함수 목록에서 찾을 그룹의 키로 호출합니다. 다음 숫자 값 중 하나를 반환 해야 합니다: 첫 번째 인수가 음수 미만 두 번째, 두 인수가 같으면 0이 첫 번째 인수가 두 번째보다 클 경우 양수입니다. 인수를 생략하면 그룹이 오름차순, ASCII 문자 순서로 정렬됩니다.</msg>
  <msg name="WinJS.Binding.ListBase.createGrouped_returnValue">목록에 있는 구분된 프로젝션입니다.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted">이 목록을 통해 라이브 정렬된 예측을 만듭니다. 목록이 변경되면 정렬된 프로젝트는 변경 사항에 반응하며 변경될 수 있습니다.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_p:sorter">2개의 인수를 받아들이는 함수입니다. 목록의 요소에 대해 함수를 호출합니다. 다음 숫자 값 중 하나를 반환 해야 합니다: 첫 번째 인수가 음수 미만 두 번째, 두 인수가 같으면 0이 첫 번째 인수가 두 번째보다 클 경우 양수입니다.</msg>
  <msg name="WinJS.Binding.ListBase.createSorted_returnValue">목록에 있는 정렬된 프로젝션입니다.</msg>
  <msg name="WinJS.Binding.ListProjection.dispose">이 WinJS.Binding.List 프로젝션의 기본 WinJS.Binding.List에서 연결을 끊습니다. 다른 수명이 있을 경우에만 중요합니다.</msg>
  <msg name="WinJS.Binding.ListProjection.getItemFromKey">지정된 키에 대한 인덱스 키/데이터 쌍을 가져옵니다.</msg>
  <msg name="WinJS.Binding.ListProjection.move">newIndex에 있는 인덱스로 값을 이동합니다.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.length">목록에 정의된 요소의 최고값보다 하나 큰 정수 값을 반환합니다.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem">지정된 목록에 대한 인덱스 키/데이터 쌍을 반환합니다.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.getItem_p:index">검색할 값의 인덱스입니다.</msg>
  <msg name="WinJS.Binding.FilteredListProjection.indexOfKey">목록에서 키가 처음으로 나오는 경우의 인덱스를 반환합니다.</msg>
  <msg name="WinJS.Binding.SortedListProjection.length">목록 길이를 가져오거나 설정합니다. 목록에 정의된 요소의 최고값보다 하나 큰 정수 값을 반환합니다.</msg>
  <msg name="WinJS.Binding.SortedListProjection.getItem">키가 처음으로 나오는 경우의 인덱스를 반환합니다.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.groups">이 목록에서 식별된 그룹의 프로젝션인 WinJS.Binding.List를 가져옵니다.</msg>
  <msg name="WinJS.Binding.GroupedSortedListProjection.getItemFromKey">지정된 항목 키에 대한 인덱스 키/데이터 쌍을 가져옵니다.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.length">목록의 길이를 가져옵니다. 목록에 정의된 요소의 최고값보다 하나 큰 정수 값을 반환합니다.</msg>
  <msg name="WinJS.Binding.GroupsListProjection.getItem">지정된 인덱스에 대한 인덱스 키/데이터 쌍을 가져옵니다.</msg>
  <msg name="WinJS.Resources.processAll">리소스 태그를 처리하고 지역화된 문자열과 함께 문자열을 바꿉니다.</msg>
  <msg name="WinJS.Resources.processAll_p:rootElement">DOM 요소를 처리하기 시작합니다. processAll 요소와 자식 요소를 처리합니다. 루트 요소를 지정하지 않으면 processAll은 문서 전체를 처리합니다.</msg>
</messagebundle>